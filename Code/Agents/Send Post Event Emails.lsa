<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE agent SYSTEM 'xmlschemas/domino_10_0_1.dtd'>
<agent name='Send Post Event Emails' alias='SendPostEventEmails' xmlns='http://www.lotus.com/dxl'
 version='10.0' maintenanceversion='1.0' replicaid='862577A00065A565' hide='web v3'
 publicaccess='false' designerversion='8.5.3' comment='Runs daily at 1:30 AM on 502 - Sends post event e-mails to All Attendees'
 restrictions='unrestricted' activatable='false'>
<noteinfo noteid='13fba' unid='8426D6FDF2D3289B8625793000780819' sequence='91'>
<created><datetime dst='true'>20111021T165103,93-05</datetime></created>
<modified><datetime dst='true'>20180929T235545,54-05</datetime></modified>
<revised><datetime dst='true'>20160621T121926,26-05</datetime></revised>
<lastaccessed><datetime dst='true'>20180929T235545,54-05</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20180929T235545,54-05</datetime></addedtofile></noteinfo>
<updatedby><name>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></updatedby>
<wassignedby><name>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></wassignedby>
<designchange><datetime dst='true'>20160621T121918,68-05</datetime></designchange>
<trigger type='scheduled'>
<schedule type='daily' runlocation='specific' runserver='CN=B01ACIDB502/OU=01/OU=A/O=IBMEXT'>
<starttime><datetime>T013000,00</datetime></starttime></schedule></trigger>
<documentset type='all'/><code event='options'><lotusscript>'-----------------------------------------------------------------------------------------------------------------
' SendPostEventEmails
'-----------------------------------------------------------------------------------------------------------------
'
' This agent is designed to be run on a scheduled basis to send automated post event
' e-mails to people enrolled in events. 
'
' Author: Core Lan
'
' Revision History:
'
' Date                  By               		Description
' --------              ---               		------------------
' October 2011			David Holbrok			Created.
'-----------------------------------------------------------------------------------------------------------------

Option Public
Option Declare

Use "Common Functions"

</lotusscript></code><code event='initialize'><lotusscript>Sub Initialize
	Call sendAllRegEmails
	Call sendAttendedEmails
	Call sendNoShowEmails
End Sub

</lotusscript></code><code event='sendAllRegEmails'><lotusscript>%REM
	Sub sendAllRegEmails
	Description: Comments for Sub
%END REM
Sub sendAllRegEmails()
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Send post event e-mails (for All Registrations) for all events that have specified that post event
	'e-mails are to be sent and the attendance is marked Completed (based on the settings in the event profile
	'for the event).
	'
	'Parameters
	'-----------------------
	'None.
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AGENT: SendPostEventEmails:sendAllRegEmails()|
	
	Dim flgIsMultiLanguageEvent As Boolean
	Dim flgSendPostEventEmails As Boolean
	Dim docEventProfile As NotesDocument
	Dim docEnrollment As NotesDocument
	Dim docEmailTemplate As NotesDocument	
	Dim myMerger As MergeGenerator
	Dim flgOK As Boolean
	
	Dim strToday As String	
	Dim strEventStartDate As String
	Dim strDateToSendReminders As String
	
	Dim collAllEnrollments As NotesDocumentCollection
	Dim viewCompletedEvents As NotesView
	Dim viewAllEnrollments As NotesView
	Dim docNext As NotesDocument
	
	Dim intDaysPriorToEventToSendReminders As Integer
	Dim dtStart As NotesDateTime
	Dim strEmailType As String
	
	Call Debug(STR_MODULE_NAME &amp; |: Started.|)
	
	'Trap errors
	On Error Goto lblError	
	
	'Get handles to the lookup views
	Set viewCompletedEvents = g_dbCurr.GetView("vLookupEventsMarkedCompletedAllReg")
	Set viewAllEnrollments = g_dbCurr.GetView("vLookupRegistrationsByEventID_All")
	
	'Create new object to merge text with
	Set myMerger = InitMergeGenerator(g_dbCurr, True, "Registration")
	
	'Get today's date as a string formatted in the same way as the date string used in date comparisons
	strToday = Format$(Today, "MM/DD/YYYY")	
	
	'For each active event, get the associated Event Information document
	Set docEventProfile = viewCompletedEvents.GetFirstDocument
	
	While Not docEventProfile Is Nothing
		
		On Error Goto lblErrorNextEvent
		
		Set docNext = viewCompletedEvents.GetNextDocument(docEventProfile)
		
		'Get the event start date
		strEventStartDate = Format$(Cdat(docEventProfile.startmonth(0) &amp; "/" &amp; docEventProfile.startday(0) &amp; "/" &amp; docEventProfile.startyear(0) ), "MM/DD/YYYY")	
		
		Call Debug(STR_MODULE_NAME &amp; |: Processing event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].|)
		
		'Assume post event E-mails are not to be sent unless specified in the Event Profile
		flgSendPostEventEmails = False
		
		'Find out whether post event emails are enabled for this event
		If (flgIsEmailEnabled(docEventProfile, INT_EMAIL_POSTEVENT_ALLREG)) Then
			flgSendPostEventEmails = True
		End If
		
		If (flgSendPostEventEmails) Then
			
			If (docEventProfile.ep_UsePostEventAllReg(0) = "Yes" And _
			docEventProfile.ep_UsePostEventAttended(0) = "No" And _
			docEventProfile.ep_UsePostEventNoShow(0) = "No") Then
				
				Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are enabled for this event.|)
				
				'Find all enrollments for the event
				Set collAllEnrollments = viewAllEnrollments.GetAllDocumentsByKey(docEventProfile.ep_id(0), True)
				
				'If there are any enrollments for the event, then send E-mails
				If (collAllEnrollments.Count &gt; 0) Then
					
					Call Debug(STR_MODULE_NAME &amp; |: Processing [| &amp; Cstr(collAllEnrollments.Count)  &amp; |] enrollment(s) for this event.|)
					
					Set docEnrollment = collAllEnrollments.GetFirstDocument
					
					'Check whether this is a multi-language event
					flgIsMultiLanguageEvent = flgIsEventMultiLingual(docEventProfile)
					
					'Set docEmailTemplate = docGetEmailTemplateByAdminTask("postallreg")
					Set docEmailTemplate = docGetEmailTemplate(INT_EMAIL_POSTEVENT_ALLREG, docEventProfile, docEnrollment)
					
					While Not docEnrollment Is Nothing	
						
						If (docEmailTemplate Is Nothing) Then
							On Error Goto lblErrorNext
							Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  Unable to find e-mail template required to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|
lblNext:					
							On Error Goto lblErrorNextEvent
						Else
							'Because each enrollment may have a different locale, set the merge generator locale for each enrollment
							'myMerger.currLocale = Cstr(docEnrollment.Locale(0))
							If docEnrollment.ad_formstatus(0) &lt;&gt; "Cancelled" Then
								Dim mailDoc As NotesDocument
								Set mailDoc = myMerger.docCreateFormattedEMail(docEnrollment, docEmailTemplate)
								If Not (mailDoc.Save(False, False)) Then
									On Error Goto lblErrorNext2
									Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  An error occurred when attempting to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|								
lblNext2:
									On Error Goto lblErrorNextEvent
								Else
									docEnrollment.en_DatePostEventEmailAllRegSent = Now()
									
									Call docEnrollment.Save(True, False)
								End If
							End If
						End If
						
						Set docEnrollment = collAllEnrollments.GetNextDocument(docEnrollment)
					Wend
					
					docEventProfile.ep_PostEventEmailAllRegSent = "Yes"
					Call docEventProfile.Save(True, True)
					
				Else
					Call Debug(STR_MODULE_NAME &amp; |: There are no enrollments for this event.|)
				End If
				
			End If
			
		Else
			Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are NOT enabled for this event.|)
		End If
		
lblNextEvent:
		
		'Get the next event
		Set docEventProfile = docNext
		
	Wend
	
lblExit:
	
	Call Debug(STR_MODULE_NAME &amp; |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblExit
	
lblErrorNext:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext	
	
lblErrorNext2:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext2		
	
lblErrorNextEvent:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNextEvent	
	
End Sub

</lotusscript></code><code event='sendAttendedEmails'><lotusscript>%REM
	Sub sendAttendedEmails
	Description: Comments for Sub
%END REM
Sub sendAttendedEmails()
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Send post event e-mails (for Attended Registrations) for all events that have specified that post event
	'e-mails are to be sent and the attendance is marked Completed (based on the settings in the event profile
	'for the event).
	'
	'Parameters
	'-----------------------
	'None.
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AGENT: SendPostEventEmails:sendAttendedEmails()|
	
	Dim flgIsMultiLanguageEvent As Boolean
	Dim flgSendPostEventEmails As Boolean
	Dim docEventProfile As NotesDocument
	Dim docEnrollment As NotesDocument
	Dim docEmailTemplate As NotesDocument	
	Dim myMerger As MergeGenerator
	Dim flgOK As Boolean
	
	Dim strToday As String	
	Dim strEventStartDate As String
	Dim strDateToSendReminders As String
	
	Dim collAttendedEnrollments As NotesDocumentCollection
	Dim viewCompletedEvents As NotesView
	Dim viewAttendedEnrollments As NotesView
	Dim docNext As NotesDocument
	
	Dim intDaysPriorToEventToSendReminders As Integer
	Dim dtStart As NotesDateTime
	Dim strEmailType As String
	
	Call Debug(STR_MODULE_NAME &amp; |: Started.|)
	
	'Trap errors
	On Error Goto lblError	
	
	'Get handles to the lookup views
	Set viewCompletedEvents = g_dbCurr.GetView("vLookupEventsMarkedCompletedAttendedReg")
	Set viewAttendedEnrollments = g_dbCurr.GetView("vLookupRegistrationsByEventID_Attended")
	
	'Create new object to merge text with
	Set myMerger = InitMergeGenerator(g_dbCurr, True, "Registration")
	
	'Get today's date as a string formatted in the same way as the date string used in date comparisons
	strToday = Format$(Today, "MM/DD/YYYY")	
	
	'For each active event, get the associated Event Information document
	Set docEventProfile = viewCompletedEvents.GetFirstDocument
	
	While Not docEventProfile Is Nothing
		
		On Error Goto lblErrorNextEvent
		
		Set docNext = viewCompletedEvents.GetNextDocument(docEventProfile)
		
		'Get the event start date
		strEventStartDate = Format$(Cdat(docEventProfile.startmonth(0) &amp; "/" &amp; docEventProfile.startday(0) &amp; "/" &amp; docEventProfile.startyear(0) ), "MM/DD/YYYY")	
		
		Call Debug(STR_MODULE_NAME &amp; |: Processing event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].|)
		
		'Assume post event E-mails are not to be sent unless specified in the Event Profile
		flgSendPostEventEmails = False
		
		'Find out whether post event emails are enabled for this event
		If (flgIsEmailEnabled(docEventProfile, INT_EMAIL_POSTEVENT_ATTENDED)) Then
			flgSendPostEventEmails = True
		End If
		
		If (flgSendPostEventEmails) Then
			
			If (docEventProfile.ep_UsePostEventAttended(0) = "Yes" And _
			docEventProfile.ep_UsePostEventAllReg(0) = "No") Then
				
				Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are enabled for this event.|)
				
				'Find all attended enrollments for the event			
				Set collAttendedEnrollments = viewAttendedEnrollments.GetAllDocumentsByKey(docEventProfile.ep_id(0), True)
				
				'If there are any enrollments for the event, then send E-mails
				If (collAttendedEnrollments.Count &gt; 0) Then
					
					Call Debug(STR_MODULE_NAME &amp; |: Processing [| &amp; Cstr(collAttendedEnrollments.Count)  &amp; |] enrollment(s) for this event.|)
					
					Set docEnrollment = collAttendedEnrollments.GetFirstDocument
					
					'Check whether this is a multi-language event
					flgIsMultiLanguageEvent = flgIsEventMultiLingual(docEventProfile)
					
					'Set docEmailTemplate = docGetEmailTemplateByAdminTask("postattended")
					Set docEmailTemplate = docGetEmailTemplate(INT_EMAIL_POSTEVENT_ATTENDED, docEventProfile, docEnrollment)
					
					While Not docEnrollment Is Nothing	
						
						If (docEmailTemplate Is Nothing) Then
							On Error Goto lblErrorNext						
							Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  Unable to find e-mail template required to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|
lblNext:							
							On Error Goto lblErrorNextEvent
						Else
							'Because each enrollment may have a different locale, set the merge generator locale for each enrollment
							'myMerger.currLocale = Cstr(docEnrollment.Locale(0))
							Dim mailDoc As NotesDocument
							Set mailDoc = myMerger.docCreateFormattedEMail(docEnrollment, docEmailTemplate)
							If Not (mailDoc.Save(False, False)) Then
								On Error Goto lblErrorNext2
								Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  An error occurred when attempting to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|								
lblNext2:
								On Error Goto lblErrorNextEvent
							Else
								docEnrollment.en_DatePostEventEmailAttendedSent = Now()
								
								Call docEnrollment.Save(True, False)
							End If
						End If
						
						Set docEnrollment = collAttendedEnrollments.GetNextDocument(docEnrollment)		
					Wend
					
					docEventProfile.ep_PostEventEmailAttendedSent = "Yes"
					Call docEventProfile.Save(True, True)
					
				Else
					Call Debug(STR_MODULE_NAME &amp; |: There are no 'attended' enrollments for this event.|)
				End If
				
			End If
			
		Else
			Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are NOT enabled for this event.|)
		End If
		
lblNextEvent:
		
		'Get the next event
		Set docEventProfile = docNext
		
	Wend
	
lblExit:
	
	Call Debug(STR_MODULE_NAME &amp; |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblExit
	
lblErrorNext:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext	
	
lblErrorNext2:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext2		
	
lblErrorNextEvent:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNextEvent	
	
End Sub

</lotusscript></code><code event='sendNoShowEmails'><lotusscript>%REM
	Sub sendNoShowEmails
	Description: Comments for Sub
%END REM
Sub sendNoShowEmails()
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Send post event e-mails (for No Show Registrations) for all events that have specified that post event
	'e-mails are to be sent and the attendance is marked Completed (based on the settings in the event profile
	'for the event).
	'
	'Parameters
	'-----------------------
	'None.
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AGENT: SendPostEventEmails:sendNoShowEmails()|
	
	Dim flgIsMultiLanguageEvent As Boolean
	Dim flgSendPostEventEmails As Boolean
	Dim docEventProfile As NotesDocument
	Dim docEnrollment As NotesDocument
	Dim docEmailTemplate As NotesDocument	
	Dim myMerger As MergeGenerator
	Dim flgOK As Boolean
	
	Dim strToday As String	
	Dim strEventStartDate As String
	Dim strDateToSendReminders As String
	
	Dim collNoShowEnrollments As NotesDocumentCollection
	Dim viewCompletedEvents As NotesView
	Dim viewNoShowEnrollments As NotesView
	Dim docNext As NotesDocument
	
	Dim intDaysPriorToEventToSendReminders As Integer
	Dim dtStart As NotesDateTime
	Dim strEmailType As String
	Dim ctr As Integer
	ctr = 1
	
	Call Debug(STR_MODULE_NAME &amp; |: Started.|)
	
	'Trap errors
	On Error Goto lblError	
	
	'Get handles to the lookup views
	Set viewCompletedEvents = g_dbCurr.GetView("vLookupEventsMarkedCompletedNoShowReg")
	Set viewNoShowEnrollments = g_dbCurr.GetView("vLookupRegistrationsByEventID_NoShow")
	
	'Create new object to merge text with
	Set myMerger = InitMergeGenerator(g_dbCurr, True, "Registration")
	
	'Get today's date as a string formatted in the same way as the date string used in date comparisons
	strToday = Format$(Today, "MM/DD/YYYY")	
	
	'For each active event, get the associated Event Information document
	Set docEventProfile = viewCompletedEvents.GetFirstDocument
	
	While Not docEventProfile Is Nothing
		
		'Print "Processing " + CStr(ctr) + "..."
		On Error Goto lblErrorNextEvent
		
		'If docEventProfile.ep_id(0) = "78Q4JUES" Then
		
		Set docNext = viewCompletedEvents.GetNextDocument(docEventProfile)
		
		'Get the event start date
		strEventStartDate = Format$(Cdat(docEventProfile.startmonth(0) &amp; "/" &amp; docEventProfile.startday(0) &amp; "/" &amp; docEventProfile.startyear(0) ), "MM/DD/YYYY")	
		
		Call Debug(STR_MODULE_NAME &amp; |: Processing event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].|)
		
		'Assume post event E-mails are not to be sent unless specified in the Event Profile
		flgSendPostEventEmails = False
		
		'Find out whether post event emails are enabled for this event
		If (flgIsEmailEnabled(docEventProfile, INT_EMAIL_POSTEVENT_NOSHOW)) Then
			flgSendPostEventEmails = True
		End If
		
		If (flgSendPostEventEmails) Then
			
			If (docEventProfile.ep_UsePostEventNoShow(0) = "Yes" And _
			docEventProfile.ep_UsePostEventAllReg(0) = "No") Then
				
				Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are enabled for this event.|)
				
				'Find all enrollments for the event			
				Set collNoShowEnrollments = viewNoShowEnrollments.GetAllDocumentsByKey(docEventProfile.ep_id(0), True)
				
				'If there are any enrollments for the event, then send E-mails
				If (collNoShowEnrollments.Count &gt; 0) Then
					
					Call Debug(STR_MODULE_NAME &amp; |: Processing [| &amp; Cstr(collNoShowEnrollments.Count)  &amp; |] enrollment(s) for this event.|)
					
					Set docEnrollment = collNoShowEnrollments.GetFirstDocument
					
					'Check whether this is a multi-language event
					flgIsMultiLanguageEvent = flgIsEventMultiLingual(docEventProfile)
					
					'Set docEmailTemplate = docGetEmailTemplateByAdminTask("postnoshow")
					Set docEmailTemplate = docGetEmailTemplate(INT_EMAIL_POSTEVENT_NOSHOW, docEventProfile, docEnrollment)
					
					While Not docEnrollment Is Nothing	
						
						If (docEmailTemplate Is Nothing) Then
							On Error Goto lblErrorNext						
							Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  Unable to find e-mail template required to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|
lblNext:							
							On Error Goto lblErrorNextEvent
						Else
							'Because each enrollment may have a different locale, set the merge generator locale for each enrollment
							'myMerger.currLocale = Cstr(docEnrollment.Locale(0))
							Dim mailDoc As NotesDocument
							Set mailDoc = myMerger.docCreateFormattedEMail(docEnrollment, docEmailTemplate)
							If Not (mailDoc.Save(False, False)) Then
								On Error Goto lblErrorNext2
								Error ERR_SYSTEM_ERROR, |E-mail not sent for event [| &amp; Cstr(docEventProfile.eventname(0)) &amp; |] with start date [| &amp; strEventStartDate &amp; |].  An error occurred when attempting to send e-mail to [| &amp; Cstr(docEnrollment.en_email(0)) &amp; |].|								
lblNext2:
								On Error Goto lblErrorNextEvent
							Else
								Call docEnrollment.ReplaceItemValue("en_DatePostEventEmailNoShowSent", Now())
								Call docEnrollment.Save(True, False)
							End If
						End If
						
						Set docEnrollment = collNoShowEnrollments.GetNextDocument(docEnrollment)		
					Wend
					
					docEventProfile.ep_PostEventEmailNoShowSent = "Yes"
					Call docEventProfile.Save(True, True)
					
				Else
					Call Debug(STR_MODULE_NAME &amp; |: There are no 'no show' enrollments for this event.|)
				End If
				
			End If
			
		Else
			Call Debug(STR_MODULE_NAME &amp; |: Post event E-mails are NOT enabled for this event.|)
		End If
		
		'End If
		
lblNextEvent:
		
		'Get the next event
		Set docEventProfile = docNext
		ctr = ctr + 1
		
	Wend
	
lblExit:
	
	Call Debug(STR_MODULE_NAME &amp; |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblExit
	
lblErrorNext:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext	
	
lblErrorNext2:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNext2		
	
lblErrorNextEvent:
	
	Call Debug(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Call LogError(STR_MODULE_NAME &amp; |: | &amp; Err() &amp; |: | &amp; Error() &amp; | in line | &amp; Erl)
	Resume lblNextEvent
	
End Sub</lotusscript></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime dst='true'>20160621T121926,25-05</datetime></agentmodified></rundata>
<item name='$POID'><datetime>20160309T165349,92-06</datetime></item></agent>

