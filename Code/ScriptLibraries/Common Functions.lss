'++LotusScript Development Environment:2:5:(Options):0:74
'-----------------------------------------------------------------------------------------------------------------
' Common Functions
'-----------------------------------------------------------------------------------------------------------------
' 
' This script library contains functions for the Attendee Solution databases.
'
' Author: David Holbrook
'
' Revision History:
'
' Date             		By          	Description
' --------       		--- 		  	-----------------
' November 2007			CoreLan			Original version.
' January  2008			CoreLan			1.1
' November 2010			CoreLan			1.2
' April 2011			CoreLan			1.3
' Sept 2011				CoreLan			1.4
' Feb 2014				CoreLan			1.41
'-----------------------------------------------------------------------------------------------------------------

Option Public
Option Declare

%INCLUDE "lsconst.lss"

Use "MergeGenerator"
Use "BluePages"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub Initialize
Declare Sub Terminate
Declare Sub CreateTableFiveColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function GetTrackFieldItemStr(doc As NotesDocument, str_t As String, str_s As String, str_type As String) As String
Declare Function flgDoVersionRedirect(docCurr As NotesDocument, strLocale As String, strFormName As String) As Boolean
Declare Function flgIsDuplicateLandingPage(docLandingPageProfile As NotesDocument) As Boolean
Declare Function flgUpdateRegistrations(strEventID As String, flgRestrictAccess As Boolean, varRegistrationViewers As Variant) As Integer
Declare Function strGetInternetEmailAddress(strUserName As String) As String
Declare Sub TranslateLocaleSpecificInfo(strLocale As String, docEnrollment As NotesDocument)
Declare Function dbGetAmenityPackageDb() As NotesDatabase
Declare Function dbGetReferenceDb() As NotesDatabase
Declare Function docGetCountryProfile(strCountryCode As String) As NotesDocument
Declare Sub CreateTableThreeColumnsSpanVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Sub CreateTableThreeColumnsSpanVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Sub NotifyQATeam(docEventProfile As NotesDocument)
Declare Function dbGetHomeDb(intEnvironment As Integer) As NotesDatabase
Declare Function flgIsRedirect(strQueryString As String) As Boolean
Declare Sub setNumTracksOnDay(d As Integer, doc_RegTrackProfile As NotesDocument, doc_enrollForm As NotesDocument)
Declare Function flgUpdateNomination(docNomination As NotesDocument, dtNow As NotesDateTime, flgEnableUI As Boolean) As Boolean
Declare Function strFormatDate(strMonth As String, strDay As String, strYear As String) As String
Declare Function docGetLocaleProfile(strLocale As String) As NotesDocument
Declare Function docGetInvitationByKey(strEventID As String, strInvID As String) As NotesDocument
Declare Sub GetEventSolutionFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument)
Declare Sub CreateSessionSectionHTML(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
Declare Function strPrefixWithZero(strInput As String) As String
Declare Function collGetRegProfilesByEventID(docEventProfile As NotesDocument) As NotesDocumentCollection
Declare Function InitMergeGenerator(db As NotesDatabase, flgOnServer As Boolean, str_MGType As String) As MergeGenerator
Declare Function strGetWebVersion(strLocale As String) As String
Declare Function docCreateRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub CreateTableVer1_4(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
Declare Sub GetAttendeeFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Sub CreateTableVer1_3(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
Declare Sub GetAmenityHTML(docEventProfile As NotesDocument, strPageLocale As String, docCurr As NotesDocument)
Declare Function docCopySpeakersPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Function dbGetEventBriefsDb() As NotesDatabase
Declare Sub GetCompanyFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Sub PullNominationsStatusFromInviteeTool(flgEnableUI As Boolean)
Declare Function flgSendReport(docReport As NotesDocument, docSubscriptionProfile As NotesDocument) As Boolean
Declare Sub CreateTableNineColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub GetQTags(docEventProfile As NotesDocument, strarrQTags() As String, intCountQTags As Integer)
Declare Sub CreateTableOneColumnVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
Declare Sub CreateTableOneColumnVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
Declare Sub CreateTableSixColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function strGetNonBreakSpace(str_ToCheck As String) As String
Declare Sub CreateTableSixColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function docGetSponsorsByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub CreateTableSixColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
Declare Function docGetLocaleProfileByCountryCode(strCountryCode As String) As NotesDocument
Declare Sub CopyTo(docFrom As NotesDocument, strFromFieldName As String, docTo As NotesDocument, strToFieldName As String)
Declare Sub MarkEventDelinquent(docEventProfile As NotesDocument, dtTimestamp As NotesDateTime)
Declare Function docCreateSponsorsPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub GetMIQuestionFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Sub LoadExportDialog(docEventProfile As NotesDocument, docDialog As NotesDocument)
Declare Sub PrintBadge(doc As NotesDocument, flgIsSpeaker As Integer)
Declare Sub CreateSessionSectionHTMLVer1_4(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub CreateSessionSectionHTMLVer1_3(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub PushNominationsToInviteeTool(flgEnableUI As Boolean)
Declare Sub CreateSessionSectionHTMLVer1_2(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub CreateSessionSectionHTMLVer1_1(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub CreateSessionSectionHTMLVer1_0(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub CreateTableSevenColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function docGetEmailTemplate(intEMailType As Integer, docEventProfile As NotesDocument, docEnrollment As NotesDocument) As NotesDocument
Declare Sub CreateTableSevenColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub CopyToAREventProfile(docAREventProfile As NotesDocument, strFieldName As String, varValue As Variant)
Declare Sub CreateTableSevenColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function docCopyRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Function docCreateSpeakersPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub CheckField(docCurr As NotesDocument, strFieldName As String, strFieldLabel As String, strMsg As String, strErrorFieldName As String, intCountErrors As Integer)
Declare Function exportCreatePropertyStruct(strTypeName As String, objCoreReflection As Variant) As Variant
Declare Sub OpenWebsite(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub ExplodeQueryString(strQueryString As String, strlstAgentArgs List As String)
Declare Function docGetRegProfileByBriefIDAndLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Function docGetMIQuestionSetLookup(strQuestionSetID As String, strLocale As String) As NotesDocument
Declare Function flgUpdateEventDocument(docEventProfile As NotesDocument, doc As NotesDocument) As Boolean
Declare Sub CreateTableSixColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function strGetAmenityTypeTranslations(docLocaleProfile As NotesDocument, varAmenityTypes As Variant) As String
Declare Sub UpdateWeb2CRMSettings(docEventProfile As NotesDocument, docAREventProfile As NotesDocument, intReturnCode As Integer)
Declare Sub PrintSelectedBadges(flgIsSpeaker As Integer)
Declare Sub CreateTableFourColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function docGetEventProfile(strEventID As String) As NotesDocument
Declare Function strGetTranslation(docLocaleProfile As NotesDocument, strTextToTranslate As String, strTranslationsFieldName As String) As String
Declare Function getGraphicTable(doc As NotesDocument) As String
Declare Sub DeleteEvent()
Declare Sub CreateTableTwoColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String, _
	str_colWidth As String, str_col2Float As String)
Declare Sub CreateTableEightColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function flgDefaultEmailExists(docEmailTemplate As NotesDocument) As Boolean
Declare Sub CreateTableEightColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub PublishWeb2CRMToARConfigurations()
Declare Sub ShowInfoMsg(strMsg As String)
Declare Function docGetSpeakersByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub CreateTableFiveColumns(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function docCopySponsorsPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub GetOptInOptOutFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Function docGetAREventProfile(strEventID As String, intReturnCode As Integer) As NotesDocument
Declare Sub CopyToSame(docFrom As NotesDocument, strFieldName As String, docTo As NotesDocument)
Declare Function dbGetInviteeToolDb()
Declare Sub CreateTableTwoColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Sub CreateTableThreeColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function dbGetAmenityDb() As NotesDatabase
Declare Sub UpdateESWebAddress(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub UpdateAREventProfile(docESEventBrief As NotesDocument, docEventProfile As NotesDocument, docAREventProfile As NotesDocument, intReturnCode As Integer)
Declare Sub LoadOptionalQuestion(intCurrQuestion As Integer, docRegistrationProfile As NotesDocument, docDialog As NotesDocument)
Declare Sub ShowErrorMsg(strMsg As String)
Declare Function strRemoveNewlines(strInput As String) As String
Declare Sub CreateSessionSectionHTMLVer1_15(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
Declare Sub UpdateHomeDb(docEventProfile As NotesDocument, intUpdateType As Integer)
Declare Sub GetFooterSettings(docLocaleRef As NotesDocument, doc As NotesDocument)
Declare Function docBuildReport(strEventID As String, strReportType As String) As NotesDocument
Declare Sub PublishEventsToAR()
Declare Function docGetEmailTemplateByAdminTask(strTask As String) As NotesDocument
Declare Sub CreateTableEightColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function createRegID(doc As NotesDocument) As String
Declare Sub CreateTableTwoColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String, _
	str_colWidth As String, str_col2Float As String)
Declare Sub CreateTableTwoColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Sub CreateTableTwoColumnsSpanVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function docGetLocaleSettings(strLocale As String) As NotesDocument
Declare Sub GetAttendeeTypeTranslations(docLocaleProfile As NotesDocument, strScript As String)
Declare Sub ProcessSubscriptions()
Declare Function strGetLocaleID(docEventProfile As NotesDocument, strLocale As String) As String
Declare Function strGetURLParameter(strParameterName As String, strQueryString As String) As String
Declare Sub UpdateHomeDbViaAgent(docEventProfile As NotesDocument, intUpdateType As Integer)
Declare Sub CopyNominationsToInviteeTool(docEventProfile As NotesDocument, flgEnableUI As Boolean)
Declare Function intAskQuestion(strMsg As String) As Integer
Declare Function docGetEnrollmentByUNID(strUNID As String) As NotesDocument
Declare Sub GetESBriefInfo(docEventProfile As NotesDocument)
Declare Function flgGetESBriefFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument) As Boolean
Declare Function flgSendAdminEmail(docEventProfile As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator) As Boolean
Declare Sub StoreAttendeeTypes(docAREventProfile As NotesDocument, docEventProfile As NotesDocument)
Declare Sub LoadTopLinkDefaults(doc As NotesDocument, strLocale As String)
Declare Function docGetEmailTemplateByUNID(strUNID As String) As NotesDocument
Declare Sub PublishWeb2CRMEvent(docEventProfile As NotesDocument, intReturnCode As Integer)
Declare Sub CreateTableEightColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Function docCreateAgenda(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Function docGetInvitationByEmail(strEventID As String, strInvEmail As String) As NotesDocument
Declare Sub GetMarketingRoles(strLocale As String, strBrand As String, docCurr As NotesDocument, strScript As String)
Declare Function flgGetCTEBAFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument) As Boolean
Declare Function flgHasRole(strRole As String) As Integer
Declare Function docGetCanisterProfile(strCanisterID As String) As NotesDocument
Declare Function flgAlreadyRegistered(docInvitation As NotesDocument) As Boolean
Declare Sub AddRegistrationConfiguration(strLocale As String) 
Declare Sub AddSpeakerConfiguration(strLocale As String)
Declare Function exportConvertToUrl(strFile As String) As String
Declare Function docGetAgendaByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub OpenESEventBrief(docEventProfile As NotesDocument)
Declare Sub CreateAREventProfile(docESEventBrief As NotesDocument, docEventProfile As NotesDocument, intReturnCode As Integer)
Declare Sub SelectVenue(docEventProfile As NotesDocument)
Declare Function flgOKToExport(collDocsToExport As NotesDocumentCollection) As Boolean
Declare Function strBuildAmenityDiv(docEventProfile As NotesDocument, docLocaleProfile As NotesDocument, strCurrencySymbol As String, strAttendeeType As String, strAmountFieldName As String, strAmenityTypesFieldName As String) As String
Declare Function getRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Sub CreateTableFourColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Function strGetEmailType(intEmailType As Integer) As String
Declare Function flgIsDeleteAllowed(doc As NotesDocument, intReasonCode As Integer) As Integer
Declare Function replaceSubString(sourceStr As String, fromStr As String, toString As String) As String
Declare Function flgIsEmailEnabled(docEventProfile As NotesDocument, intEMailType As Integer) As Boolean
Declare Function parseRoleField(roleRecs) As String
Declare Sub GetCTEBA_Fields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Sub GetMIQuestionLocalization(intCurrQuestion, docEventProfile As NotesDocument, docMIQuestionSetLookup As NotesDocument, docCurr As NotesDocument, strScript As String)
Declare Sub CreateTableSevenColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub AddAgendaConfiguration(strLocale As String) 
Declare Sub SelectEmail(doc As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
Declare Sub CreateTableNineColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub GetBadgeFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Public Function getIsImportOnly As Boolean
Declare Sub CloseWebsite(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub GetEmergencyFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Function flgIsDuplicateInvitation(docInvitation As NotesDocument) As Boolean
Declare Sub LoadLocaleDefaults(doc As NotesDocument, strLocale As String)
Declare Sub DeleteDocument(strDocType As String)
Declare Function dbGetAttendeeRepositoryDb() As NotesDatabase
Declare Sub GetExportField(docCurr As NotesDocument, strPrefix As String, strFieldName As String, arrExportFields() As ExportField)
Declare Sub SetQTag(strQTagField As String, strQTagValue As String)
Declare Sub CreateTableFourColumnsSpanVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function strGetTemplateFieldByLocale(strLocale As String, strFieldName As String) As String
Declare Function docCreateRegTracksForDay(str_Day As String, strLocale As String, docEventProfile As NotesDocument) As NotesDocument
Declare Function flgIsDuplicateEnrollment(docEnrollment As NotesDocument) As Boolean
Declare Function strFormatAsCurrency(dblValueToConvert As Double, strCurrencySymbol As String, docLocaleProfile As NotesDocument) As String
Declare Function flgSendEmailDeprecated(docEventProfile As NotesDocument, doc As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator, flgSaveAfterSend As Boolean) As Boolean
Declare Sub LoadLandingPageDefaults(doc As NotesDocument, strLocale As String)
Declare Sub CreateTableOneColumn_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
Declare Sub CreateTableTenColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub CreateTableTenColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub LoadMIQuestion(intCurrQuestion As Integer, docEventProfile As NotesDocument, docMIQuestionSetLookup As NotesDocument, docDialog As NotesDocument)
Declare Sub GetEventFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Sub ExportEnrollments(docEventProfile As NotesDocument, collDocsToExport As NotesDocumentCollection)
Declare Sub ExportToExcel(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField)
Declare Function docAppendReport(docCombinedReport As NotesDocument, docReport As NotesDocument) As NotesDocument
Declare Sub AddSponsorsConfiguration(strLocale As String) 
Declare Sub StoreMiQuestion20(docAREventProfile As NotesDocument)
Declare Function docGetRoleMapping(strBrand As String) As NotesDocument
Declare Function getLocalization(strLocale As String , strFormName As String , docCurr As NotesDocument) 
Declare Sub DeleteEmailTemplate()
Declare Function docGetInviteeDocument(strKey As String)
Declare Function docGetEventProfileByEventID(strEventID As String) As NotesDocument
Declare Sub GetTacticList(docESEventBrief As NotesDocument, docEventProfile As NotesDocument)
Declare Sub GetAllFields(docEventProfile As NotesDocument, docCurr As NotesDocument, arrExportFields() As ExportField)
Declare Sub CopyEmailTemplate()
Declare Sub CreateTableThreeColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Sub DeleteInvitation()
Declare Sub ReactivateEvent()
Declare Sub ChangeResponseStatus(strNewStatus As String)
Declare Function docCopyAgenda(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
Declare Function flgIsEventMultiLingual(docEventProfile)As Boolean
Declare Sub PublishEvent(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub SendTestEMail(docEventProfile As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
Declare Sub PrintTemplateBadge(strBadgeText As String)
Declare Sub ChangeInvitationStatus(strNewStatus As String)
Declare Sub SendToQA(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub RefreshFromESBrief(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
Declare Sub CreateTableFiveColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Sub CreateTableFourColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub UpdateRevisionHistory(doc As NotesDocument, strMsg As String)
Declare Sub CreateTableFourColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
Declare Sub CreateTableFiveColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
Declare Sub CreateTableFiveColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub CreateTableFourColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Function strGetEmailPrefix(intEmailType As Integer) As String
Declare Sub CreateAdminRequest(intType As Integer)
Declare Sub GetOptionalQuestionFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
Declare Function strGetDefaultURL(docEventProfile) As String
Declare Sub PublishEventToAR(docEventProfile As NotesDocument, intReturnCode As Integer)
Declare Function strGetLocaleName(strLocale As String) As String
Declare Function flgGetInternetEmailAddrFromBluePages(objBluePages As BluePages, strCanonicalUserName As String, strInternetEmailAddress As String)
Declare Sub CreateTableFiveColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Sub CreateTableFourColumns(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
Declare Sub SendAdminEmails(strTask As String)
Declare Sub CreateTableFiveColumnsSpanVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
Declare Function strValidateLocale(docEventProfile As NotesDocument, strLocale As String) As String
Declare Function flgUpdateRegistrationDocuments(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
Declare Sub OpenPage(doc As NotesDocument, intPageType As Integer, intEnvironment As Integer, strLocale As String)
Declare Sub SetQTagText(strFieldLabel As String, strFieldName As String)
Declare Sub StoreMIQuestion(docMIQuestionSetLookup As NotesDocument, intQuestionNumber As Integer, docAREventProfile As NotesDocument)
Declare Sub exportToODF(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField)
Declare Sub UpdateAudit(doc As NotesDocument, strUserName As String, strMsg As String)
Declare Function flgCanEdit(doc As NotesDocument, strUserName As String) As Integer
Declare Function flgUpdateEventDocuments(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
Declare Sub ViewEmail(doc As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
Declare Function  exportContinueAfterFileCheck(strExportFilename As String) As Boolean
Declare Sub CreateTableOneColumnSpan(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
Declare Function docGetBadgeTemplateByName(strName As String) As NotesDocument
Declare Function flgUpdateInviteeDocument(docEventProfile As NotesDocument, docNomination As NotesDocument, dtNow As NotesDateTime, docInvitee As NotesDocument) As Boolean
Declare Function flgSendEmail(docEventProfile As NotesDocument, doc As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator, flgSaveAfterSend As Boolean) As Boolean
Declare Function setupAmenityDetails(docEventProfile As NotesDocument) As Boolean
Declare Sub OpenXPage(doc As NotesDocument, intPageType As Integer, intEnvironment As Integer, strLocale As String)
Declare Sub ExportToCSV(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField, strCharset As String)
Declare Function flgUpdateESBriefWebAddress(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
Declare Sub CopyFromDocument(docFrom As NotesDocument, strFromFieldName As String, docTo As NotesDocument, strToFieldName As String)
Declare Sub CreateTableThreeColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
Declare Sub GetCTEBAInfo(docEventProfile As NotesDocument, docCurr As NotesDocument)
Declare Function docGetESEventBrief(strEventID As String) As NotesDocument

'++LotusScript Development Environment:2:5:(Declarations):0:10

'Name the module
Const STR_MODULE_NAME = "Common Functions"

'Define global Notes variables
Dim g_dbCurr As NotesDatabase
Dim g_dbInviteeTool As NotesDatabase
Dim g_dbAmenity As NotesDatabase
Dim g_docDbProfile As NotesDocument
Dim g_strSystemName As String
Dim g_strUserName As String
Dim g_strCommonUserName As String
Dim g_flgIsOnServer As Boolean
Dim g_flgIsProduction As Boolean
Dim g_flgIsPreview As Boolean
Dim g_flgIsDbMultiLingual As Boolean
Dim g_strWebPath As String
Dim g_strSystemMode As String
Dim g_strEmailMode As String
Dim g_doc_regProfile As NotesDocument
Dim g_vwActiveEvents As NotesView

Dim g_en_roleIndex As Integer    ' array index holding contents of en_role

Dim g_dbAttendeeRepository As NotesDatabase
Dim g_dbEventBriefs As NotesDatabase
Dim g_dbReference As NotesDatabase
Dim g_dbAmenityPackage As NotesDatabase

'Define the maximum number of MI questions to process
Const INT_MAX_MI_QUESTIONS = 10

'Define errors
Const ERR_SYSTEM_ERROR = 1001

'Define type of Home portal update Add or Remove
Const INT_REMOVE = 0
Const INT_ADD = 1

'Define environments (Live or Preview/QA) for use with the dbGetHomeDb() and OpenPage() functions
Const INT_LIVE = 0
Const INT_PREVIEW = 1

'Define page types for with the OpenPage() function
Const INT_REGISTRATION_PAGE = 1
Const INT_AGENDA_PAGE = 2
Const INT_SPEAKERS_PAGE = 3
Const INT_SPONSORS_PAGE = 4
Const INT_NOMINATION_PAGE = 5
Const INT_MEETING_REQUEST_PAGE = 6
Const INT_OTHER_PAGE = 7
Const INT_ACCEPT_INVITATION_PAGE = 8
Const INT_DECLINE_INVITATION_PAGE = 9
Const INT_CONFIRM_DECLINE_PAGE = 10
Const INT_NO_INVITATION_FOUND_PAGE = 11

'Define return codes
Const INT_FOUND = 0
Const INT_NOT_FOUND = 1

Const INT_CREATED = 0
Const INT_NOT_CREATED = 1
Const INT_UPDATED = 2
Const INT_NOT_UPDATED = 3
Const INT_AR_LOOKUP_ERROR = 4
Const INT_NO_EVENT_BRIEF = 6
Const INT_EVENT_UPDATE_ERROR = 7
Const INT_REGISTRATIONS_UPDATE_ERROR = 8
Const INT_EXCLUDED = 9

Const INT_UNKNOWN_REASON = 99

'Define email types
Const INT_EMAIL_CONFIRMATION = 1
Const INT_EMAIL_REMINDER = 2
Const INT_EMAIL_THANK_YOU = 3
Const INT_EMAIL_CANCELLATION = 4
Const INT_EMAIL_INVITATION = 5
Const INT_EMAIL_POSTEVENT_ALLREG = 6
Const INT_EMAIL_POSTEVENT_ATTENDED = 7
Const INT_EMAIL_POSTEVENT_NOSHOW = 8

'Define document types that can be checked for whether deletion is allowed by flgIsDeleteAllowed()
Const STR_DOCTYPE_EMAIL_TEMPLATE = |E-mail Template|
Const STR_DOCTYPE_EVENT_PROFILE = |Event Profile|
Const STR_DOCTYPE_INVITATION = |Invitation|

'Define reason codes for flgIsDeleteAllowed()
Const INT_OK_TO_DELETE = 0
Const INT_DELETE_NOT_ALLOWED = 10
Const INT_NOT_IN_REQUIRED_ROLE = 20
Const INT_STILL_IN_USE = 30

'Define constant for use with Datatype() built-in function
Const INT_IS_STRING = 8
Const INT_IS_DYNAMIC_STRING_ARRAY = 8712

'Define types of admin request
Const INT_PROBLEM_REPORT = 1
Const INT_REQUEST_FOR_SETUP_ASSISTANCE = 2
Const INT_NEW_REQUIREMENT = 3

'Define types of export
Const INT_EXPORT_XLS = 1
Const INT_EXPORT_CSV = 2
Const INT_EXPORT_ODF = 3

'The ExportField type is used to store information about a field to export

'strType is the type of field - Currently only 'check' is supported
'strLabel is the column label that you would like for that field
'strExport is the name of the field to export

Type ExportField
	strType As String
	strLabel As String
	strExport As String
End Type

Dim supportedlanguages As Variant
Dim languagechoices() As String
Dim size As Integer
Dim lang As String
Dim code As String	
Dim strlstData List As String				
Dim count As Integer
Dim pos As Integer
Dim length As Integer
Dim strOther As String

Dim item As NotesItem
Dim str_tc As String
Dim str_label As String
Dim str_desc As String
Dim str_ts As String
Dim str_tLabel As String
Dim str_Day As String
Dim str_s As String
Dim s As Integer, sCtr As Integer
Dim str_Field As String


'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Set global variables that are used by other functions.  
	'
	'1.	Get a handle to this database.
	'2.	Check whether the database contains a Database Profile, and if it does whether
	'	debugging is to be enabled.  If so, enable debugging.
	'3.	Get the current user's abbreviated Notes name.
	'
    'Parameters
    '-----------------------
    'None.
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = "Initialize"
	
	Dim s As New NotesSession
	Dim nameCurr As NotesName
	Dim varResult As Variant
	Dim varLiveServers As Variant
	Dim varPreviewServers As Variant
	Dim strCurrServerName As String
	
	'Do not trap errors until we know we can log them
	On Error Resume Next
	
     'Try to get a handle to the current database
	Set g_dbCurr = s.CurrentDatabase
	
	'If unable to do so, show an error message and exit
	If (g_dbCurr Is Nothing) Then
		Error ERR_SYSTEM_ERROR, |Unable to obtain database handle.|	
		Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
		Goto lblExit
	End If	
	
    'Try to get the Database Profile
	Set g_docDbProfile = g_dbCurr.GetProfileDocument("fProfile")
	
	'If unable to do so, show an error message and exit
	If (g_docDbProfile Is Nothing) Then
		Error ERR_SYSTEM_ERROR, |Unable to find Database Profile.|
		Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
		Goto lblExit
	End If
	
    'Check whether debugging is to be enabled and if it is, enable debugging
	If Cstr(g_docDbProfile.dp_EnableDebug(0)) = "Yes" Then
		Call EnableDebug(|Debug Log|)
	End If
	
    'Log start of processing
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Now that we know that we have a Database Profile document, we can trap errors
	'and have them written to the debug log (if it has been enabled in the Database Profile)
	On Error Goto lblError
	
    'Get the system name
	g_strSystemName = Cstr(g_docDbProfile.dp_SystemName(0))
	Call Debug(STR_MODULE_NAME & |: System name is [| & g_strSystemName & |].|)	
	
	'Get the current user's name
	Set nameCurr = New NotesName(s.UserName)
	g_strUserName = nameCurr.Abbreviated
	g_strCommonUserName = nameCurr.Common
	
	Call Debug(STR_MODULE_NAME & |: Current user is [| & g_strUserName & |].|)
	
	'Check whether the script is running on a server 
	g_flgIsOnServer = s.IsOnServer
	
	If g_flgIsOnServer Then
		Call Debug(STR_MODULE_NAME & |: Script is running on a server.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Script is running locally.|)
	End If
	
	Call Debug(STR_MODULE_NAME & |: Current server is [| & g_dbCurr.Server & |].|)
	
	'Check whether running on a production server
	varLiveServers = g_docDbProfile.dp_LiveServers
	
	Dim nameServer As New NotesName(g_dbCurr.Server)
	strCurrServerName = nameServer.Abbreviated
	
	g_flgIsProduction = False
	Forall varServer In varLiveServers
		If (Cstr(varServer) = strCurrServerName) Then
			g_flgIsProduction = True
			Exit Forall
		End If
	End Forall
	
	If g_flgIsProduction Then
		Call Debug(STR_MODULE_NAME & |: Current server is a production server.|)
	Else
		'Check whether running on a preview server
		varPreviewServers = g_docDbProfile.dp_PreviewServers
		
		g_flgIsPreview = False
		Forall varServer In varPreviewServers
			If (Cstr(varServer) = strCurrServerName) Then
				g_flgIsPreview = True
				Exit Forall
			End If
		End Forall
		
		If g_flgIsPreview Then
			Call Debug(STR_MODULE_NAME & |: Current server is a preview server.|)
		Else
			Call Debug(STR_MODULE_NAME & |: Current server is not a production or preview server.|)
		End If		
	End If
	
    'Check whether multiple locales have been enabled for this canister
	If Cstr(g_docDbProfile.dp_IsMultiLingual(0)) = "Yes" Then
		g_flgIsDbMultiLingual = True
		Call Debug(STR_MODULE_NAME & |: This is a multi-language canister.|)
	Else
		g_flgIsDbMultiLingual = False
		Call Debug(STR_MODULE_NAME & |: This is a single language canister.|)		
	End If
	
	'Check whether e-mail of error logs is to be enabled and if it is, enable it
	If Cstr(g_docDbProfile.dp_EnableDebugEmail(0)) = "Yes" Then
		Call EnableDebugMail()
	End If 
	
	'Get the web path
	varResult = Evaluate(|@WebDbName|)
	g_strWebPath = |/| & varResult(0)
	
	Call Debug(STR_MODULE_NAME & |: Path to database is [| & g_strWebPath & |].|)
	
	'Get the system mode
	g_strSystemMode = Cstr(g_docDbProfile.dp_SystemMode(0))
	Call Debug(STR_MODULE_NAME & |: System mode is [| & g_strSystemMode & |].|)		
	
	'Get the e-mail mode
	g_strEmailMode = Cstr(g_docDbProfile.dp_EmailMode(0))
	Call Debug(STR_MODULE_NAME & |: E-mail mode is [| & g_strEmailMode & |].|)		
	
	'Check whether e-mail of error logs is to be enabled and if it is, enable it
	If Cstr(g_docDbProfile.dp_EnableDebugEmail(0)) = "Yes" Then
		Call Debug(STR_MODULE_NAME & |: Error reporting e-mails are enabled.|)				
		Call EnableDebugMail()
	Else
		Call Debug(STR_MODULE_NAME & |: Error reporting e-mails are disabled.|)			
	End If 
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:Terminate:1:10
Sub Terminate
	
End Sub


'++LotusScript Development Environment:2:2:CreateTableFiveColumnsSpan_Radio:6:8
%REM
	Sub CreateTableFiveColumnsSpan_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableFiveColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 5) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			str_HTML = str_HTML & Chr(13) & |</div>|
		End If
		
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:GetTrackFieldItemStr:5:8
%REM
	Function GetTrackFieldItemStr
	Description: Comments for Function
%END REM
Function GetTrackFieldItemStr(doc As NotesDocument, str_t As String, str_s As String, str_type As String) As String
	Dim item As NotesItem
	
	Const STR_MODULE_NAME = |GetTrackFieldItemStr|
	
	'Trap errors
	On Error GoTo lblError
	
	Set item = doc.GetFirstItem("rp_t" + str_t + "s" + str_s + str_type)
	
	If Not item Is Nothing Then
		If str_type = "label_HTML" And (g_doc_regProfile.rp_SessionDetails(0) = "Yes" Or g_doc_regProfile.rp_SessionDetails(0) = "") Then
			GetTrackFieldItemStr = |<a href="javascript:showDialog('| & Replace(item.Values(0), "'", "&#180;") & |')">[詳細情報]| & |</a>|		
		Else
			GetTrackFieldItemStr = item.Values(0)
		End If
	Else
		GetTrackFieldItemStr = ""
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Function

'++LotusScript Development Environment:2:1:flgDoVersionRedirect:1:8
Function flgDoVersionRedirect(docCurr As NotesDocument, strLocale As String, strFormName As String) As Boolean
	
	Const STR_MODULE_NAME = |flgDoVersionRedirect|
	
	Dim flgDoRedirect As Boolean
	Dim	strWebVersion As String
	Dim strURL As String		
	
     'Trap errors
	On Error Goto lblError
	
	flgDoRedirect = False
	
	Dim strCanisterID As String
	
	strCanisterID = Left$(Right$(g_strWebPath, 7), 3)
	
	Call Debug(STR_MODULE_NAME & |: Canister ID [| & strCanisterID & |].|)	
	
	'Redirect to the correct ibm.com version of the page based on the setting in the locale profile for the locale 
	'NOTE: Only redirect if this is not already the result of a redirect to avoid crazy looping.
	If (flgIsRedirect(docCurr.path_info(0)) = False) Then
		strWebVersion = strGetWebVersion(strLocale)
		If (strWebVersion <> |v15|) Then
			strURL = g_strWebPath & |/| & strWebVersion & |_| & strFormName & |?| & docCurr.Query_String(0)
			Call Debug(STR_MODULE_NAME & |: Event locale is a | & strWebVersion & | locale. Redirecting to [| & strURL & |]|)	
			docCurr.~$~$HTMLHEAD= |<script>window.location.href="| & strURL & |";</script>|
			flgDoRedirect = True
		Else
			Call Debug(STR_MODULE_NAME & |: Event locale is a v15 locale so no redirect is required.|)	
		End If
	Else
		Call Debug(STR_MODULE_NAME & |: Processing ibm.com version redirect.|)	
	End If
	
lblExit:
	
	flgDoVersionRedirect = flgDoRedirect
	
	Exit Function
	
lblError:
	
	flgDoRedirect = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgIsDuplicateLandingPage:1:8
Function flgIsDuplicateLandingPage(docLandingPageProfile As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a landing page profile, check whether one already exists with the same
	'name.
	'
     'Parameters
     '-----------------------
     'docLandingPageProfile		The landing page profile.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsDuplicateLandingPage|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupLandingPagesByName|
	
	Dim flgIsDuplicate As Boolean
	Dim view As NotesView	
	Dim docExisting As NotesDocument
	Dim strKey As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code (Assume not a duplicate until proved otherwise)
	flgIsDuplicate = False
	
	strKey = docLandingPageProfile.lp_name(0)
	
	Call Debug(STR_MODULE_NAME & |: Checking landing page profile [| & strKey & |].|)
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docExisting= view.GetDocumentByKey(strKey , True)
	
	'Check to see if  a page with this name already exists
	If docLandingPageProfile.IsNewNote And Not (docExisting Is Nothing) Then
		flgIsDuplicate = True
	End If
	
lblExit:
	
	flgIsDuplicateLandingPage = flgIsDuplicate
	
	If (flgIsDuplicate) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Existing landing page profile found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  New landing page profile.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgIsDuplicate = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgUpdateRegistrations:1:8
Function flgUpdateRegistrations(strEventID As String, flgRestrictAccess As Boolean, varRegistrationViewers As Variant) As Integer
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event ID, find all registrations associated with the event
	'and change their security options to match those supplied.
     '
     'Parameters
     '-----------------------
     'strEventID								The event ID.
	'flgRestrictAccess					A flag to indicate whether access is restricted or not.
	'varRegistrationViewers			An array of abbreviated Notes names of the 
	'											people that can  view registrations.
	'
     'Return Values
     '-----------------------
     'True if all registrations were updated successfully
	'False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateRegistrations|
	
	Const STR_LOOKUP_REGISTRATIONS = |vLookupRegistrationsByEventID_All|
	
	Dim flgOK As Integer
	Dim viewRegistrations As NotesView
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry
	Dim docRegistration As NotesDocument
	Dim strKey As String	
	Dim intCount As Integer
	Dim strCanisterID As String
	Dim strCanisterAdministratorsGroup As String
	Dim strEventAdministratorsGroup As String
	Dim strEventStaffGroup As String
	Dim strQAAdministratorsGroup As String
	Dim strRegistrationViewersGroup As String
	Dim strarrDocReaders() As String
	Dim strarrDocReadersAdditional() As String	
	Dim intCurrName As Integer
	Dim item As NotesItem
	Dim nameCurr As New NotesName("")
	Dim strGroupNamePrefix As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	Print |Applying updated security settings to registrations for this event...|	
	
     'Trap errors
	On Error Goto lblError
	
	'Assume that something will go wrong unless proved otherwise
	flgOK = False
	
	'Find the lookup views
	Set viewRegistrations = g_dbCurr.GetView(STR_LOOKUP_REGISTRATIONS)
	
	'Build a key from the supplied event ID
	strKey = strEventID
	
	'Get the canister ID from the profile
	strCanisterID = Cstr(g_docDbProfile.dp_canisterid(0))
	
	If (strCanisterID = "") Then
		Error ERR_SYSTEM_ERROR, |The canister ID has not been set in the database profile.  Please contact the system administrator.|	
	End If
	
	'Fix to allow for the original group names being prefixed with GEP and the later ones with GRP
	If (strCanisterID = "001" Or strCanisterID = "002" Or strCanisterID = "003") Then
		strGroupNamePrefix = |GEP|
	Else
		strGroupNamePrefix = |GRP|
	End If
	
	strCanisterAdministratorsGroup = strGroupNamePrefix & strCanisterID & |Canister Administrators|
	strEventAdministratorsGroup = strGroupNamePrefix & strCanisterID & |Event Administrators|
	strEventStaffGroup = strGroupNamePrefix & strCanisterID & |Event Staff|
	strQAAdministratorsGroup = strGroupNamePrefix & strCanisterID & |QA Administrators|
	strRegistrationViewersGroup = strGroupNamePrefix & strCanisterID & |Registration Viewers|
	
	'Setup the data to be stored in the authors and readers fields
	
	'For unrestricted access:
	'DocReaders = "[Developer]" : "[Admin]"
	'DocReadersAdditional =  "GEP <Canister ID> Canister Administrators" : "GEP <Canister ID> Event Administrators" : "GEP <Canister ID> Event Staff" : "GEP <Canister ID> QA Administrators" : "GEP <Canister ID> Registration Viewers"
	
	If (Not flgRestrictAccess) Then
		
		Redim strarrDocReaders(1)
		strarrDocReaders(0) = "[Developer]"
		strarrDocReaders(1) = "[Admin]"		
		
		Redim strarrDocReadersAdditional(4)
		strarrDocReadersAdditional(0) = strCanisterAdministratorsGroup		
		strarrDocReadersAdditional(1) = strEventAdministratorsGroup
		strarrDocReadersAdditional(2) = strEventStaffGroup
		strarrDocReadersAdditional(3) = strQAAdministratorsGroup
		strarrDocReadersAdditional(4) = strRegistrationViewersGroup
		
	'Otherwise, access is restricted
	'DocReaders = "[Developer]":"[Admin]"
	'DocReadersAdditional = List of names from the registrationViewer fields in the Event Information form
	'
	'NOTE: 	Always add the current user to the list so that you can't accidentally lock yourself out of documents.
	'
	'NOTE:	Reader names must be in either flat or canonical format for use in a Reader Names field
	'			so make sure all names are in canonical format.
	Else	
		
		Redim strarrDocReaders(1)
		strarrDocReaders(0) = "[Developer]"
		strarrDocReaders(1) = "[Admin]"	
		
		Redim strarrDocReadersAdditional(Ubound(varRegistrationViewers) + 1)
		intCurrName = 0
		Forall varName In varRegistrationViewers
			Set nameCurr = New NotesName(Cstr(varName))
			strarrDocReadersAdditional(intCurrName) = nameCurr.Canonical
			intCurrName = intCurrName + 1
		End Forall
		'Add the current user
		Set nameCurr = New NotesName(g_strUserName)		
		strarrDocReadersAdditional(intCurrName) = nameCurr.Canonical		
		
	End If
	
	Call Debug(STR_MODULE_NAME & |: DocReaders will be set to:|) 
	Call Debug(STR_MODULE_NAME & |: --- Start of list ---|)	
	Forall varName2 In strarrDocReaders()
		Call Debug(STR_MODULE_NAME & |: | & Cstr(varName2)) 
	End Forall
	Call Debug(STR_MODULE_NAME & |: --- End of list ---|)	
	
	Call Debug(STR_MODULE_NAME & |: DocReadersAdditional will be set to:|) 
	Call Debug(STR_MODULE_NAME & |: --- Start of list ---|)	
	Forall varName2 In strarrDocReadersAdditional()
		Call Debug(STR_MODULE_NAME & |: | & Cstr(varName2)) 
	End Forall
	Call Debug(STR_MODULE_NAME & |: --- End of list ---|)	
	
	'Attempt to find all registrations
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_REGISTRATIONS & |] for documents with key [| & strKey & |].|) 
	
	'Get a collection of all entries
	Set vc = viewRegistrations.GetAllEntriesByKey(strKey, True) 
	
	If (Not vc Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | registration(s)...|)
		
		Set entry = vc.GetFirstEntry()
		
		While Not(entry Is Nothing)
			
			'Get the associated document
			Set docRegistration = entry.Document
			
			Print |Updating registration | & Cstr(intCount + 1) & | of | & Cstr(vc.Count) & |...|	
			
			Call docRegistration.ReplaceItemValue("DocReaders", strarrDocReaders())
			Set item = docRegistration.GetFirstItem("DocReaders")
			item.IsReaders = True			
			
			Call docRegistration.ReplaceItemValue("DocReadersAdditional", strarrDocReadersAdditional())
			Set item = docRegistration.GetFirstItem("DocReadersAdditional")
			item.IsReaders = True		
			
			Call docRegistration.Save(True, False)
			
			'Update the count of registrations processed
			intCount = intCount + 1
			
			'Get the next registration
			Set entry = vc.GetNextEntry(entry)
			
		Wend
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No registrations were found.|)
		
	End If
	
	'All updated successfully so flag this
	flgOK = True
	
lblExit:
	
	Print |Finished.  | & Cstr(intCount) & | registration(s) updated.|
	
	'Set the return value
	If (flgOK) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  | & Cstr(intCount) & | registration(s) updated.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.|)
	End If
	
	flgUpdateRegistrations = flgOK
	
	Exit Function
	
lblError:
	
	'If an error is found, set the return code
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)		
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strGetInternetEmailAddress:1:8
Function strGetInternetEmailAddress(strUserName As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Get the current user's internet address.
	'
     'Parameters
     '-----------------------
     'strUserName			The abbreviated Notes name of the user.
     '     
     'Return Values
     '-----------------------
     'The current user's internet address.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetInternetEmailAddress|
	
	Dim varResult As Variant 
	Dim strResult As String
	
     'Trap errors
	On Error Goto lblError
	
	varResult = Evaluate(|@NameLookup([Exhaustive]; "| & strUserName & |";"InternetAddress");|)
	
	strResult = varResult(0)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Returning [| & strResult & |].|)
	
	strGetInternetEmailAddress = strResult
	
	Exit Function
	
lblError:
	
	strResult = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:TranslateLocaleSpecificInfo:1:8
Sub TranslateLocaleSpecificInfo(strLocale As String, docEnrollment As NotesDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an enrollment document and a locale, get the locale specific translations
	'of all translated fields.
	'
     'Parameters
     '-----------------------
	'strLocale				The locale
	'docEnrollment		The document
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |TranslateLocaleSpecificInfo|
	
	Dim docLocaleProfile As NotesDocument
	
	'Trap errors
	On Error Goto lblError
	
	'Get the locale profile from the reference database
	Set docLocaleProfile = docGetLocaleProfile(strLocale)
	
	'Now translate each field that needs translation
	docEnrollment.en_attendeetype_trans = strGetTranslation(docLocaleProfile, Cstr(docEnrollment.en_attendeetype(0)), |lc_AttendeeTypeValues|)
	docEnrollment.en_prefix_trans = strGetTranslation(docLocaleProfile, Cstr(docEnrollment.en_prefix(0)), |lc_PrefixValues|)	
	docEnrollment.en_country_trans = strGetTranslation(docLocaleProfile, Cstr(docEnrollment.en_country(0)), |lc_CountryValues|)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:dbGetAmenityPackageDb:1:8
Function dbGetAmenityPackageDb() As NotesDatabase
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Return a handle to the AmenityPackage database.  The location of the
	'database is defined in the Database Profile.
	'
	'Parameters
	'----------------
	'None.
	'
	'Return Values
	'-------------------
	'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetAmenityPackageDb|
	
	Dim s As New NotesSession	
	Dim dbAmenityPackage As New NotesDatabase("", "")
	Dim strAmenityPackageServer As String
	Dim strAmenityPackageFilename As String
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'If we already have a handle to the database, return it
	If (Not g_dbAmenityPackage Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: AmenityPackage database is available.|)
		Set dbAmenityPackage = g_dbAmenityPackage
	Else
		'Get a handle to the AmenityPackage database
		strAmenityPackageServer = CStr(g_docDbProfile.dp_AmenityServer(0))
		strAmenityPackageFilename = CStr(g_docDbProfile.dp_AmenityFilename(0))
		
		Call Debug(STR_MODULE_NAME & |: AmenityPackage server is [| & strAmenityPackageServer & |].|)	
		Call Debug(STR_MODULE_NAME & |: AmenityPackage filename is [| & strAmenityPackageFilename & |].|)
		
		On Error Resume Next
		
		Set dbAmenityPackage = s.GetDatabase(strAmenityPackageServer, strAmenityPackageFilename, False)
		
		On Error GoTo lblError		
		
		If (dbAmenityPackage Is Nothing) Then
			Call dbAmenityPackage.OpenWithFailover(strAmenityPackageServer, strAmenityPackageFilename)
			If dbAmenityPackage.IsOpen Then
				Call Debug(STR_MODULE_NAME & |: AmenityPackage database is available.|)
			Else
				Call Debug(STR_MODULE_NAME & |: Unable to find AmenityPackage database.|)	
			End If	
		Else
			Call Debug(STR_MODULE_NAME & |: AmenityPackage database is available.|)
		End If
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetAmenityPackageDb = dbAmenityPackage
	
	Exit Function
	
lblError:
	
	Set dbAmenityPackage = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:dbGetReferenceDb:1:8
Function dbGetReferenceDb() As NotesDatabase
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return a handle to the Reference database.  The location of the
	'database is defined in the Database Profile.
     '
     'Parameters
     '----------------
     'None.
	'
     'Return Values
     '-------------------
     'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetReferenceDb|
	
	Dim s As New NotesSession	
	Dim dbReference As New NotesDatabase("", "")
	Dim strReferenceReplicaID As String
	
     'Trap errors
	On Error Goto lblError
	
	'Only instantiate if not already done
	
	If g_dbReference Is Nothing Then
		'Get a handle to the Reference database
		strReferenceReplicaID = Cstr(g_docDbProfile.dp_ReferenceDbReplicaID_NoColon(0))
		Call Debug(STR_MODULE_NAME & |: Reference database replica ID is [| & strReferenceReplicaID & |].|)	
		
		On Error Resume Next
		If dbReference.OpenByReplicaID(g_dbCurr.Server, strReferenceReplicaID) Then
			Call Debug(STR_MODULE_NAME & |: Reference database is available.|)
		Else
			Set dbReference = s.GetDatabase("G01ACXDB601/01/A/IBMEXT", "events\wwe\asref.nsf", False)
			
			On Error Goto lblError		
			
			If (dbReference Is Nothing) Then
				Call dbReference.Open("G01ACXDB601/01/A/IBMEXT", "events\wwe\asref.nsf")
				If dbReference.IsOpen Then
					Call Debug(STR_MODULE_NAME & |: Reference database is available.|)
				Else
					Call Debug(STR_MODULE_NAME & |: Unable to find Reference database.|)	
				End If	
			Else
				Call Debug(STR_MODULE_NAME & |: Reference database is available.|)
			End If
		End If
		On Error Goto lblError
	Else
		'Already instatiated so, just return the existing handle
		Set dbReference = g_dbReference
		Call Debug(STR_MODULE_NAME & |: Reference database is already available.|)		
	End If
	
lblExit:
	
	'Set the return values
	Set dbGetReferenceDb = dbReference
	
	Exit Function
	
lblError:
	
	Set dbReference = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
	
End Function

'++LotusScript Development Environment:2:1:docGetCountryProfile:1:8
Function docGetCountryProfile(strCountryCode As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a country code, try to find the ISO country profile in the reference database 
	'with the supplied country code.
	'
	'Parameters
	'----------------
	'strCountryCode						The country code.
	'
	'Return Values
	'-------------------
	'If a country profile is found, it is returned.
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetCountryProfile|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupISOCountryProfiles|
	
	Dim view As NotesView
	Dim docCountryProfile As NotesDocument
	Dim strKey As String
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Looking for country profile with country code [| & strCountryCode & |]|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strCountryCode
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docCountryProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docCountryProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetCountryProfile = docCountryProfile
	
	Exit Function
	
lblError:
	
	Set docCountryProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableThreeColumnsSpanVer1_0:6:8
%REM
	Sub CreateTableThreeColumnsSpan
	Description: Version 1.0.
%END REM
Sub CreateTableThreeColumnsSpanVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_s = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_s = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |</div>|
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_s = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |</div>|
	
	' Close the section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableThreeColumnsSpanVer1_1:6:8
%REM
	Sub CreateTableThreeColumnsSpan
	Description: Version 1.1.
%END REM
Sub CreateTableThreeColumnsSpanVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 3) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>| & Chr(13)
			str_HTML = str_HTML & |</div>|
		End If
		
		%REM
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		' Close the 3 column track label section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		%END REM
	
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:NotifyQATeam:1:8
Sub NotifyQATeam(docEventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Check whether the supplied event is in active status, and if it is check who the
	'current user is.  If the current user is not a developer, send an e-mail to the
	'QA team to notify them that an active event was updated.
	'
	'NOTE:	This routine is designed to be called from the Postsave event of the
	'			event profile.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |NotifyQATeam|
	
	Dim docEmail As NotesDocument
	Dim rtitem As NotesRichTextItem
	Dim item As NotesItem
	Dim strRecipients As String	
	
	'Trap errors
	On Error Goto lblError
	
	If Not flgHasRole(|[Developer]|) Then
		
		Call Debug(STR_MODULE_NAME & |: Sending QA notification e-mail for event [| & docEventProfile.eventname(0) & |].|)
		
		'Send a notification
		Set docEmail = New NotesDocument(g_dbCurr)
		Set rtitem = New NotesRichTextItem(docEmail, "Body")
		
		Call rtitem.AppendText(|The following active event '| & docEventProfile.eventname(0) & |' has been updated by | & g_strUserName & |.|)
		Call rtitem.AddNewline(2)
		Call rtitem.AppendText(|Please QA review |)
		Call rtitem.AppendDocLink(docEventProfile, g_docDbProfile.dp_SystemName(0))
		
		'Send review e-mail
		If (g_strEmailMode = |Production|) Then
			docEmail.Subject = "GRP re-QA requested.  Active event updated - please re-QA: " + docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
			Call docEmail.Send(False, g_docDbProfile.dp_QAReviewersEmail)
			
			Call Debug(STR_MODULE_NAME & |: QA notification e-mail sent to:|)	
			Set item = g_docDbProfile.GetFirstItem("dp_QAReviewersEmail")		
			Forall varName In item.Values
				Call Debug(STR_MODULE_NAME & |: [| & Cstr(varName) & |]|)	
			End Forall			
			
		Else
			docEmail.Subject = |TEST MODE: GRP re-QA requested.  Active event updated - please re-QA: | & docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
			Call rtitem.AddNewline(2)		
			Call rtitem.AppendText(|This is a test e-mail.  Please ignore.|)
			Call rtitem.AddNewline(2)
			Call rtitem.AppendText(|In production mode the recipient(s) would have been:|)
			Call rtitem.AddNewline(2)	
			strRecipients = ||		
			Set item = g_docDbProfile.GetFirstItem("dp_QAReviewersEmail")	
			Forall varName In item.Values
				strRecipients = strRecipients & Cstr(varName) & Chr$(13)			
			End Forall
			Call rtitem.AppendText(strRecipients)
			Call rtitem.AddNewline(1)
			
			Call docEmail.Send(False, g_docDbProfile.dp_TestModeEmailAddress)
			
			Call Debug(STR_MODULE_NAME & |: TEST MODE: QA notification e-mail sent to:|)
			Set item = g_docDbProfile.GetFirstItem("dp_TestModeEmailAddress")		
			Forall varName In item.Values
				Call Debug(STR_MODULE_NAME & |: [| & Cstr(varName) & |]|)	
			End Forall		
			
		End If
	Else
		Call Debug(STR_MODULE_NAME & |: Current user is a developer.  QA notification e-mail NOT sent.|)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:dbGetHomeDb:1:8
Function dbGetHomeDb(intEnvironment As Integer) As NotesDatabase
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return a handle to the Home database in the specified environment.  The location of the
	'database is defined in the Database Profile.
     '
     'Parameters
     '----------------
     'intEnvironment				INT_LIVE				The live environment
	'									INT_PREVIEW		The Preview and QA environment
	'
     'Return Values
     '-------------------
     'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetHomeDb|
	
	Dim s As New NotesSession	
	Dim dbHome As New NotesDatabase("", "")
	Dim strHomeServer As String
	Dim strHomeFilename As String
	Dim strCurrServerName As String
	Dim varServers As Variant	
	Dim flgIsInList As Boolean
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Get the filename of the Home database in the specified environment
	Select Case intEnvironment
		
	Case INT_LIVE:
		Call Debug(STR_MODULE_NAME & |: Checking for database in the live environment.|)
		
		varServers = g_docDbProfile.dp_LiveServers
		strHomeFilename = Cstr(g_docDbProfile.dp_LiveHomeDbFilename(0))
		
	Case INT_PREVIEW:
		Call Debug(STR_MODULE_NAME & |: Checking for database in the preview and QA environment.|)		
		
		varServers = g_docDbProfile.dp_PreviewServers		
		strHomeFilename = Cstr(g_docDbProfile.dp_PreviewHomeDbFilename(0))
		
	Case Else
		Error ERR_SYSTEM_ERROR, |An unknown environment [| & Cstr(intEnvironment) & |] was supplied to the function.|	
		
	End Select
	
	Call Debug(STR_MODULE_NAME & |: Home filename is [| & strHomeFilename & |].|)
	
	'Try opening the database on each of the servers for the specified environment.
	
	'If the current server is in the specified environment, try it first
	Dim nameServer As New NotesName(g_dbCurr.Server)
	strCurrServerName = nameServer.Abbreviated
	
	flgIsInList = False
	Forall varServer In varServers
		If (Cstr(varServer) = strCurrServerName) Then
			flgIsInList = True
			Exit Forall
		End If
	End Forall
	
	If (flgIsInList) Then
		Call Debug(STR_MODULE_NAME & |: Checking current server [| & strCurrServerName & |].|)			
		On Error Resume Next	
		Set dbHome = s.GetDatabase(strCurrServerName, strHomeFilename, False)
		On Error Goto lblError	
		If (dbHome  Is Nothing) Then
			Call dbHome.Open(strCurrServerName, strHomeFilename)
			If dbHome.IsOpen Then
				Call Debug(STR_MODULE_NAME & |: Home database is available on this server.|)
				Goto lblExit
			Else
				Call Debug(STR_MODULE_NAME & |: Unable to find Home database on this server.|)	
			End If	
		Else
			Call Debug(STR_MODULE_NAME & |: Home database is available on this server.|)
			Goto lblExit
		End If
	End If
	
	'Either the database has not been found on the current server, or the current server is not in 
	'the specified environment, so start checking other servers
	
	Forall varServer In varServers
		'Don't re-try the current server
		If (Cstr(varServer) <> strCurrServerName) Then
			Call Debug(STR_MODULE_NAME & |: Checking server [| & Cstr(varServer) & |].|)			
			On Error Resume Next	
			Set dbHome = s.GetDatabase(Cstr(varServer), strHomeFilename, False)
			On Error Goto lblError	
			If (dbHome  Is Nothing) Then
				Call dbHome.Open(strCurrServerName, strHomeFilename)
				If dbHome.IsOpen Then
					Call Debug(STR_MODULE_NAME & |: Home database is available on this server.|)
					Goto lblExit
				Else
					Call Debug(STR_MODULE_NAME & |: Unable to find Home database on this server.|)	
				End If	
			Else
				Call Debug(STR_MODULE_NAME & |: Home database is available on this server.|)
				Goto lblExit
			End If
		End If
	End Forall
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetHomeDb = dbHome
	
	Exit Function
	
lblError:
	
	Set dbHome = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgIsRedirect:1:8
Function flgIsRedirect(strQueryString As String) As Boolean
	
	Dim flg As Boolean
	flg = False
	
	If (Instr(strQueryString,".nsf/v15_")>0) Then
		flg = True
	Elseif  (Instr(strQueryString,".nsf/v16_")>0) Then
		flg = True
	Elseif  (Instr(strQueryString,".nsf/v17_")>0) Then
		flg = True
	Else
		flg = False
	End If
	
	flgIsRedirect = flg
	
End Function

'++LotusScript Development Environment:2:2:setNumTracksOnDay:5:8
%REM
	Sub setNumTracksPerDay
	Description: Comments for Sub
%END REM
Sub setNumTracksOnDay(d As Integer, doc_RegTrackProfile As NotesDocument, doc_enrollForm As NotesDocument)
	
	Debug(STR_MODULE_NAME & |: Processing day | & CStr(d))
	Debug(STR_MODULE_NAME & |: rp_numTracksDay = | & doc_RegTrackProfile.rp_numTracksDay(0))
	Select Case doc_RegTrackProfile.rp_numTracksDay(0)
		Case "1"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
		Case "2"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
		Case "3"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
		Case "4"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
		Case "5"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
		Case "6"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
		Case "7"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
		Case "8"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
		Case "9"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "9")
		Case "10"
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "10")
	End Select
	
End Sub

'++LotusScript Development Environment:2:1:flgUpdateNomination:1:8
Function flgUpdateNomination(docNomination As NotesDocument, dtNow As NotesDateTime, flgEnableUI As Boolean) As Boolean
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a nomination document, update it with information from the corresponding
	'invitee document in the Invitee Tool.
	'
	'1. Lookup the corresponding invitee record in the invitee tool database
	'2. Copy the following fields from the invitee document to the nomination document
	'
	'in_goeDetermination
	'in_goeStatus
	'in_system
	'in_match
	'in_status
	'legal_name
	'legal_email
	'in_cclRequired
	'in_standardTemplate
	'in_template
	'in_signatureType
	'in_signatureTypeHard
	'in_signatureTypeSoft
	'in_cclAdds		
	'in_cclAddsList
	'
	'Parameters
	'-----------------------
	'docNomination			The nomination (in this context in Japan AST, it's actually the registration)
	'dtNow					The timestamp to add to the nomination to indicate when it was updated from the Invitee Tool
	'flgEnableUI			Whether to write messages to the status bar and show message boxes.				
	'	
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateNomination|
	
	Dim flgOK As Boolean
	Dim strEventID As String
	Dim strEmail As String
	Dim strKey As String
	Dim docInvitee As NotesDocument
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Set the return value
	flgOK = False
	
	'Build a key
	strEventID = docNomination.ep_id(0)	
	strEmail = docNomination.en_email(0)
	
	strKey = strEventID & strEmail
	
	Set docInvitee = docGetInviteeDocument(strKey)
	
	If (Not docInvitee Is Nothing) Then
		Call CopyToSame(docInvitee, |in_goeDetermination|, docNomination)	
		Call CopyToSame(docInvitee, |in_goeStatus|, docNomination)	
		Call CopyToSame(docInvitee, |in_system|, docNomination)	
		Call CopyToSame(docInvitee, |in_match|, docNomination)	
		Call CopyToSame(docInvitee, |in_status|, docNomination)	
		Call CopyToSame(docInvitee, |legal_name|, docNomination)	
		Call CopyToSame(docInvitee, |legal_email|, docNomination)	
		Call CopyToSame(docInvitee, |in_cclRequired|, docNomination)	
		Call CopyToSame(docInvitee, |in_standardTemplate|, docNomination)	
		Call CopyToSame(docInvitee, |in_template|, docNomination)	
		Call CopyToSame(docInvitee, |in_signatureType|, docNomination)	
		Call CopyToSame(docInvitee, |in_signatureTypeHard|, docNomination)	
		Call CopyToSame(docInvitee, |in_signatureTypeSoft|, docNomination)	
		Call CopyToSame(docInvitee, |in_cclAdds|, docNomination)
		Call CopyToSame(docInvitee, |in_cclAddsList|, docNomination)		
		Call CopyToSame(docInvitee, |in_level|, docNomination)		
		Call CopyToSame(docInvitee, |in_comments|, docNomination)
		'Added SMH 7/23/15 for Approved Brief Level
		Call CopyToSame(docInvitee, |GOE_flag|, docNomination)	
		'Added SMH 2/8/2017 for Return for Changes 	
		'Call CopyToSame(docInvitee, |LegalReturnedID|, docNomination)									
		Set docNomination.DateUpdatedFromInviteeTool = dtNow		
		'Save the document
		Call docNomination.Save(True, False)
		flgOK = True
	Else
		Error ERR_SYSTEM_ERROR, |Unable to update nomination for e-mail [| & strEmail & |]. Unable to find invitee record in invitee tool.|
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)		
	
	flgUpdateNomination = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False
	If (flgEnableUI) Then
		Print Err() & |: | & Error() & | in line | & Erl
	End If	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strFormatDate:1:8
Function strFormatDate(strMonth As String, strDay As String, strYear As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a month, day and year, retunr a string of the format mm/dd/yyyy.
	'
     'Parameters
     '-----------------------
     'strMonth				The month (Assumed to be a valid value)
     'strDay					The day (Assumed to be a valid value)
     'strYear					The year (Assumed to be a valid value)	
     '     
     'Return Values
     '-----------------------
     'The formatted date.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strFormatDate|
	
	Dim strOutput As String
	
	'Trap errors
	On Error Goto lblError
	
	strOutput = strPrefixWithZero(strMonth) & |/| & strPrefixWithZero(strDay) & |/| & strPrefixWithZero(strYear)
	
lblExit:
	
	strFormatDate = strOutput
	
	Exit Function
	
lblError:
	
	strOutput = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:1:docGetLocaleProfile:1:8
Function docGetLocaleProfile(strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Given a locale, try to find the locale profile in the reference database for the
	'specified locale.
    '
    'Parameters
    '----------------
	'strLocale						The locale
	'
    'Return Values
    '-------------------
    'If a locale profile is found, it is returned.
	'Otherwise Nothing is returned.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetLocaleProfile|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupLocaleProfiles|
	
	Dim view As NotesView
	Dim docLocaleProfile As NotesDocument
	Dim strKey As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Looking for locale profile for locale [| & strLocale & |]|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strLocale
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docLocaleProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docLocaleProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetLocaleProfile = docLocaleProfile
	
	Exit Function
	
lblError:
	
	Set docLocaleProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docGetInvitationByKey:1:8
Function docGetInvitationByKey(strEventID As String, strInvID As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID and an invitation ID, check whether an invitation in 'Invited' status
	'exists in this database for the specified event ID and invitation ID.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'strEventID				The event ID to check.
	'strInvID					The invitation ID to check.
	'
     'Return Values
     '-------------------
     'If an invitation exists for the event ID and invitation ID the invitation is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetInvitationByKey|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupInvitationsByKey|
	
	Dim view As NotesView
	Dim docInvitation As NotesDocument
	Dim strarrKey(1) As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strarrKey(0) = strEventID
	strarrKey(1) = strInvID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for invitation.  Event ID [| & strarrKey(0) & |] invitation ID [| & strarrKey(1) & |].|) 
	
	Set docInvitation = view.GetDocumentByKey(strarrKey, True)
	
	If (Not docInvitation Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetInvitationByKey = docInvitation
	
	Exit Function
	
lblError:
	
	Set docInvitation = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetEventSolutionFields:1:8
Sub GetEventSolutionFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'Copy fields from the supplied Event Solution Brief into the supplied Event Profile.
	'
    'Parameters
    '-----------------------
    'None.
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetEventSolutionFields|
	
	Dim item As NotesItem
	Dim strEventName As String, strEventID As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
    'Trap errors
	On Error Goto lblError
	
	'Format the event name by removing any newlines
	strEventName = strRemoveNewlines(Cstr(docESEventBrief.eventname(0)))
	strEventID = docESEventBrief.referenceid(0)
	
	docEventProfile.eventname = strEventName
	
	'Copy event IDs
	docEventProfile.ep_id = docESEventBrief.referenceid(0)
	
	'Copy event abstract
	docEventProfile.offeringDescription = docESEventBrief.eventsummary(0)
	
	'Copy Virtual Event flag field needed for advanced tab and virtual event tab
	docEventProfile.virtualevent = docESEventBrief.virtualevent(0)
	
	If docESEventBrief.virtualevent(0) = "virtualevent" Then
		docEventProfile.ep_IsON24 = "Yes"
	End If
	
	'Copy fields needed for Web to CRM process
	If docESEventBrief.HasItem("BATTacticname") Then
		docEventProfile.BATTacticname = docESEventBrief.BATTacticname(0)
	End If
	
	'If there is a surround_values item, copy it
	Set item = docESEventBrief.GetFirstItem("tactics_credited_multi")	
	If Not (item Is Nothing) Then 
		docEventProfile.surround_values = docESEventBrief.tactics_credited_multi
	Else
		docEventProfile.surround_values = ""
	End If
	
	'Get the framework fields
	docEventProfile.Frame_Program = docESEventBrief.Frame_Program(0)
	docEventProfile.Frame_SubTheme = docESEventBrief.Frame_SubTheme(0)
	docEventProfile.Frame_Program_Other = docESEventBrief.Frame_Program_Other(0)
	docEventProfile.Frame_Tier = docESEventBrief.Frame_Tier
	
	'Copy the event dates
	docEventProfile.startmonth = strPrefixWithZero(Cstr(docESEventBrief.startmonth(0)))
	docEventProfile.startday = strPrefixWithZero(Cstr(docESEventBrief.startday(0)))
	docEventProfile.startyear = Cstr(docESEventBrief.startyear(0))
	docEventProfile.ep_StartDate = strFormatDate(Cstr(docEventProfile.startmonth(0)), Cstr(docEventProfile.startday(0)), Cstr(docEventProfile.startyear(0)))
	
	docEventProfile.endmonth = strPrefixWithZero(Cstr(docESEventBrief.endmonth(0)))
	docEventProfile.endday = strPrefixWithZero(Cstr(docESEventBrief.endday(0)))
	docEventProfile.endyear = Cstr(docESEventBrief.endyear(0))
	docEventProfile.ep_EndDate = strFormatDate(Cstr(docEventProfile.endmonth(0)), Cstr(docEventProfile.endday(0)), Cstr(docEventProfile.endyear(0)))
	
	docEventProfile.quarter = docESEventBrief.quarter
	docEventProfile.length = docESEventBrief.length
	
	'Copy additional reporting fields
	docEventProfile.sponsor_bu_pri = docESEventBrief.sponsor_bu_pri(0) 
	docEventProfile.Industry = docESEventBrief.Industry	
	docEventProfile.tactic = docESEventBrief.tactic(0)	
	docEventProfile.es_brand = docESEventBrief.sector(0)
	docEventProfile.es_region = docESEventBrief.l_region(0)
	docEventProfile.geo = docESEventBrief.l_geo(0)
	docEventProfile.eventtype = docESEventBrief.eventtype(0)
	docEventProfile.eventsubtype = docESEventBrief.eventsubtype(0)	
	docEventProfile.eventcategory = docESEventBrief.eventcategory(0)
	docEventProfile.l_international = docESEventBrief.l_international
	docEventProfile.attpri = docESEventBrief.attpri
	docEventProfile.m_priobj = docESEventBrief.m_priobj
	docEventProfile.r_numattendees = docESEventBrief.r_numattendees
	
	'Copy event contact information
	If (docESEventBrief.HasItem(|o_pnotesid|)) Then
		If docESEventBrief.o_pnotesid(0) <> "" Then
			docEventProfile.offeringQuestionsName = docESEventBrief.o_pnotesid(0)
		Else
			docEventProfile.offeringQuestionsName = docESEventBrief.o_ownernotesid(0)
		End If		
	Else
		docEventProfile.offeringQuestionsName = docESEventBrief.o_ownernotesid(0)
	End If
	
	If (docESEventBrief.HasItem(|o_pemail|)) Then
		If docESEventBrief.o_pemail(0) <> "" Then
			docEventProfile.offeringQuestionsMail = docESEventBrief.o_pemail(0)
		Else
			docEventProfile.offeringQuestionsMail = docESEventBrief.o_owneremail(0)
		End If		
	Else
		docEventProfile.offeringQuestionsMail = docESEventBrief.o_owneremail(0)
	End If
	
	'Copy venue information
	
	'Updated 11/7/2008 by TV to support changes to Event Solution
	'The original Event Solution fields l_city, l_state and l_country have been replaced in the latest version
	'with l_vcity, l_vstate and l_vcountry
	
	If (docESEventBrief.HasItem(|l_vname|)) Then
		docEventProfile.loc_conffacility = docESEventBrief.l_vname(0)
	Else
		docEventProfile.loc_conffacility = ||
	End If
	
	'Check whether the new ES field is available 
	If (docESEventBrief.HasItem(|l_vcity|)) Then
		docEventProfile.loc_confcity = docESEventBrief.l_vcity(0)
		'Updated 8/3/2009 by TV to store the ES venue city in a non-editable field (so it can be shown in the reporting database)
		docEventProfile.es_city = docESEventBrief.l_vcity(0)
	Else
		docEventProfile.loc_confcity = docESEventBrief.l_city(0)
		'Updated 8/3/2009 by TV to store the ES venue city in a non-editable field (so it can be shown in the reporting database)		
		docEventProfile.es_city = docESEventBrief.l_city(0)		
	End If
	'Check whether the new ES field is available 		
	If (docESEventBrief.HasItem(|l_vstate|)) Then
		docEventProfile.loc_confstate = docESEventBrief.l_vstate(0)
	Else
		docEventProfile.loc_confstate = docESEventBrief.l_state(0)
	End If
	
	If (docESEventBrief.HasItem(|l_vstreet|)) Then
		docEventProfile.loc_confstreet = docESEventBrief.l_vstreet(0)
	Else
		docEventProfile.loc_confstreet = ||
	End If
	
	If (docESEventBrief.HasItem(|l_vzip|)) Then
		docEventProfile.loc_confzip = docESEventBrief.l_vzip(0)
	Else
		docEventProfile.loc_confzip = ||
	End If
	
	'Check whether the new ES field is available 		
	If (docESEventBrief.HasItem(|l_vcountry|)) Then
		docEventProfile.loc_confcountry = docESEventBrief.l_vcountry(0)		
		docEventProfile.es_country = docESEventBrief.l_vcountry(0)			
	Else
		docEventProfile.loc_confcountry = docESEventBrief.l_country(0)		
		docEventProfile.es_country = docESEventBrief.l_country(0)	
	End If
	
	'New field countrycode added 5/27/09 by TV
	If (docESEventBrief.HasItem(|countrycode|)) Then
		docEventProfile.countrycode = docESEventBrief.countrycode(0)
	Else
		Error ERR_SYSTEM_ERROR, |No countrycode field in event with event ID [| & strEventID & |].|
	End If
	
	'New field ep_brief added for China project on 10/08/2013 by AJ
	'Used to determine whether we need to check registrations against the Invitee Tool
	If (docESEventBrief.HasItem(|EP_brief|)) Then
		docEventProfile.ep_brief = docESEventBrief.EP_brief(0)
	Else
		docEventProfile.ep_brief = ||
	End If
	
	'AJ 07/22/2015 X1 project, new field in EST
	If (docESEventBrief.HasItem(|PLANMGMTAPPLCD|)) Then
		docEventProfile.PLANMGMTAPPLCD = docESEventBrief.PLANMGMTAPPLCD(0)
	Else
		docEventProfile.PLANMGMTAPPLCD = ||
	End If
	
	'AJ 09/25/2015 new field to determine GRP web searchability
	If (docESEventBrief.HasItem(|attposteventext|)) Then
		docEventProfile.attposteventext = docESEventBrief.attposteventext(0)
	Else
		docEventProfile.attposteventext = ||
	End If
	
	'AJ 12/05/2016 - Added for pre and post admin emails
	If docESEventBrief.HasItem(|a1email|) Then
		docEventProfile.a1email = docESEventBrief.a1email
	Else
		docEventProfile.a1email = ||
	End If
	
	'DH 03/29/2017 - Added for integrating the Nominations Tool with GRP
	If docESEventBrief.HasItem(|cteba_nominations|) Then
		Call docEventProfile.ReplaceItemValue("ep_cteba_nominations", docESEventBrief.cteba_nominations(0))
	Else
		Call docEventProfile.ReplaceItemValue("ep_cteba_nominations", "")
	End If
	
	'AJ 05/25/017 - update virtual event fields
	If docESEventBrief.EventType(0) = "Webcast" Then
		If (docESEventBrief.HasItem(|vendor|)) Then
			docEventProfile.ep_VirtualVendor = docESEventBrief.vendor(0)
		Else
			docEventProfile.ep_VirtualVendor = ||
		End If
		
		If (docESEventBrief.HasItem(|EventWebAddr|)) Then
			docEventProfile.ep_VendorShowURL = docESEventBrief.EventWebAddr(0)
		Else
			docEventProfile.ep_VendorShowURL = ||
		End If
		
		If (docESEventBrief.HasItem(|vendor_eventid|)) Then
			docEventProfile.ep_VendorEventID = docESEventBrief.vendor_eventid(0)
		Else
			docEventProfile.ep_VendorEventID = ||
		End If
		
		If (docESEventBrief.HasItem(|vendor_eventsubid|)) Then
			docEventProfile.ep_VendorEventSubID = docESEventBrief.vendor_eventsubid(0)
		Else
			docEventProfile.ep_VendorEventSubID = ||
		End If
		
	End If
	
	'Also get the tactic list for this event
	Call GetTacticList(docESEventBrief, docEventProfile)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTML:5:8
%REM
	Sub CreateSessionSectionHTMLTest
	Description: Version 2.0.
%END REM
Sub CreateSessionSectionHTML(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTML|
	
	'Trap errors
	On Error Goto lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim richStyle As NotesRichTextStyle
	Dim session As New NotesSession
	Dim str_HTML As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	
	Set richStyle = session.CreateRichTextStyle
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	
	If txt_SessionHTML Is Nothing Then
		Goto lblExit
	End If
	
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		Goto lblExit
	End If
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Goto lblExit
	End If
	
	' Section header
	str_HTML = |
<div class="ibm-container">
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>
</div>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To Cint(g_doc_regProfile.rp_numdays(0))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + Cstr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & Cstr(d) & |.|)
			Goto lblExit
		End If
		
		'If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
		'	str_HTML = str_HTML & |
		'<div class="ibm-container"> 
		'<h2>| & str_Day & | | & CStr(d) & |</h2>
		'</div>| & Chr(13)
		'End If
		
		'str_HTML = str_HTML & |
		'<div class="ibm-container ibm-alternate-two">|
		str_HTML = str_HTML & |
<div class="ibm-container">|
		
		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
			str_HTML = str_HTML & |
<h2>| & str_Day & | | & Cstr(d) & |</h2>| & Chr(13)
		End If
		
		Select Case doc_RegTrackProfile.rp_numTracksDay(0)
		Case "1"
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				Call CreateTableOneColumn_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
		Case "2"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableTwoColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableTwoColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s), "388", "left")
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
		Case "3"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
		Case "4"
			'Call CreateTableFourColumns(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
		Case "5"
			'Call CreateTableFiveColumns(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
		Case "6"
			Call CreateTableSixColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
		Case "7"
			Call CreateTableSevenColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
		Case "8"
			Call CreateTableEightColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
	End Select
		
		str_HTML = str_HTML & |</div>| & Chr(13) & Chr(13)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:1:strPrefixWithZero:1:8
Function strPrefixWithZero(strInput As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'If the supplied string has only one character, prefix it with a "0".
	'
     'Parameters
     '-----------------------
     'strInput				The input string.
     '     
     'Return Values
     '-----------------------
     'The input string prefixed with a "0" if necessary.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strPrefixWithZero|
	
	Dim strOutput As String
	
	'Trap errors
	On Error Goto lblError
	
	If (Len(strInput) = 1) Then
		strOutput = "0" & strInput
	Else
		strOutput = strInput
	End If
	
lblExit:
	
	strPrefixWithZero = strOutput
	
	Exit Function
	
lblError:
	
	strOutput = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:1:collGetRegProfilesByEventID:1:8
Function collGetRegProfilesByEventID(docEventProfile As NotesDocument) As NotesDocumentCollection
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile , check whether a registration profile exists for the
	'event.
     '
     'Parameters
     '----------------
     'docEventProfile				The event profile to check.
	'
     'Return Value
     '-------------------
     'Returns a collection of Notes Documents (Reg profiles) that could be empty
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |collGetRegProfilesByEventID|
	
	Dim view As NotesView	
	Dim strKey As String
	Dim dc As NotesDocumentCollection
	
     'Trap errors
	On Error Goto lblError
	
	Set view = g_dbCurr.GetView(|vLookupRegistrationProfilesByID|)
	
	strKey = docEventProfile.ep_id(0)
	
	Call Debug(STR_MODULE_NAME & |: Checking registration profiles for event ID [| & strKey & |].|)
	
	Set dc = view.GetAllDocumentsByKey(strKey, True)
	
lblExit:
	
	Set collGetRegProfilesByEventID = dc
	
	Exit Function
	
lblError:
	
	Set dc = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:1:InitMergeGenerator:1:8
Function InitMergeGenerator(db As NotesDatabase, flgOnServer As Boolean, str_MGType As String) As MergeGenerator
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'Initialize a merge generator for use when building/sending e-mails.
	'
    'Parameters
    '-----------------------
    'db						The database to use
	'flgOnServer			Whether to create e-mails on the server or not.
    '     
    'Return Values
    '-----------------------
    'An initialized merge generator.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |InitMergeGenerator|
	
	'Trap errors
	On Error Goto lblError
	
	'Instantiate the reference database and view
	Set g_DbReference = dbGetReferenceDb()
	
	'Create new object to merge text with
	Dim myMerger As New MergeGenerator(str_MGType, g_DbReference)
	
	'Set the locale to the default
	myMerger.currLocale = ||
	
	'Load field list from reference database
	' 28 Oct 2010, David Holbrook: This is currently being done in the Merge Generator.New() method
	'Call myMerger.LoadFieldListFromReferenceDb(g_dbCurr, g_DbReference)
	
	myMerger.isCreatedOnServer = flgOnServer
	
lblExit:
	
	Set InitMergeGenerator = myMerger
	
	Exit Function
	
lblError:
	
	Set myMerger = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strGetWebVersion:1:8
Function strGetWebVersion(strLocale As String) As String
	
	Const STR_MODULE_NAME = |strGetWebVersion|
	
	Dim strWebVersion As String
	Dim docLocaleProfile As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	'Set the default version
	strWebVersion = |v16|
	
	Set docLocaleProfile = docGetLocaleProfile(strLocale)
	
	If (Not docLocaleProfile Is Nothing) Then
		strWebVersion = docLocaleProfile.lc_WebVersion(0)
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Locale [| & strLocale & |] uses ibm.com [| & strWebVersion & |]. |) 
	
	strGetWebVersion = strWebVersion
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docCreateRegistrationProfile:1:8
Function docCreateRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Create a new  registration profile for the specified locale.
     '
     'Parameters
     '-----------------------	
	'docEventProfile				The event profile that the registration profile will be associated with.
	'strLocale						The locale of the registration profile to create.
     '     
     'Return Values
     '-----------------------
     'The newly created registration profile or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCreateRegistrationProfile|
	
	Dim docRegistrationProfile As NotesDocument
	Dim strLocaleName As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	strLocaleName = strGetLocaleName(strLocale)
	
	Print |Creating | & strLocaleName & | registration profile for the '| & docEventProfile.eventname(0) & |' event...|
	
	Set docRegistrationProfile = g_dbCurr.CreateDocument
	
	docRegistrationProfile.form = "fRegistrationProfile"	
	docRegistrationProfile.ep_id = docEventProfile.ep_id(0)
	docRegistrationProfile.ep_UNID = docEventProfile.UniversalID
	docRegistrationProfile.ep_EventTitle = docEventProfile.eventname(0)		
	docRegistrationProfile.eventname = docEventProfile.eventname(0)
	docRegistrationProfile.startmonth = docEventProfile.startmonth(0)
	docRegistrationProfile.startday = docEventProfile.startday(0)
	docRegistrationProfile.startyear = docEventProfile.startyear(0)
	docRegistrationProfile.city = docEventProfile.loc_confcity(0)
	docRegistrationProfile.country = docEventProfile.loc_confcountry(0)
	docRegistrationProfile.geo = docEventProfile.geo(0)
	docRegistrationProfile.status = docEventProfile.status(0)
	docRegistrationProfile.Locale = strLocale
	docRegistrationProfile.LocaleName = strLocaleName	
	
	Call docRegistrationProfile.ComputeWithForm(True, True)
	
	Print |Registration profile created.|
	
lblExit:
	
	Set docCreateRegistrationProfile = docRegistrationProfile	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docRegistrationProfile = Nothing
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:2:CreateTableVer1_4:6:8
%REM
	Sub CreateTableVer1_4
	Description: Comments for Sub
%END REM
Sub CreateTableVer1_4(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
	
	Const STR_MODULE_NAME = |CreateTableVer1_4|
	
	'Trap errors
	On Error GoTo lblError
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_labelOverlay As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	Dim str_FieldName As String
	Dim str_t As String, str_s As String
	Dim x As Integer, y As Integer
	Dim bol_createSecondTable As Boolean
	Dim str_FieldType As String
	
	If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
		str_FieldType = "radio"
	Else
		str_FieldType = "checkbox"
	End If
	
	str_HTML = str_HTML & |<table data-widget="datatable| + str_d + |" data-scrollaxis="x" class="ibm-data-table" cellspacing="0" cellpadding="0" border="0" summary="Day| & str_d + |_CreateTableVer1_3">| & Chr(13)
	
	Set item = g_doc_regProfile.GetFirstItem("rp_Day" + str_d + "Header")
	If Not(item Is Nothing) Then
		str_Day = item.Values(0)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & |</caption>| & Chr(13)
	Else
		If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & | | & str_d & |</caption>| & Chr(13)
	End If
	
	bol_createSecondTable = False
	If CInt(doc_RegTrackProfile.rp_numTracksDay(0)) > 5 Then
		bol_createSecondTable = True
	End If
	
	'Create table headers to label each track (or think of it as a column) first
	str_HTML = str_HTML & |<thead>| & Chr(13)
	str_HTML = str_HTML & |<tr>| & Chr(13)
	For x = 1 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
		
		str_t = CStr(x)
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |<th scope="col">| & str_tLabel & |</th>| & Chr(13)
		
		If x = 6 Then Exit For
	Next
	str_HTML = str_HTML & |</tr>| & Chr(13)
	str_HTML = str_HTML & |</thead>| & Chr(13)
	
	'Next fill the table with each session
	str_HTML = str_HTML & |<tbody>| & Chr(13)
	For x = 1 To CInt(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_s = CStr(x)
		
		str_HTML = str_HTML & |<tr>| & Chr(13)
		
		For y = 1 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
			
			str_t = CStr(y)
			
			str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
			str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
			If str_label <> "" Then str_label = str_label & |<br />|
			str_labelOverlay = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label_HTML")
			If GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts") <> || Then
				str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts") & |<br />|
			Else
				str_ts = ||
			End If			
			str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
			
			str_HTML = str_HTML & |<td>|
			
			'str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tcS|
			str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
			If str_FieldType = "checkbox" Then
				str_FieldName = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
			Else
				str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
			End If
			
			If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
				str_HTML = str_HTML & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
			Else
				'str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
				'str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
				'Chr(13) & |<br />| & _
				'str_ts & Chr(13) & |<br /><br />| & _
				'str_desc
				str_HTML = str_HTML & |<input type="| & str_FieldType & |" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
				str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" class="ibm-styled-| & _
				str_FieldType & |" /><label for="| & str_Field & |">| & str_label & _
				str_ts & | | & str_labelOverlay & |</label>| & _
				str_desc
			End If
			
			str_HTML = str_HTML & |</td>| & Chr(13)
			
			If y = 6 Then Exit For
		Next
		
		str_HTML = str_HTML & |</tr>| & Chr(13)
		
	Next	
	
	' Close the table
	str_HTML = str_HTML & |</tbody>| & Chr(13)
	str_HTML = str_HTML + |</table>| & Chr(13) & Chr(13)
	
	If bol_createSecondTable = True Then
		
		str_HTML = str_HTML & Chr(13) & |<table data-widget="datatable| + str_d + |" data-scrollaxis="x" class="ibm-data-table" cellspacing="0" cellpadding="0" border="0" summary="Day| & str_d + |_CreateTableVer1_3">| & Chr(13)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & | | & str_d & |</caption>| & Chr(13)
		
		'Create table headers to label each track (or think of it as a column) first
		str_HTML = str_HTML & |<thead>| & Chr(13)
		str_HTML = str_HTML & |<tr>| & Chr(13)
		For x = 7 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
			
			str_t = CStr(x)
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |<th scope="col">| & str_tLabel & |</th>| & Chr(13)
			
		Next
		str_HTML = str_HTML & |</tr>| & Chr(13)
		str_HTML = str_HTML & |</thead>| & Chr(13)
		
		'Next fill the table with each session
		str_HTML = str_HTML & |<tbody>| & Chr(13)
		For x = 1 To CInt(doc_RegTrackProfile.rp_numSessionsDay(0))
			
			str_s = CStr(x)
			
			str_HTML = str_HTML & |<tr>| & Chr(13)
			
			For y = 7 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
				
				str_t = CStr(y)
				
				str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
				str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
				If str_label <> "" Then str_label = str_label & |<br />|
				str_labelOverlay = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label_HTML")
				str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts")
				str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
				
				str_HTML = str_HTML & |<td>|
				
				'str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tcS|
				str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
				If str_FieldType = "checkbox" Then
					str_FieldName = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
				Else
					str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
				End If
				
				If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
					str_HTML = str_HTML & str_label & _
					Chr(13) & |<br />| & _
					str_ts & Chr(13) & |<br /><br />| & _
					str_desc
				Else
					'str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
					'str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
					'Chr(13) & |<br />| & _
					'str_ts & Chr(13) & |<br /><br />| & _
					'str_desc
					str_HTML = str_HTML & |<input type="| & str_FieldType & |" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
					str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" class="ibm-styled-| & _
					str_FieldType & |" /><label for="| & str_Field & |">| & str_label & _
					str_ts & | | & str_labelOverlay & |</label>| & _
					str_desc
				End If
				
				str_HTML = str_HTML & |</td>| & Chr(13)
				
			Next
			
			str_HTML = str_HTML & |</tr>| & Chr(13)
			
		Next	
		
		' Close the table
		str_HTML = str_HTML & |</tbody>| & Chr(13)
		str_HTML = str_HTML + |</table>| & Chr(13) & Chr(13)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:GetAttendeeFields:1:8
Sub GetAttendeeFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetAttendeeFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |ai|, |regid|, arrExportFields())  	' 2010.09.01, Regid, "iordnum", RWS
	Call GetExportField(docCurr, |ai|, |referer|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |localename|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |status|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |attendeetype_trans|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |prefix|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |en_persontitle|, arrExportFields())  ' en_persontitle
	Call GetExportField(docCurr, |ai|, |first|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |middle|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |last|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |en_pronunciation|, arrExportFields())	' en_pronunciation
	Call GetExportField(docCurr, |ai|, |title|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |email|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |phone|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |fax|, arrExportFields())	
	Call GetExportField(docCurr, |ai|, |followup|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |dateRegistered|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |role|, arrExportFields())  ' en_role
	Call GetExportField(docCurr, |ai|, |goe|, arrExportFields())  ' en_goe
	Call GetExportField(docCurr, |ai|, |goetype|, arrExportFields())  ' en_goetype
	Call GetExportField(docCurr, |ai|, |source|, arrExportFields())
	Call GetExportField(docCurr, |ai|, |interest|, arrExportFields()) 'en_interest
	Call GetExportField(docCurr, |ai|, |comments|, arrExportFields()) 'en_comments
	Call GetExportField(docCurr, |ai|, |exclemail|, arrExportFields()) 'Q_EXC_EMAIL
	Call GetExportField(docCurr, |ai|, |excltele|, arrExportFields()) 'Q_EXC_TELE
	Call GetExportField(docCurr, |ai|, |sendagency|, arrExportFields()) 'Q_SEND_AGENCY
	Call GetExportField(docCurr, |ai|, |segment|, arrExportFields()) 'Q_SEGMENT
	Call GetExportField(docCurr, |ai|, |q_code_add|, arrExportFields()) 'Q_CODE_ADD	
	Call GetExportField(docCurr, |ai|, |cm_mmca1|, arrExportFields()) 'Q_CM_MMCA1
	Call GetExportField(docCurr, |ai|, |cm_mmca2|, arrExportFields()) 'Q_CM_MMCA2
	Call GetExportField(docCurr, |ai|, |cm_mmca3|, arrExportFields()) 'Q_CM_MMCA3
	Call GetExportField(docCurr, |ai|, |cm_mmc|, arrExportFields()) 'Q_CM_MMC
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableVer1_3:6:8
%REM
	Sub CreateTableOneColumnVer1_3
	Description: Comments for Sub
%END REM
Sub CreateTableVer1_3(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
	
	Const STR_MODULE_NAME = |CreateTableVer1_3|
	
	'Trap errors
	On Error GoTo lblError
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_labelOverlay As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	Dim str_t As String, str_s As String
	Dim x As Integer, y As Integer
	Dim bol_createSecondTable As Boolean
	
	str_HTML = str_HTML & |<table data-widget="datatable| + str_d + |" data-scrollaxis="x" class="ibm-data-table" cellspacing="0" cellpadding="0" border="0" summary="Day| & str_d + |_CreateTableVer1_3">| & Chr(13)
	
	Set item = g_doc_regProfile.GetFirstItem("rp_Day" + str_d + "Header")
	If Not(item Is Nothing) Then
		str_Day = item.Values(0)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & |</caption>| & Chr(13)
	Else
		If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & | | & str_d & |</caption>| & Chr(13)
	End If
	
	bol_createSecondTable = False
	If CInt(doc_RegTrackProfile.rp_numTracksDay(0)) > 5 Then
		bol_createSecondTable = True
	End If
	
	'Create table headers to label each track (or think of it as a column) first
	str_HTML = str_HTML & |<thead>| & Chr(13)
	str_HTML = str_HTML & |<tr>| & Chr(13)
	For x = 1 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
		
		str_t = Cstr(x)
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |<th scope="col">| & str_tLabel & |</th>| & Chr(13)
		
		If x = 6 Then Exit For
	Next
	str_HTML = str_HTML & |</tr>| & Chr(13)
	str_HTML = str_HTML & |</thead>| & Chr(13)
	
	'Next fill the table with each session
	str_HTML = str_HTML & |<tbody>| & Chr(13)
	For x = 1 To CInt(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_s = CStr(x)
		
		str_HTML = str_HTML & |<tr>| & Chr(13)
		
		For y = 1 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
			
			str_t = CStr(y)
			
			str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
			str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
			If str_label <> "" Then str_label = str_label & |<br />|
			str_labelOverlay = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label_HTML")
			If GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts") <> || Then
				str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts") & |<br />|
			Else
				str_ts = ||
			End If			
			str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
			
			str_HTML = str_HTML & |<td>|
			
			str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tcS|
			If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
				str_HTML = str_HTML & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
			Else
				'str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
				'str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
				'Chr(13) & |<br />| & _
				'str_ts & Chr(13) & |<br /><br />| & _
				'str_desc
				str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
				str_tc & |" class="ibm-styled-checkbox" /><label for="| & str_Field & |">| & str_label & _
				str_ts & | | & str_labelOverlay & |</label>| & _
				str_desc
			End If
			
			str_HTML = str_HTML & |</td>| & Chr(13)
			
			If y = 6 Then Exit For
		Next
		
		str_HTML = str_HTML & |</tr>| & Chr(13)
		
	Next	
	
	' Close the table
	str_HTML = str_HTML & |</tbody>| & Chr(13)
	str_HTML = str_HTML + |</table>| & Chr(13) & Chr(13)
	
	If bol_createSecondTable = True Then
		
		str_HTML = str_HTML & Chr(13) & |<table data-widget="datatable| + str_d + |" data-scrollaxis="x" class="ibm-data-table" cellspacing="0" cellpadding="0" border="0" summary="Day| & str_d + |_CreateTableVer1_3">| & Chr(13)
		str_HTML = str_HTML & |<caption class="ibm-access">| & str_Day & | | & str_d & |</caption>| & Chr(13)
		
		'Create table headers to label each track (or think of it as a column) first
		str_HTML = str_HTML & |<thead>| & Chr(13)
		str_HTML = str_HTML & |<tr>| & Chr(13)
		For x = 7 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
			
			str_t = CStr(x)
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(CStr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |<th scope="col">| & str_tLabel & |</th>| & Chr(13)
			
		Next
		str_HTML = str_HTML & |</tr>| & Chr(13)
		str_HTML = str_HTML & |</thead>| & Chr(13)
		
		'Next fill the table with each session
		str_HTML = str_HTML & |<tbody>| & Chr(13)
		For x = 1 To CInt(doc_RegTrackProfile.rp_numSessionsDay(0))
			
			str_s = CStr(x)
			
			str_HTML = str_HTML & |<tr>| & Chr(13)
			
			For y = 7 To CInt(doc_RegTrackProfile.rp_numTracksDay(0))
				
				str_t = CStr(y)
				
				str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
				str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
				If str_label <> "" Then str_label = str_label & |<br />|
				str_labelOverlay = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label_HTML")
				str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts")
				str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
				
				str_HTML = str_HTML & |<td>|
				
				str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tcS|
				If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
					str_HTML = str_HTML & str_label & _
					Chr(13) & |<br />| & _
					str_ts & Chr(13) & |<br /><br />| & _
					str_desc
				Else
					'str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
					'str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
					'Chr(13) & |<br />| & _
					'str_ts & Chr(13) & |<br /><br />| & _
					'str_desc
					str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
					str_tc & |" class="ibm-styled-checkbox" /><label for="| & str_Field & |">| & str_label & _
					str_ts & | | & str_labelOverlay & |</label>| & _
					str_desc
				End If
				
				str_HTML = str_HTML & |</td>| & Chr(13)
				
			Next
			
			str_HTML = str_HTML & |</tr>| & Chr(13)
			
		Next	
		
		' Close the table
		str_HTML = str_HTML & |</tbody>| & Chr(13)
		str_HTML = str_HTML + |</table>| & Chr(13) & Chr(13)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:2:GetAmenityHTML:1:8
Sub GetAmenityHTML(docEventProfile As NotesDocument, strPageLocale As String, docCurr As NotesDocument)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Build the html to show in the amenity description section of the registration page.
	'The html consists of a series of divs, each with an id based on the attendee type
	'that the amenity package is for.  For example, the package description for the Customer/Delegate
	'attendee type is stored in the div with id='id-amenity-customer-delegate'.
	'
	'Parameters
	'-----------------------
	'docEventProfile				The event profile.
	'strPageLocale					The locale that the page is being displayed in.
	'docCurr							The registration form about to be shown.
	'     
	'Return Values
	'-----------------------
	'None, but the lc_AmenityHTML field in docCurr is updated with the html that
	'is used to show the amenity descriptions.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetAmenityHTML|
	
	Dim strAmenityHTML As String 
	Dim strPageLanguage As String
	Dim strCurrencyCountryCode As String
	Dim strAmountFieldName As String
	Dim strAmenityTypesFieldName As String
	Dim strAttendeeTypesFieldName As String
	Dim intCurrAmenityPackageId As Integer
	Dim strCurrAmenityPackageId As String
	Dim varAttendeeTypes As Variant
	Dim strCurrAttendeeType As String
	Dim docPageLocaleProfile As NotesDocument
	Dim docCurrencyLocaleProfile As NotesDocument	
	Dim strCurrencySymbol As String

	'Trap errors
	On Error Goto lblError 
	
	'Initialize the return value
	strAmenityHTML = ||
	
	'Get the country code of the currency that the amenity package is priced in
	'Check that the necessary fields are in the event profile to allow for pre-CTEBA event profiles
	'that may not have the CTEBA fields
	strCurrencyCountryCode = ||
	
	If (docCurr.HasItem(|EnableCTEBA|)) Then
		If (docCurr.EnableCTEBA(0) = |1|) Then
			Call Debug(STR_MODULE_NAME & |: CTEBA is enabled for event id [| & docEventProfile.ep_id(0) & |]|)
			If (docEventProfile.HasItem(|cteba_cc|)) Then
				If (docEventProfile.cteba_cc(0) <> ||) Then
					strCurrencyCountryCode = docEventProfile.GetItemValue(|cteba_cc|)(0)
				Else
					'This is an error because CTEBA is enabled, but the cteba_cc field is blank
					Call Debug(STR_MODULE_NAME & |: CTEBA is enabled for event id [| & docEventProfile.ep_id(0) & |], but the CTEBA currency country code is blank.|)
					Goto lblExit
				End If
			Else
				'This is an error because CTEBA is enabled, but the event profile doesn't have the cteba_cc field
				Call Debug(STR_MODULE_NAME & |: CTEBA is enabled for event id [| & docEventProfile.ep_id(0) & |], but the cteba_cc field is not in the event profile.|)
				Goto lblExit				
			End If						
		Else
			Call Debug(STR_MODULE_NAME & |: CTEBA is not enabled for event id [| & docEventProfile.ep_id(0) & |]|)
			'So there's no need to format any html
			Goto lblExit
		End If
	Else
		'So there's no need to format any html
		Call Debug(STR_MODULE_NAME & |: CTEBA is not enabled for event id [| & docEventProfile.ep_id(0) & |]|)
		Goto lblExit
	End If
	
	'Store the currency code in the registration
	docCurr.en_amenity_cc = strCurrencyCountryCode	
	
	'Get the locale profile for the supplied country code, so that we can get the correct
	'currency symbol to use
	Set docCurrencyLocaleProfile = docGetLocaleProfileByCountryCode(strCurrencyCountryCode)
	
	If (docCurrencyLocaleProfile Is Nothing) Then	
		'If no locale profile, look for an ISO country profile and get the currency symbol from that
		Set docCurrencyLocaleProfile = docGetCountryProfile(strCurrencyCountryCode)
		If (docCurrencyLocaleProfile Is Nothing) Then	
			Error ERR_SYSTEM_ERROR, |Unable to find locale profile or country profile for country code [| & strCurrencyCountryCode & |].|		
		Else
			strCurrencySymbol = docCurrencyLocaleProfile.cd_CurrencySymbol(0)
		End If	
	Else
		strCurrencySymbol = docCurrencyLocaleProfile.lc_CurrencySymbol(0)
	End If		
		
	'Store the currency symbol in the registration
	docCurr.en_amenity_currency_symbol = strCurrencySymbol	
	
	'Get the locale profile for the page from the reference database
	Set docPageLocaleProfile = docGetLocaleProfile(strPageLocale)
	
	If (docPageLocaleProfile Is Nothing) Then
		Error ERR_SYSTEM_ERROR, |Unable to find locale profile for [| & strPageLocale & |].|	
	Else
		
		'Build additional divs for all available amenity packages
		'TV - Updated Nov 22 2011 to match corresponding change in ES where the number of
		'packages was reduced from 10 to 5.		
		For intCurrAmenityPackageId = 1 To 5
			'Build the field names used to get information about the amenity package
			strCurrAmenityPackageId = Cstr(intCurrAmenityPackageId)
			strAttendeeTypesFieldName = |cteba_atype_| & strCurrAmenityPackageId
			strAmountFieldName = |amenity_local_GOE_charge_| & strCurrAmenityPackageId
			strAmenityTypesFieldName = |amenity_types_| & strCurrAmenityPackageId
		
			'Get the attendee types that the package is applicable to
			varAttendeeTypes = docEventProfile.GetItemValue(strAttendeeTypesFieldName)
		
			'For each of these attendee types, build a div containing the package details for the attendee type
			Forall varAttendeeType In varAttendeeTypes
				strCurrAttendeeType = Cstr(varAttendeeType)
				If (strCurrAttendeeType <> ||) Then
					strAmenityHTML = strAmenityHTML & strBuildAmenityDiv(docEventProfile, docPageLocaleProfile, strCurrencySymbol, strCurrAttendeeType, strAmountFieldName, strAmenityTypesFieldName)
				End If
			End Forall
		
		Next
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished. Returning [| & strAmenityHTML & |]|)
	
	'Store the text
	docCurr.lc_AmenityHTML = strAmenityHTML
	
	Exit Sub
	
lblError:
	
	strAmenityHTML = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docCopySpeakersPage:1:8
Function docCopySpeakersPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Allow the user to choose a speakers page to copy, then make a copy of
	'that speakers page for the supplied locale.
     '
     'Parameters
     '-----------------------
	'docEventProfile				The event profile that the speakers page will be associated with.
	'strLocale						The locale of the speakers page to create.
     '     
     'Return Values
     '-----------------------
     'The newly created speakers page or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCopySpeakersPage|
	
	Dim ws As New NotesUIWorkspace
	Dim colSpeakersPages As NotesDocumentCollection
	Dim docSpeakersPage As NotesDocument
	Dim docNewSpeakersPage As NotesDocument	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Set colSpeakersPages = ws.PickListCollection(PICKLIST_CUSTOM, False, g_dbCurr.Server, g_dbCurr.FilePath, "vDialogSelectSpeakerPage", "Select a speakers page", "Please select a speakers page to copy from.")
	
	If (colSpeakersPages.Count > 0) Then
		
		Set docSpeakersPage = colSpeakersPages.GetFirstDocument
		
		Print |Copying the | & docSpeakersPage.LocaleName(0) & | speakers page from the '| & docSpeakersPage.eventname(0) & |' event...|
		
		'Create a new speakers page with values from the event profile
		Set docNewSpeakersPage = docCreateSpeakersPage(docEventProfile, strLocale)	
		
		'Copy the rest of the values from the speakers page we are copying
		docNewSpeakersPage.showgraphic = docSpeakersPage.showgraphic(0)		
		docNewSpeakersPage.abs_info   = docSpeakersPage.abs_info(0)
		docNewSpeakersPage.includeabs = docSpeakersPage.includeabs(0)
		docNewSpeakersPage.sk_sectiontitle = docSpeakersPage.sk_sectiontitle(0)
		docNewSpeakersPage.speakercountchoice = docSpeakersPage.speakercountchoice(0)
		docNewSpeakersPage.speakercount = docSpeakersPage.speakercount(0)
		
		docNewSpeakersPage.speakername1 = docSpeakersPage.speakername1(0)
		docNewSpeakersPage.speaker1 = docSpeakersPage.speaker1(0)
		docNewSpeakersPage.speakername2 = docSpeakersPage.speakername2(0)
		docNewSpeakersPage.speaker2 = docSpeakersPage.speaker2(0)
		docNewSpeakersPage.speakername3 = docSpeakersPage.speakername3(0)
		docNewSpeakersPage.speaker3 = docSpeakersPage.speaker3(0)
		docNewSpeakersPage.speakername4 = docSpeakersPage.speakername4(0)
		docNewSpeakersPage.speaker4 = docSpeakersPage.speaker4(0)
		docNewSpeakersPage.speakername5 = docSpeakersPage.speakername5(0)
		docNewSpeakersPage.speaker5 = docSpeakersPage.speaker5(0)
		docNewSpeakersPage.speakername6 = docSpeakersPage.speakername6(0)
		docNewSpeakersPage.speaker6 = docSpeakersPage.speaker6(0)
		docNewSpeakersPage.speakername7 = docSpeakersPage.speakername7(0)
		docNewSpeakersPage.speaker7 = docSpeakersPage.speaker7(0)
		docNewSpeakersPage.speakername8 = docSpeakersPage.speakername8(0)
		docNewSpeakersPage.speaker8 = docSpeakersPage.speaker8(0)
		docNewSpeakersPage.speakername9 = docSpeakersPage.speakername9(0)
		docNewSpeakersPage.speaker9 = docSpeakersPage.speaker9(0)
		docNewSpeakersPage.speakername10 = docSpeakersPage.speakername10(0)
		docNewSpeakersPage.speaker10 = docSpeakersPage.speaker10(0)
		
		Call docNewSpeakersPage.ComputeWithForm(True, True)	
		
		Print |Speakers page copied.|
		
		Call Debug(STR_MODULE_NAME & |: Speakers page copied for event with ID [| & Cstr(docEventProfile.ep_id(0)) & |].|)
		
	End If
	
lblExit:
	
	Set docCopySpeakersPage = docNewSpeakersPage
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docNewSpeakersPage = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:dbGetEventBriefsDb:1:8
Function dbGetEventBriefsDb() As NotesDatabase
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return a handle to the Event Briefs database.  The location of the
	'database is defined in the Database Profile.
     '
     'Parameters
     '----------------
     'None.
	'
     'Return Values
     '-------------------
     'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetEventBriefsDb|
	
	Dim s As New NotesSession	
	Dim dbEventBriefs As New NotesDatabase("", "")
	Dim strEventBriefsServer As String
	Dim strEventBriefsFilename As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'If we already have a handle to the database, return it
	If (Not g_dbEventBriefs Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Event Briefs database is available.|)
		Set dbEventBriefs = g_dbEventBriefs
	Else
		'Get a handle to the Event Briefs database
		strEventBriefsServer = Cstr(g_docDbProfile.dp_EventBriefsServer(0))
		strEventBriefsFilename = Cstr(g_docDbProfile.dp_EventBriefsFilename(0))
		
		Call Debug(STR_MODULE_NAME & |: Event Briefs server is [| & strEventBriefsServer & |].|)	
		Call Debug(STR_MODULE_NAME & |: Event Briefs filename is [| & strEventBriefsFilename & |].|)
		
		On Error Resume Next
		
		Set dbEventBriefs = s.GetDatabase(strEventBriefsServer, strEventBriefsFilename, False)
		
		On Error Goto lblError		
		
		If (dbEventBriefs Is Nothing) Then
			Call dbEventBriefs.Open(strEventBriefsServer, strEventBriefsFilename)
			If dbEventBriefs.IsOpen Then
				Call Debug(STR_MODULE_NAME & |: Event Briefs database is available.|)
			Else
				Call Debug(STR_MODULE_NAME & |: Unable to find Event Briefs database.|)	
			End If	
		Else
			Call Debug(STR_MODULE_NAME & |: Event Briefs database is available.|)
		End If
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetEventBriefsDb = dbEventBriefs
	
	Exit Function
	
lblError:
	
	Set dbEventBriefs = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetCompanyFields:1:8
Sub GetCompanyFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetCompanyFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |ci|, |companyname|  , arrExportFields())
	Call GetExportField(docCurr, |ci|, |mailstreet1|  , arrExportFields())
	Call GetExportField(docCurr, |ci|, |mailstreet2|  , arrExportFields())
	Call GetExportField(docCurr, |ci|, |city|         , arrExportFields())
	Call GetExportField(docCurr, |ci|, |state|        , arrExportFields())
	Call GetExportField(docCurr, |ci|, |zip|          , arrExportFields())
	Call GetExportField(docCurr, |ci|, |country_trans|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:PullNominationsStatusFromInviteeTool:1:8
Sub PullNominationsStatusFromInviteeTool(flgEnableUI As Boolean)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Based on Geoff's instructions, this function pulls the latest legal approval status from the invitee tool as required.
	'
	'1. Get the Invitee Tool database
	'2. Loop through your view of nominations "Pending Legal Approval"
	'3. Get the nomination document
	'4. Lookup the corresponding record in the invitee tool database (WE NEED TO DISCUSS WHAT THE BEST KEY IS...MAYBE REFID+EMAIL?)
	'5. Get the invitee tool document
	'6. Copy the following fields from the invitee tool document to the nomination document
	'
	'in_goeDetermination
	'in_goeStatus
	'in_system
	'in_match
	'in_status
	'legal_name
	'legal_email
	'in_cclRequired
	'in_standardTemplate
	'in_template
	'in_signatureType
	'in_signatureTypeHard
	'in_signatureTypeSoft
	'in_cclAdds	
	'in_cclAddsList
	'
	'Parameters
	'-----------------------
	'flgEnableUI				Whether to write messages to the status bar and show message boxes.
	'	
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PullNominationsStatusFromInviteeTool|
	
	Dim dtNow As New NotesDateTime("")	
	Dim view As NotesView	
	Dim strKey As String
	Dim vecNominations As NotesViewEntryCollection
	Dim veCurr As NotesViewEntry
	Dim docCurrNomination As NotesDocument
	Dim lngCount As Long
	Dim strMsg As String	
	Dim strEmail As String
	Dim intReply As Integer
	Dim flgOK As Boolean
	Dim lngCountErrors As Long
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	If (flgEnableUI) Then
		intReply = intAskQuestion(|You are about to update the status of the nominations in this view from the Invitee Tool.| & Chr$(13) & Chr$(13) & |Do you want to continue?|)
		If intReply <> IDYES Then
			GoTo lblExit
		End If
	End If
	
	'Set the date/time used to timestamp the nominations
	dtNow.SetNow
	
	Set view = g_dbCurr.GetView(|vwlookupNomInInviteeTool|)
	
	Set vecNominations = view.AllEntries
	
	If (vecNominations.Count > 0) Then
		Call Debug(STR_MODULE_NAME & |: Processing [| & vecNominations.Count & |] nomination(s).|)	
		
		If (flgEnableUI) Then
			Print |Processing [| & vecNominations.Count & |] nomination(s).|
		End If
		
		lngCount = 0
		
		Set veCurr = vecNominations.GetFirstEntry
		
		While Not veCurr Is Nothing	
			
			lngCount = lngCount + 1			
			
			On Error GoTo lblErrorNext
			
			strMsg = |Processing nomination | & lngCount & | of | &  vecNominations.Count & |. |
			
			Set docCurrNomination = veCurr.Document
			
			strEMail = docCurrNomination.en_email(0)
			
			If (flgEnableUI) Then
				Print strMsg & |Updating nomination for e-mail [| & strEmail & |].|
			End If
			
			flgOK = flgUpdateNomination(docCurrNomination, dtNow, flgEnableUI)
			
			If (Not flgOK) Then
				lngCountErrors = lngCountErrors + 1	
			End If
			
lblNext:	
			On Error GoTo lblError
			Set veCurr = vecNominations.GetNextEntry(veCurr)
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No nominations to process.|)	
		If (flgEnableUI) Then
			Print |No nominations to process.|
		End If			
	End If
	
lblExit:
	
	strMsg = |Finished. | & lngCount & | nomination(s) processed.|
	
	If (lngCountErrors > 0) Then
		strMsg = strMsg & | | & lngCountErrors & | error(s) occurred.|
	End If
	
	Call Debug(STR_MODULE_NAME & |: | & strMsg)
	
	If (flgEnableUI) Then
		Print strMsg
		Call ShowInfoMsg(strMsg)
	End If			
	
	Exit Sub
	
lblError:
	
	If (flgEnableUI) Then
		Print Err() & |: | & Error() & | in line | & Erl
	End If			
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
lblErrorNext:
	
	If (flgEnableUI) Then
		Print Err() & |: | & Error() & | in line | & Erl
	End If			
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNext	
	
End Sub

'++LotusScript Development Environment:2:1:flgSendReport:1:8
Function flgSendReport(docReport As NotesDocument, docSubscriptionProfile As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Send the supplied report to the recipients in the supplied subscription profile.
	
     'Parameters
     '-----------------------
	'docReport						The report
	'docSubscriptionProfile		A subscription profile
     '     
     'Return Values
     '-----------------------
     'True if the report was sent, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgSendReport|
	
	Dim flgOK As Boolean
	Dim varEmailAddresses As Variant
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	If (Cstr(g_docDbProfile.dp_EmailMode(0)) = |Test|) Then
		varEmailAddresses = g_docDbProfile.dp_TestModeEmailAddress
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Test].|)		
		'Blank out the copy to and blind copy to items in test mode
		'itemCopyTo.Values = ""
		'itemBlindCopyTo.Values = ""
	Else
		'TODO: Get e-mail addresses from subscription profile
		varEmailAddresses = docSubscriptionProfile.sp_SendTo
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Production].|)		
	End If
	
	Call Debug(STR_MODULE_NAME & |: Sending e-mail to test mode e-mail addresses:|)
	Forall varEmailAddress In varEmailAddresses
		Call Debug(STR_MODULE_NAME & |: | & Cstr(varEmailAddress))	
	End Forall	
	
	flgOK = True
	
lblExit:
	
	'TODO: Have this do something!
	flgSendReport = flgOK
	
	If (flgOK) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Report sent.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Unable to send report.|)
	End If
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableNineColumns_Radio:6:8
%REM
	Sub CreateTableNineColumns_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableNineColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Redim str_Fields9(1 To 1) As String
	Redim str_FieldName6(1 To 1) As String
	Redim str_FieldName7(1 To 1) As String
	Redim str_FieldName8(1 To 1) As String
	Redim str_FieldName9(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-9 (Track 6-9)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			Redim Preserve str_Fields9(1 To fCtr)
			Redim Preserve str_FieldName6(1 To fCtr)
			Redim Preserve str_FieldName7(1 To fCtr)
			Redim Preserve str_FieldName8(1 To fCtr)
			Redim Preserve str_FieldName9(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			str_Fields9(fCtr) = |en_d| & str_d & |t9s| & Cstr(s) & |tc|
			str_FieldName6(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName7(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName8(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName9(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-9 (Track 6-9)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		str_FieldName = str_FieldName6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		str_FieldName = str_FieldName7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		str_FieldName = str_FieldName8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields9(s)
		str_FieldName = str_FieldName9(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:GetQTags:1:8
Sub GetQTags(docEventProfile As NotesDocument, strarrQTags() As String, intCountQTags As Integer)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile, check whether an MI question set has been selected.
	'If one has, then find all of the Web2CRM QTags for the set and return them 
	'in the supplied array.  Also return a count of the number of QTags.
     '
     'Parameters
     '----------------
     'docEventProfile					The event profile.
	'strarrQTags()					(Returned).  An array containing QTags.
	'intCountQTags					(Returned).  The number of QTags in the array.
	'
     'Return Value
     '-------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetQTags|
	
	Dim strLocale As String
	Dim strQuestionSetID As String
	Dim docMIQuestionSetLookup As NotesDocument
	Dim intCurrQuestion As Integer
	Dim strCurrQuestion As String
	Dim strQTagFieldName As String
	Dim strQTag As String
	
     'Trap errors
	On Error Goto lblError
	
	'Initialize return values
	intCountQTags = 0
	Redim strarrQTags(0)
	
	'Always lookup the English (Worldwide) set of questions
	strLocale = |en_ZZ|
	
	'Check whether an MI question set has been chosen
	strQuestionSetID = Cstr(docEventProfile.MIQuestionSet(0))
	
	Set docMIQuestionSetLookup = docGetMIQuestionSetLookup(strQuestionSetID, strLocale)
	
	'If one has then, check in the event profile whether each question is included and if
	'it is set the values for that question
	If (Not docMIQuestionSetLookup Is Nothing) Then
		
		'Get the question count and resize the array to store the QTags
		intCountQTags = docMIQuestionSetLookup.ql_Count(0)
		
		If intCountQTags > 0 Then
			
			Redim strarrQTags(intCountQTags - 1)
			
			For intCurrQuestion = 1 To intCountQTags
				
				strCurrQuestion = |Q| & Cstr(intCurrQuestion)
				
				'Build field name based on the question number
				strQTagFieldName = strCurrQuestion & |_qtag|
				
				strQTag = Cstr(docMIQuestionSetLookup.GetItemValue(strQTagFieldName)(0))
				
				Call Debug(STR_MODULE_NAME & |: MI question [| & strCurrQuestion & |] QTAG [| & strQTag & |].|) 
				
				strarrQTags(intCurrQuestion - 1) = strQTag
				
			Next
			
		Else
			
			Error ERR_SYSTEM_ERROR, |Unable to get QTAGS for event ID [| & docEventProfile.ep_ID(0) & |] locale [| & strLocale & |].  The question count for the question set is zero.|	
			
		End If
		
	Else
		
		Error ERR_SYSTEM_ERROR, |Unable to find MI question set lookup for event ID [| & docEventProfile.ep_ID(0) & |] locale [| & strLocale & |].|	
		
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableOneColumnVer1_0:6:8
%REM
	Sub CreateTableOneColumn
	Description: Comments for Sub. Version 1.0.
%END REM
Sub CreateTableOneColumnVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)

	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	If str_s = "1" Then
		str_HTML = str_HTML & |
<div class="ibm-container"> 
<h2>| & str_Day & | | & str_d & |: | & str_tLabel & |</h2> 
<div class="ibm-container-body">| & Chr(13)
	Else
		str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>|
	
	' Close the section
	str_HTML = str_HTML + |
</div>| & Chr(13) & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableOneColumnVer1_1:6:8
%REM
	Sub CreateTableOneColumn
	Description: Version 1.1.
%END REM
Sub CreateTableOneColumnVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	If str_s = "1" Then
		'str_HTML = str_HTML & |
'<h2>| & str_Day & | | & str_d & | | & str_tLabel & |</h2>
'<div class="ibm-container-body">| & Chr(13)
'<h2>| & str_Day & | | & str_d & |</h2>
		str_HTML = str_HTML & |
<h2>| & str_Day & | | & str_d & |</h2>
<div class="ibm-container-body ibm-one-column">|
		If (str_tLabel <> |&nbsp;|) And (str_tLabel <> ||) Then
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>
<div class="ibm-columns"><div class="ibm-col-6-6"><div class="ibm-alternate-rule"><hr /></div></div></div>| & Chr(13)	
		End If
	Else
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-one-column">|
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13) & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableSixColumnsVer1_2:6:8
%REM
	Sub CreateTableSixColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableSixColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6 (Track 6)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields(1 To fCtr)
			str_Fields(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create column 6 (Track 6)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:strGetNonBreakSpace:5:8
%REM
	Function strGetNonBreakSpace
	Description: Comments for Function
%END REM
Function strGetNonBreakSpace(str_ToCheck As String) As String
	If Trim(Cstr(str_ToCheck)) = || Then
		strGetNonBreakSpace = |&nbsp;|
	Else
		strGetNonBreakSpace = str_ToCheck
	End If
End Function

'++LotusScript Development Environment:2:2:CreateTableSixColumnsVer1_1:6:8
%REM
	Sub CreateTableSixColumns
	Description: Version 1.1.
%END REM
Sub CreateTableSixColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields4(1 To 1) As String
	Redim str_Fields5(1 To 1) As String
	Redim str_Fields6(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 4 - 6 (Track 4 - 6)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields4(1 To fCtr)
			Redim Preserve str_Fields5(1 To fCtr)
			Redim Preserve str_Fields6(1 To fCtr)
			str_Fields4(fCtr) = |en_d| & str_d & |t4s| & Cstr(s) & |tc|
			str_Fields5(fCtr) = |en_d| & str_d & |t5s| & Cstr(s) & |tc|
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 4-6 (Tracks 4-6)
	For s = 1 To (sCtr - 1)
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields4(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields5(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:docGetSponsorsByBriefIDandLocale:1:8
Function docGetSponsorsByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and a locale, check whether a sponsors document exists for the
	'event and locale.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'docEventProfile				The event profile to check.
	'strLocale						The locale to check.
	'
     'Return Value
     '-------------------
     'If a sponsors document exists for the event and locale return a handle to it.
	'Otherwise retun Nothing.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetSponsorsByBriefIDandLocale|
	
	Dim docSponsors As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView
	Dim strKey As String
	
	Set view = g_dbCurr.GetView(|vLookupSponsorsByIDLocale|)
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docSponsors = view.GetDocumentByKey(strKey , True)
	
lblExit:
	
	Set docGetSponsorsByBriefIDandLocale = docSponsors
	
	Exit Function
	
lblError:
	
	Set docSponsors = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableSixColumnsVer1_0:6:8
%REM
	Sub CreateTableSixColumns
	Description: Version 1.0.
%END REM
Sub CreateTableSixColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 4-6 (Tracks 4-6)
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t| & str_t & |s| & Cstr(s) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t| & str_t & |s| & Cstr(s) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t| & str_t & |s| & Cstr(s) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:docGetLocaleProfileByCountryCode:1:8
Function docGetLocaleProfileByCountryCode(strCountryCode As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a country code, try to find the first locale profile in the reference database 
	'with the supplied country code.  (Used to find a locale profile that contains the
	'currency symbol for the supplied country code).
	'
	'Parameters
	'----------------
	'strCountryCode						The country code.
	'
	'Return Values
	'-------------------
	'If a locale profile is found, it is returned.
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetLocaleProfileByCountryCode|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupLocaleProfilesByCountryCode|
	
	Dim view As NotesView
	Dim docLocaleProfile As NotesDocument
	Dim strKey As String
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Looking for first locale profile with country code [| & strCountryCode & |]|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strCountryCode
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docLocaleProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docLocaleProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetLocaleProfileByCountryCode = docLocaleProfile
	
	Exit Function
	
lblError:
	
	Set docLocaleProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CopyTo:1:8
Sub CopyTo(docFrom As NotesDocument, strFromFieldName As String, docTo As NotesDocument, strToFieldName As String)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Copy the contents of the named field in the source document to the named field in
	'the target document.
	'
	'Parameters
	'-----------------------
	'docFrom 						The document to copy the field from
	'strFromFieldName		The name of the field to copy from
	'docTo	 						The document to copy the field to
	'strToFieldName			The name of the field to copy to	
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyTo|
	
	'Trap errors
	On Error GoTo lblError
	
	Call docTo.CopyItem(docFrom.GetFirstItem(strFromFieldName), strToFieldName)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:MarkEventDelinquent:1:8
Sub MarkEventDelinquent(docEventProfile As NotesDocument, dtTimestamp As NotesDateTime)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Mark the supplied event as delinquent.  That is, the attendance has not been
	'marked as complete two weeks after the event.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |MarkEventDelinquent|
	
	Dim strEventID As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	'Mark the event as delinquent
	docEventProfile.ep_IsAttendanceOverdue = |Yes|
	Set docEventProfile.ep_DateAttendanceMarkedOverdue = dtTimestamp
	
	Call docEventProfile.Save(True, False)
	
	Call Debug(STR_MODULE_NAME & |: Marking attendance for event [| & strEventID & |] is overdue.|) 
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docCreateSponsorsPage:1:8
Function docCreateSponsorsPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Create a new  sponsors page for the specified locale.
     '
     'Parameters
     '-----------------------	
	'docEventProfile				The event profile that the sponsors page will be associated with.
	'strLocale						The locale of the sponsors page to create.
     '     
     'Return Values
     '-----------------------
     'The newly created sponsors page or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCreateSponsorsPage|
	
	Dim docSponsorContent As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Print |Creating | & strGetLocaleName(strLocale) & | sponsors page for the '| & docEventProfile.eventname(0) & |' event...|
	
	Set docSponsorContent = g_dbCurr.CreateDocument
	
	docSponsorContent.form = "sponsorscontent"
	docSponsorContent.ep_id = docEventProfile.ep_id(0)
	docSponsorContent.ep_EventTitle = docEventProfile.eventname(0)	
	docSponsorContent.eventname = docEventProfile.eventname(0)
	docSponsorContent.startmonth = docEventProfile.startmonth(0)
	docSponsorContent.startday = docEventProfile.startday(0)
	docSponsorContent.startyear = docEventProfile.startyear(0)
	docSponsorContent.city = docEventProfile.loc_confcity(0)
	docSponsorContent.country = docEventProfile.loc_confcountry(0)
	docSponsorContent.geo = docEventProfile.geo(0)
	docSponsorContent.status = docEventProfile.status(0)
	docSponsorContent.Locale = strLocale
	docSponsorContent.LocaleName = strGetLocaleName(strLocale)		
	
	Call docSponsorContent.ComputeWithForm(True, True)
	
	Print |Sponsors page created.|
	
lblExit:
	
	Set docCreateSponsorsPage = docSponsorContent	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docSponsorContent = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:2:GetMIQuestionFields:1:8
Sub GetMIQuestionFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetMIQuestionFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |mi|, |q1|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q2|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q3|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q4|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q5|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q6|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q7|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q8|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q9|, arrExportFields())
	Call GetExportField(docCurr, |mi|, |q10|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:LoadExportDialog:1:8
Sub LoadExportDialog(docEventProfile As NotesDocument, docDialog As NotesDocument)
	
	Const STR_MODULE_NAME = |LoadExportDialog|
	
	Dim strDefaultLocale As String
	Dim docLocaleSettings As NotesDocument
	Dim docRegistrationProfile As NotesDocument
	Dim strQuestionSetID As String
	Dim docMIQuestionSetLookup As NotesDocument
	Dim intCurrQuestion As Integer
	Dim flgAtLeastOneMIQuestionSelected As Boolean
	Dim str_FormulaSessions As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	'Get the locale settings and registration profile for the default locale for the event
	strDefaultLocale = Cstr(docEventProfile.ep_DefaultLocale(0))
	
	Set docLocaleSettings = docGetLocaleSettings(strDefaultLocale)
	Set docRegistrationProfile = docGetRegProfileByBriefIDAndLocale(docEventProfile, strDefaultLocale)
	
	'Load the UNIDs of the event configuration documents
	docDialog.ep_UNID = docEventProfile.UniversalID
	docDialog.ls_UNID = docLocaleSettings.UniversalID
	docDialog.rp_UNID = docRegistrationProfile.UniversalID	
	
	'Load the Attendee tab
	If docEventProfile.ep_IsMultiLingual(0) = "Yes" Then
		docDialog.ep_IsMultiLingual = "Yes"
		docDialog.ai_la_localename = |Registration language|
		docDialog.ai_in_localename_exp = |LocaleName|
	End If
	
	' 2010.09.01, Regid, "iordnum", RWS
	docDialog.ai_la_regid = |Attendee ID (Unique to Event Only)|
	docDialog.ai_in_regid_exp = |regid|
	
	docDialog.ai_la_referer = |Referrer code|
	docDialog.ai_in_referer_exp = |en_referer|
	
	docDialog.ai_la_status = |Status|
	docDialog.ai_in_status_exp = |ad_formstatus|
	
	docDialog.ai_la_attendeetype_trans = |Attendee type|
	docDialog.ai_in_attendeetype_trans_exp = |en_attendeetype_trans|
	
	docDialog.ai_la_prefix = |Salutation|
	If docLocaleSettings.ls_IncludePrefix(0) = "Yes" Then
		docDialog.ai_in_prefix_exp = |en_prefix|
	Else
		docDialog.ai_in_prefix_exp = ||
	End If
	
	docDialog.ai_la_en_persontitle = |Person Title|				' en_persontitle
	docDialog.ai_in_en_persontitle_exp = |en_persontitle|
	
	docDialog.ai_la_first = |First name|
	docDialog.ai_in_first_exp = |en_first|
	
	docDialog.ai_la_middle = |Middle initial|
	If docLocaleSettings.ls_IncludeMiddleInitial(0) = "Yes" Then
		docDialog.ai_in_middle_exp = |en_middle|
	Else
		docDialog.ai_in_middle_exp = ||
	End If
	
	docDialog.ai_la_last = |Last name|
	docDialog.ai_in_last_exp = |en_last|
	
	docDialog.ai_la_en_pronunciation = |Pronunciation|				' en_pronunciation
	'docDialog.ai_in_en_pronunciation_exp = |en_pronunciation|		' turn off the default select by commenting this out
	
	docDialog.ai_la_title = |Job title|
	docDialog.ai_in_title_exp = |en_title|
	
	docDialog.ai_la_email = |E-mail address|
	docDialog.ai_in_email_exp = |en_email|
	
	docDialog.ai_la_phone = |Business phone|
	docDialog.ai_in_phone_exp = |en_phone|
	
	docDialog.ai_la_fax = |Fax|
	If docLocaleSettings.ls_IncludeFax(0) = "Yes" Then
		docDialog.ai_in_fax_exp = |en_fax|
	Else
		docDialog.ai_in_fax_exp = ||
	End If
	
	docDialog.ai_la_followup = |Phone follow-up requested|
	docDialog.ai_in_followup_exp = |ad_phone_followup_requested|
	
	docDialog.ai_la_dateRegistered     = |Date registered|
	docDialog.ai_in_dateRegistered_exp = |@Text(@Created;"D0S0")|
	
	docDialog.ai_la_role = |Role|
	If ((docRegistrationProfile.rp_IncludeRole(0) = "Yes") And (docLocaleSettings.ls_IncludeRole(0) = "Yes")) Then
		docDialog.ai_in_role_exp = |en_role|
	End If
	
	docDialog.ai_la_goe = |GOE|
	docDialog.ai_in_goe_exp = |en_goe|
	
	docDialog.ai_la_goetype = |GOE Type|
	docDialog.ai_in_goetype_exp = |en_goetype|
	
	docDialog.ai_la_source = |Source created|
	docDialog.ai_in_source_exp = |en_origincreated|
	
	docDialog.ai_la_interest = |Primary interest|
	docDialog.ai_in_interest_exp = |en_interest|
	
	docDialog.ai_la_comments = |Comments|
	docDialog.ai_in_comments_exp = |en_comments|
	
	docDialog.ai_la_excltele = |Exclude from telephone|
	docDialog.ai_in_excltele_exp = |Q_EXCL_TELE|
	
	docDialog.ai_la_sendagency = |Send to agency|
	docDialog.ai_in_sendagency_exp = |Q_SEND_AGENCY|
	
	docDialog.ai_la_exclemail = |Exclude from email|
	docDialog.ai_in_exclemail_exp = |Q_EXCL_EMAIL|
	
	docDialog.ai_la_segment = |Segment|
	docDialog.ai_in_segment_exp = |Q_SEGMENT|
	
	docDialog.ai_la_cm_mmca1 = |Campaign code|
	docDialog.ai_in_cm_mmca1_exp = |Q_CM_MMCA1|
	
	docDialog.ai_la_cm_mmca2 = |Offer code|
	docDialog.ai_in_cm_mmca2_exp = |Q_CM_MMCA2|
	
	docDialog.ai_la_cm_mmca3 = |Mailing code|
	docDialog.ai_in_cm_mmca3_exp = |Q_CM_MMCA3|
	
	docDialog.ai_la_q_code_add = |Additional project code|
	docDialog.ai_in_q_code_add_exp = |Q_CODE_ADD|
	
	docDialog.ai_la_cm_mmc = |VCPI|
	docDialog.ai_in_cm_mmc_exp = |Q_CM_MMC|
	
	'Load the Company  tab
	docDialog.ci_la_companyname = |Company name|
	docDialog.ci_in_companyname_exp = |en_companyname|
	
	docDialog.ci_la_mailstreet1 = |Address 1|
	docDialog.ci_in_mailstreet1_exp = |en_mailstreet1|
	
	docDialog.ci_la_mailstreet2 = |Address 2|
	docDialog.ci_in_mailstreet2_exp = |en_mailstreet2|
	
	docDialog.ci_la_city = |City|
	docDialog.ci_in_city_exp = |en_city|
	
	docDialog.ci_la_state = |State/Province|
	If docLocaleSettings.ls_IncludeStateProvince(0) = "Yes" Then
		docDialog.ci_in_state_exp = |en_state|
	Else
		docDialog.ci_in_state_exp = ||
	End If
	
	docDialog.ci_la_zip = |Zip/Postal code|
	docDialog.ci_in_zip_exp = |en_zip|
	
	docDialog.ci_la_country_trans = |Country or region|
	docDialog.ci_in_country_trans_exp = |en_country_trans|
	
	'If the event profile indicates that there are any MI questions, load them
	strQuestionSetID = Cstr(docEventProfile.MIQuestionSet(0))
	
	If (strQuestionSetID <> "") Then
		
		Set docMIQuestionSetLookup = docGetMIQuestionSetLookup(strQuestionSetID, strDefaultLocale)
		
		If (Not docMIQuestionSetLookup Is Nothing) Then
			
			flgAtLeastOneMIQuestionSelected = docEventProfile.ep_MI_Include_Q1(0) = |Yes| Or docEventProfile.ep_MI_Include_Q2(0) = |Yes| Or docEventProfile.ep_MI_Include_Q3(0) = |Yes| Or docEventProfile.ep_MI_Include_Q4(0) = |Yes| Or docEventProfile.ep_MI_Include_Q5(0) = |Yes| Or docEventProfile.ep_MI_Include_Q6(0) = |Yes| Or docEventProfile.ep_MI_Include_Q7(0) = |Yes| Or docEventProfile.ep_MI_Include_Q8(0) = |Yes| Or docEventProfile.ep_MI_Include_Q9(0) = |Yes| Or docEventProfile.ep_MI_Include_Q10(0) = |Yes|
			
			If (flgAtLeastOneMIQuestionSelected) Then
				docDialog.mi_include = |Yes|
				
				For intCurrQuestion = 1 To 10
					Call LoadMIQuestion(intCurrQuestion, docEventProfile, docMIQuestionSetLookup, docDialog)
				Next
			End If
			
		End If
	End If
	
	'If the registration profile for the default locale indicates that emergency contact information is included, load it
	If (docRegistrationProfile.rp_IncludeEmergencyContactInfo(0) = "Yes") Then
		
		docDialog.ec_la_emergcontact = docRegistrationProfile.rp_emergcontact(0)
		If (docRegistrationProfile.ec_in_emergcontact(0) <> "") Then
			docDialog.ec_in_emergcontact_exp = |en_emergcontact|
		Else
			docDialog.ec_in_emergcontact_exp = ||
		End If
		
		docDialog.ec_la_emergdayphone = docRegistrationProfile.rp_emergdayphone(0)
		If (docRegistrationProfile.ec_in_emergdayphone(0) <> "") Then
			docDialog.ec_in_emergdayphone_exp = |en_emergdayphone|
		Else
			docDialog.ec_in_emergdayphone_exp = ||
		End If
		
		docDialog.ec_la_emergnightphone = docRegistrationProfile.rp_emergnightphone(0)
		If (docRegistrationProfile.ec_in_emergnightphone(0) <> "") Then
			docDialog.ec_in_emergnightphone_exp = |en_emergnightphone|
		Else
			docDialog.ec_in_emergnightphone_exp = ||
		End If
		
		docDialog.ec_la_emergrelation = docRegistrationProfile.rp_emergrelation(0)
		If (docRegistrationProfile.ec_in_emergrelation(0) <> "") Then
			docDialog.ec_in_emergrelation_exp = |en_emergrelation|
		Else
			docDialog.ec_in_emergrelation_exp = ||
		End If
		
	End If
	
	'If the registration profile for the default locale indicates that badge information is included, load it
	If (docRegistrationProfile.rp_IncludeBadgeSection(0) = "Yes") Then
		
		docDialog.bi_la_badgenamefirst = docRegistrationProfile.rp_badgenamefirst(0)
		If (docRegistrationProfile.bi_in_badgenamefirst(0) <> "") Then
			docDialog.bi_in_badgenamefirst_exp = |en_badgenamefirst|
		Else
			docDialog.bi_in_badgenamefirst_exp = ||
		End If		
		
		docDialog.bi_la_badgenamemiddle = docRegistrationProfile.rp_badgenamemiddle(0)
		If (docRegistrationProfile.bi_in_badgenamemiddle(0) <> "") Then
			docDialog.bi_in_badgenamemiddle_exp = |en_badgenamemiddle|
		Else
			docDialog.bi_in_badgenamemiddle_exp = ||
		End If		
		
		docDialog.bi_la_badgenamelast = docRegistrationProfile.rp_badgenamelast(0)
		If (docRegistrationProfile.bi_in_badgenamelast(0) <> "") Then
			docDialog.bi_in_badgenamelast_exp = |en_badgenamelast|
		Else
			docDialog.bi_in_badgenamelast_exp = ||
		End If		
		
		docDialog.bi_la_badgecompanyname = docRegistrationProfile.rp_badgecompanyname(0)
		If (docRegistrationProfile.bi_in_badgecompanyname(0) <> "") Then
			docDialog.bi_in_badgecompanyname_exp = |en_badgecompanyname|
		Else
			docDialog.bi_in_badgecompanyname_exp = ||
		End If		
		
	End If
	
	'If the registration profile indicates that there are any optional questions, load them
	If (Cint(docRegistrationProfile.rp_OptionalQuestions_Number(0)) > 0) Then
		
		docDialog.oq_include = |Yes|
		
		For intCurrQuestion = 1 To 19
			Call LoadOptionalQuestion(intCurrQuestion, docRegistrationProfile, docDialog)
		Next
	End If
	
	'Load the Event tab
	docDialog.ei_la_ConfName = |Event name|
	docDialog.ei_in_ConfName_exp = |ConfName|	
	
	docDialog.ei_la_confstartdate = |Event start date|
	docDialog.ei_in_confstartdate_exp = |confstartdate|
	
	docDialog.ei_la_confcity = |Event city|
	docDialog.ei_in_confcity_exp = |confcity|
	
	docDialog.ei_la_WTacticCode = |Source (Tactic) Code|
	docDialog.ei_in_WTacticCode_exp = |WTacticCode|
	
	' other =  user gets this column regardless, they don't get a choice
	docDialog.other_la_en_siebelkey = |Siebel Key|
	docDialog.other_in_en_siebelkey_exp = |en_siebelkey|
	
	'Load the opt-in opt-out tab
	docDialog.oi_la_privacyyes = |E-mail: Yes, please have IBM or an affiliate send me e-mail|
	'docDialog.oi_in_privacyyes_exp = |privacyyes|	
	
	docDialog.oi_la_privacyno = |Other communications: Please do not use the information I have provided here|
	'docDialog.oi_in_privacyno_exp = |privacyno|
	
	'OptInOptOutFields
	docDialog.oi_la_en_OIEMAIL = |Opt In E-mail|  '|OIEMAIL|
	'docDialog.oi_in_en_OIEMAIL_exp = |en_OIEMAIL|
	docDialog.oi_la_en_OOEMAIL = |Opt Out E-mail|  '|OOEMAIL|
	'docDialog.oi_in_en_OOEMAIL_exp = |en_OOEMAIL|
	
	docDialog.oi_la_en_OIPOSTAL = |Opt In Postal|  '|OIPOSTAL|
	'docDialog.oi_in_en_OIPOSTAL_exp = |en_OIPOSTAL|
	docDialog.oi_la_en_OOPOSTAL = |Opt Out Postal|  '|OOPOSTAL|
	'docDialog.oi_in_en_OOPOSTAL_exp = |en_OOPOSTAL|
	
	docDialog.oi_la_en_OITELE = |Opt In Telephone|  '|OITELE|
	'docDialog.oi_in_en_OITELE_exp = |en_OITELE|
	docDialog.oi_la_en_OOTELE = |Opt Out Telephone|  '|OOTELE|
	'docDialog.oi_in_en_OOTELE_exp = |en_OOTELE|
	
	'optInOptOut3, export		' implemented weekend of 2010.04.12
	%REM NC_EMAIL, NC_POSTAL, NC_TELE
	%END REM
	docDialog.oi_la_NC_HIDDEN_EMAIL = |Notice and Choice: Email|  '|NC_EMAIL|    	' label
	docDialog.oi_in_NC_HIDDEN_EMAIL_exp = |NC_HIDDEN_EMAIL|								' will provide a default "check"
		
	docDialog.oi_la_NC_HIDDEN_POSTAL = |Notice and Choice: Postal|  '|NC_POSTAL|
	docDialog.oi_in_NC_HIDDEN_POSTAL_exp = |NC_HIDDEN_POSTAL|
		
	docDialog.oi_la_NC_HIDDEN_PHONE = |Notice and Choice: Telephone|  '|NC_TELE|
	docDialog.oi_in_NC_HIDDEN_PHONE_exp = |NC_HIDDEN_PHONE|
	
	' Load the sessions dialog
	docDialog.si_la_sessions1 = |Sessions Day 1|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey1); @Return(""); "Yes");

t := @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; "rp_numTracksDay"; [FailSilent]);
s := @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; "rp_numSessionsDay"; [FailSilent]);
rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d1t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d1s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; rpFieldTime; [FailSilent]); "");
sessPickedDay1 := @If(sessLabel != ""; sessPickedDay1 + @If(sessPickedDay1 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay1);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay1|
	docDialog.si_in_sessions1_exp = str_FormulaSessions
	
	docDialog.si_la_sessions2 = |Sessions Day 2|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey2); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d2t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d2s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; rpFieldTime; [FailSilent]); "");
sessPickedDay2 := @If(sessLabel != ""; sessPickedDay2 + @If(sessPickedDay2 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay2);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay2|
	docDialog.si_in_sessions2_exp = str_FormulaSessions
	
	docDialog.si_la_sessions3 = |Sessions Day 3|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey3); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d3t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d3s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; rpFieldTime; [FailSilent]); "");
sessPickedDay3 := @If(sessLabel != ""; sessPickedDay3 + @If(sessPickedDay3 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay3);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay3|
	docDialog.si_in_sessions3_exp = str_FormulaSessions
	
	docDialog.si_la_sessions4 = |Sessions Day 4|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey4); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d4t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d4s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; rpFieldTime; [FailSilent]); "");
sessPickedDay4 := @If(sessLabel != ""; sessPickedDay4 + @If(sessPickedDay4 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay4);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay4|
	docDialog.si_in_sessions4_exp = str_FormulaSessions
	
	' ## HTML Sessions ##
	
	docDialog.si_la_sessions5 = |Sessions Day 1 (HTML)|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey1); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d1t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d1s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label_HTML";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey1; rpFieldTime; [FailSilent]); "");
sessPickedDay1 := @If(sessLabel != ""; sessPickedDay1 + @If(sessPickedDay1 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay1);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay1|
		'docDialog.si_in_sessions5_exp = str_FormulaSessions
		
	docDialog.si_la_sessions6 = |Sessions Day 2 (HTML)|
	str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey2); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d2t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d2s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label_HTML";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey2; rpFieldTime; [FailSilent]); "");
sessPickedDay2 := @If(sessLabel != ""; sessPickedDay2 + @If(sessPickedDay2 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay2);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay2|
		'docDialog.si_in_sessions6_exp = str_FormulaSessions
		
		docDialog.si_la_sessions7 = |Sessions Day 3 (HTML)|
		str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey3); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d3t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d3s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label_HTML";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey3; rpFieldTime; [FailSilent]); "");
sessPickedDay3 := @If(sessLabel != ""; sessPickedDay3 + @If(sessPickedDay3 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay3);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay3|
		'docDialog.si_in_sessions7_exp = str_FormulaSessions
		
		docDialog.si_la_sessions8 = |Sessions Day 4 (HTML)|
		str_FormulaSessions = |rp_UNID:= @DbLookup("" : "NoCache"; ""; "vLookupRegistrationProfilesByIDLocale"; @Trim(ep_id + Locale); 2; [FailSilent]);
dayAsTranslated := @GetDocField(rp_UNID; "rp_DayText");

isAvailable := @If(!@IsAvailable(sessionKey4); "No"; "Yes");
t := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; "rp_numTracksDay"; [FailSilent]); "0");
s := @If(isAvailable="Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; "rp_numSessionsDay"; [FailSilent]); "0");
Tk := @If(@GetDocField(rp_UNID; "rp_TrackText") = ""; "Track"; @GetDocField(rp_UNID; "rp_TrackText"));
Sess := @If(@GetDocField(rp_UNID; "rp_SessionText") = ""; "Session"; @GetDocField(rp_UNID; "rp_SessionText"));

tCtr := 1;

@DoWhile(

sCtr := 1;

@DoWhile(

enField := "en_d4t" + @Text(tCtr) + "s" + @Text(sCtr) + "tcS";
isSpan := @If(@GetField("en_d4s1span") = "Yes"; "Yes"; "No");
sCtrAdj := @If(isSpan = "Yes" & sCtr > 1 & tCtr > 1; sCtr-1; sCtr);
rpFieldLabel := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "label_HTML";
rpFieldTime := "rp_t" + @Text(tCtr) + "s" + @Text(sCtrAdj) + "ts";
isSel := @If(@GetField(enField) != ""; "Yes"; "No");
sessLabel := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; rpFieldLabel; [FailSilent]); "");
sessTime := @If(isSel = "Yes"; @DbLookup("":"NoCache"; ""; "vLookupRegistrationSessionProfilesByIDLocaleDay"; sessionKey4; rpFieldTime; [FailSilent]); "");
sessPickedDay4 := @If(sessLabel != ""; sessPickedDay4 + @If(sessPickedDay4 = ""; ""; ", ") + Tk + ": " + @Text(tCtr) + " " + Sess + ": " + @Text(sCtr) + " (" + sessTime + ") - " + sessLabel; sessPickedDay4);

sCtr := sCtr + 1;
sCtr <= @TextToNumber(s)

);

tCtr := tCtr + 1;
tCtr <= @TextToNumber(t)

);

sessPickedDay4|
		'docDialog.si_in_sessions8_exp = str_FormulaSessions

lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:PrintBadge:1:8
Sub PrintBadge(doc As NotesDocument, flgIsSpeaker As Integer)
    '------------------------------------------------------------------------------------------------------
     'Description 
     '------------------
     'Print a badge by creating a temporary file on the C: drive and displaying
	'it in a browser.
     '
     'Parameters
     '-----------------------
	'doc 					The Notes document containing the badge information.
	'flgIsSpeaker		Set to True to print a speaker badge
	'
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PrintBadge|
	
	Const STR_FILENAME = |C:\SWUBadge.htm|
	
	Dim ws As New NotesUIWorkspace
	Dim s As New NotesSession
	Dim stream As NotesStream
	Dim strFilename As String	
	Dim strBadgeName As String
	Dim strAttendeeType As String
	Dim strBadgeNumber As String
	Dim strGeoRegion As String
	Dim intRC As Integer
	
	 'Trap errors
	On Error Goto lblError
	
	strFilename = STR_FILENAME
	
	'Get attendee information from the supplied document
	strBadgeName = Cstr(doc.en_badgefirstname(0)) & | | & Cstr(doc.en_badgelastname(0))
	strAttendeeType = |Attendee|
	If (Cint(doc.en_eventstaff(0)) = 1 Or Cstr(doc.en_type(0)) = "Staff") Then
		strAttendeeType = |Staff|
	End If
	
	If flgIsSpeaker Then
		strAttendeeType = |Speaker|
	End If
	
	'Changed for 2006 to use passcode instead of badge number
	strBadgeNumber = |(| & Cstr(doc.en_passcode(0)) & |)|
	
	strGeoRegion = Cstr(doc.en_geography(0)) & | / | & Cstr(doc.en_region(0))
	
	Set stream = s.CreateStream
	
	If (Not stream.Open(strFilename, "binary")) Then
		Error ERR_SYSTEM_ERROR, |Unable to open badge file | & strFilename & |.|	
	End If
	
	If (stream.Bytes <> 0) Then
		Call stream.Truncate
	End If	
	
	Call stream.WriteText(|<html lang="en">|)
	Call stream.WriteText(|<head>|)
	Call stream.WriteText(|<title>Badge Printing</title>|)
	Call stream.WriteText(|</head>|)
	Call stream.WriteText(|<body marginheight="0" marginwidth="0" leftmargin="0" topmargin="0">|)
	Call stream.WriteText(|<div style="font-family:arial; left: .125in; top: 1.5in; position: absolute; margin: 0in;" id="BadgeInfo">|)
	Call stream.WriteText(|<div style="font-family:arial; font-size:18.0pt; width: 3.5in; height: 1in;position: relative;" align="center" id="BadgeName"><b>|)
	Call stream.WriteText(strBadgeName)
	Call stream.WriteText(|</b>|)
	Call stream.WriteText(|</div>|)
	Call stream.WriteText(|<div style="font-family:arial; font-size:14.0pt; width: 2.1in; height: .75in;"align="left">|)
	Call stream.WriteText(strAttendeeType)
	Call stream.WriteText(|<br>|)
	Call stream.WriteText(strGeoRegion)
	Call stream.WriteText(|</div>|)
	Call stream.WriteText(|<div style='width: 1.5in; height: .75in; font-size:15.0pt; font-family:"IDAutomationHC39M"; left: 2.1in; top: 1in; position: absolute;' align="center">| & strBadgeNumber & |</div>|)
	Call stream.WriteText(|</div>|)
	Call stream.WriteText(|<span style='font-family:arial; font-size:12.0pt;left:5in; top:2in; position: absolute;'>|)
	Call stream.WriteText(|<b>Additional Info:</b><br>|)
	Call stream.WriteText(|N / A|)
	Call stream.WriteText(|</span>|)
	Call stream.WriteText(|<script type="text/javascript">|)
	Call stream.WriteText(|var name='| & strBadgeName & |';|)
	Call stream.WriteText(|if(name.length < 15)|)
	Call stream.WriteText(|{|)
	Call stream.WriteText(|document.all.BadgeName.style.fontSize="30pt";|)
	Call stream.WriteText(|}|)
	Call stream.WriteText(|else|)
	Call stream.WriteText(|{|)
	Call stream.WriteText(|if(name.length < 20)|)
	Call stream.WriteText(|{|)
	Call stream.WriteText(|document.all.BadgeName.style.fontSize="25pt";|)
	Call stream.WriteText(|}|)
	Call stream.WriteText(|else|)
	Call stream.WriteText(|{|)
	Call stream.WriteText(|document.all.BadgeName.style.fontSize="18pt";|)
	Call stream.WriteText(|}|)
	Call stream.WriteText(|}|)
	Call stream.WriteText(|</script>|)
	Call stream.WriteText(|</body>|)
	Call stream.WriteText(|</html>|)
	
	Call stream.Close
	
	Call ws.URLOpen(|file://| & STR_FILENAME)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_4:7:8
%REM
	Sub CreateSessionSectionHTMLVer1_4
	Description: Version 1.4, Created 04/02/2019, David Holbrook.
		This is a v18 version. With optional Radio buttons.
%END REM
Sub CreateSessionSectionHTMLVer1_4(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTMLVer1_4|
	
	'Trap errors
	On Error GoTo lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim txt_SessionsSectionTitle As NotesItem
	Dim session As New NotesSession
	Dim str_HTMLDayOneToThree As String, str_HTML As String, str_HTMLDayFour As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	Dim item As NotesItem
	Dim str_Break As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		GoTo lblExit
	End If
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Call Debug(STR_MODULE_NAME & |: rp_IncludeSessionsInfo = "No". Exiting.|)
		GoTo lblExit
	End If
	
	Set txt_SessionsSectionTitle = doc_enrollForm.ReplaceItemValue("sessionsSectionTitle", _
	g_doc_regProfile.rp_sessions_sectiontitle(0))
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Section header
	str_HTML = |
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To CInt(g_doc_regProfile.rp_numdays(0))
		
		Call Debug(STR_MODULE_NAME & |: Processing day: | & CStr(d))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + CStr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & CStr(d) & |.|)
			GoTo lblExit
		End If
		
		If g_doc_regProfile.rp_numdays(0) <> "1" Then
			Set item = g_doc_regProfile.GetFirstItem("rp_Day" + CStr(d) + "Header")
			If d > 1 Then str_Break = |<br />|
			If Not(item Is Nothing) Then
				str_Day = item.Values(0)
				str_HTML = str_HTML & Chr(13) & str_Break & |<p class="ibm-h3">| & str_Day & |</p>| & Chr(13)
			Else
				str_HTML = str_HTML & Chr(13) & str_Break & |<p class="ibm-h3">| & str_Day & | | & CStr(d) & |</p>| & Chr(13)
			End If
		End If
		
		Call CreateTableVer1_4(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d))
		
		Call setNumTracksOnDay(d, doc_RegTrackProfile, doc_enrollForm)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	If str_HTML <> || Then
		Call doc_enrollForm.ReplaceItemValue("validateSessions", "true")
		'Call setNumTracksPerDay(doc_enrollForm)
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_3:7:8
%REM
	Sub CreateSessionSectionHTMLVer1_3
	Description: Version 1.3, Created 08/03/2017, David Holbrook.
		This is a v18 version.
%END REM
Sub CreateSessionSectionHTMLVer1_3(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTMLVer1_3|
	
	'Trap errors
	On Error GoTo lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim txt_SessionsSectionTitle As NotesItem
	Dim session As New NotesSession
	Dim str_HTMLDayOneToThree As String, str_HTML As String, str_HTMLDayFour As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	Dim item As NotesItem
	Dim str_Break As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		GoTo lblExit
	End If
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Call Debug(STR_MODULE_NAME & |: rp_IncludeSessionsInfo = "No". Exiting.|)
		GoTo lblExit
	End If
	
	Set txt_SessionsSectionTitle = doc_enrollForm.ReplaceItemValue("sessionsSectionTitle", _
	g_doc_regProfile.rp_sessions_sectiontitle(0))
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Section header
	str_HTML = |
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To CInt(g_doc_regProfile.rp_numdays(0))
		
		Call Debug(STR_MODULE_NAME & |: Processing day: | & CStr(d))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + CStr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & CStr(d) & |.|)
			GoTo lblExit
		End If
		
		If g_doc_regProfile.rp_numdays(0) <> "1" Then
			Set item = g_doc_regProfile.GetFirstItem("rp_Day" + CStr(d) + "Header")
			If d > 1 Then str_Break = |<br />|
			If Not(item Is Nothing) Then
				str_Day = item.Values(0)
				str_HTML = str_HTML & Chr(13) & str_Break & |<p class="ibm-h3">| & str_Day & |</p>| & Chr(13)
			Else
				str_HTML = str_HTML & Chr(13) & str_Break & |<p class="ibm-h3">| & str_Day & | | & CStr(d) & |</p>| & Chr(13)
			End If
		End if
		
		Call CreateTableVer1_3(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d))
		
		Call setNumTracksOnDay(d, doc_RegTrackProfile, doc_enrollForm)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	If str_HTML <> || Then
		Call doc_enrollForm.ReplaceItemValue("validateSessions", "true")
		'Call setNumTracksPerDay(doc_enrollForm)
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:2:PushNominationsToInviteeTool:1:8
Sub PushNominationsToInviteeTool(flgEnableUI As Boolean)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Based on Geoff's instructions, this function copies nominations to the invitee tool as required.
	'
	'1. Look up the event profile, and check the legal requirements for the event (field: cteba_approval_conditions_L1. ).
	'	- Currently, there are two event-level statuses that would require a nomination to move to the invitee tool:
	'		1) Legal needs to review invitee list
	'		2) Legal needs to review invitee names
	'	NOTE: In Phase 2 of CTEBA there will be country-specific requirements. 
	'	That is, you'll have to check the country of the nominee to see if it needs to go to the Invitee Tool (we can discuss this later...just giving you a heads-up). 
	'
	'2. If either Legal requirement is present in the field, proceed with processing the nominations
	'
	'3. For each nomination, copy it to the Invitee Tool (described below)
	'
	'4.  Mark the nomination as "Pending GOE Determination" (this should be the status that will exclude from the "to be processed" view
	'
	'5.  Stamp the nomination with the date and time copied to invitee tool and any other info you think the event owner might want to know about the process
	
	'Parameters
	'-----------------------
	'flgEnableUI				Whether To write messages to the status bar and show message boxes.
	'	
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PushNominationsToInviteeTool|
	
	Const STR_R1 = |Legal needs to review invitee list|
	Const STR_R2 = |Legal needs to review invitee names|
	
	Dim strEventID As String
	Dim docEventProfile As NotesDocument
	Dim varLegalRequirements As Variant
	Dim strCurrRequirement As String
	Dim flgCopyToInviteeTool As Boolean
	Dim intReply As Integer
	Dim vw_ViewDraft As NotesView
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
'David Holbrook, 11/9/2018 - Process events that are Active

	Set g_vwActiveEvents = g_dbCurr.GetView("vLookupEventsActive")
	Set docEventProfile = g_vwActiveEvents.Getfirstdocument()
	
	Do While Not(docEventProfile Is Nothing)
		
		If docEventProfile.cteba_status(0) = |Compliant - no GOE/no CPICC| Then
			
			varLegalRequirements = docEventProfile.cteba_approval_conditions_L1
			
			If (flgEnableUI) Then
				intReply = intAskQuestion(|You are about to copy all of the registrations in this view to the Invitee Tool.| & Chr$(13) & Chr$(13) & |Do you want to continue?|)
				If intReply <> IDYES Then
					GoTo lblExit
				End If
			End If
			
			'Check whether either of the legal requirements is present that means that we need to copy registrations to the invitation tool
			ForAll varRequirement In varLegalRequirements
				strCurrRequirement = CStr(varRequirement)	
				If (strCurrRequirement = STR_R1) Or (strCurrRequirement = STR_R2) Then			
					flgCopyToInviteeTool = True
					Exit ForAll
				End If
				flgCopyToInviteeTool = True  'want to copy all of them to CTEBA smh 8/1/2012
			End ForAll
			
			If (flgCopyToInviteeTool) Then
				Call Debug(STR_MODULE_NAME & |: Registrations need to be copied to the invitation tool.|)
				Call CopyNominationsToInviteeTool(docEventProfile, flgEnableUI)
			Else
				Call Debug(STR_MODULE_NAME & |: Registrations do not need to be copied to the invitation tool.|)		
			End If
			
		End If
		
		Set docEventProfile = g_vwActiveEvents.GetNextDocument(docEventProfile)
	Loop
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_2:7:8
%REM
	Sub CreateSessionSectionHTMLVer1_2
	Description: Version 1.2, Created 12/13/2013, David Holbrook.
		This is a v17 version, which will create a maximum span of 5 columns.
%END REM
Sub CreateSessionSectionHTMLVer1_2(doc_enrollForm As NotesDocument, _
	doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTMLVer1_2|
	
	'Trap errors
	On Error Goto lblError
	
	Dim txt_SessionHTML As NotesItem, txt_SessionHTMLDayFour As NotesItem
	Dim txt_SessionsSectionTitle As NotesItem
	Dim richStyle As NotesRichTextStyle
	Dim session As New NotesSession
	Dim str_HTMLDayOneToThree As String, str_HTML As String, str_HTMLDayFour As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Set richStyle = session.CreateRichTextStyle
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set txt_SessionHTMLDayFour = doc_enrollForm.GetFirstItem("txt_SessionHTMLDay4")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	
	If txt_SessionHTML Is Nothing And Not doc_enrollForm.HasItem("isXPage") Then
		Call Debug(STR_MODULE_NAME & |: txt_SessionHTML field was not found. Exiting.|)
		Goto lblExit
	End If
	
	If txt_SessionHTMLDayFour Is Nothing And Not doc_enrollForm.HasItem("isXPage") Then
		Call Debug(STR_MODULE_NAME & |: txt_SessionHTMLDay4 field was not found. Exiting.|)
		Goto lblExit
	End If
	
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		Goto lblExit
	End If
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Call Debug(STR_MODULE_NAME & |: rp_IncludeSessionsInfo = "No". Exiting.|)
		Goto lblExit
	End If
	
	Set txt_SessionsSectionTitle = doc_enrollForm.ReplaceItemValue("sessionsSectionTitle", _
	g_doc_regProfile.rp_sessions_sectiontitle(0))
	
	' Section header
	str_HTML = |
<div class="ibm-container">
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>
</div>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To Cint(g_doc_regProfile.rp_numdays(0))
		
		If d = 4 Then
			str_HTML = ""
		End If
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + Cstr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & Cstr(d) & |.|)
			Goto lblExit
		End If
		
		'str_HTML = str_HTML & Chr(13) & |<div class="ibm-container">|
		'str_HTML = str_HTML & Chr(13) & |<div class="ibm-alternate-rule"><hr/></div>|
		str_HTML = str_HTML & Chr(13) & |<div class="ibm-columns"><div class="ibm-col-6-6">| & _
		|<div class="ibm-alternate-rule"><hr/></div></div></div>|
		
		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
		'If g_doc_regProfile.rp_numdays(0) <> "1" Then
			str_HTML = str_HTML & Chr(13) & |<h2>| & str_Day & | | & Cstr(d) & |</h2>| & Chr(13)
			'str_HTML = str_HTML & Chr(13) & |<h2>| & str_Day & |</h2>| & Chr(13)
		End If
		
		Select Case doc_RegTrackProfile.rp_numTracksDay(0)
		Case "1"
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
					Call CreateTableOneColumn_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
				Else
					Call CreateTableOneColumnVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
				End If
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
		Case "2"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableTwoColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					Else
						Call CreateTableTwoColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					End If
					sCtr = sCtr - 1
				Else
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableTwoColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), _
						Cstr(s), "388", "left")
					Else
						Call CreateTableTwoColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), _
						Cstr(s), "388", "left")
					End If
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
		Case "3"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					Else
						Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					End If
					sCtr = sCtr - 1
				Else
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					Else
						Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					End If
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
		Case "4"
			'OLD CODE: Call CreateTableFourColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableFourColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					Else
						Call CreateTableFourColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					End If
					sCtr = sCtr - 1
				Else
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableFourColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					Else
						Call CreateTableFourColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					End If
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
		Case "5"
			'OLD CODE: Call CreateTableFiveColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					Else
						Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					End If
					sCtr = sCtr - 1
				Else
					If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
						Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					Else
						Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
					End If
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
		Case "6"
			'OLD CODE: Call CreateTableSixColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
				Call CreateTableSixColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Else
				Call CreateTableSixColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			End If
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
		Case "7"
			'OLD CODE: Call CreateTableSevenColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
				Call CreateTableSevenColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Else
				Call CreateTableSevenColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			End If
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
		Case "8"
			'OLD CODE: Call CreateTableEightColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), doc_enrollForm)
			If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
				Call CreateTableEightColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Else
				Call CreateTableEightColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			End If
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
		Case "9"
			If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
				Call CreateTableNineColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Else
				Call CreateTableNineColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			End If
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "9")
		Case "10"
			If g_doc_regProfile.rp_SessionButtonType(0) = "Radio button" Then
				Call CreateTableTenColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Else
				Call CreateTableTenColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			End If
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "10")
	End Select
		
		str_HTML = str_HTML & Chr(13) & Chr(13)
		
		If d = 4 Then
			str_HTMLDayFour = str_HTML
		Else
			str_HTMLDayOneToThree = str_HTML
		End If
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTMLDayOneToThree)
	
	If str_HTMLDayFour <> "" Then
		Set txt_sessionHTMLDayFour = doc_enrollForm.ReplaceItemValue("txt_SessionHTMLDay4", str_HTMLDayFour)
	End If
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Exiting.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_1:5:8
%REM
	Sub CreateSessionSectionHTML
	Description: Version 1.1
%END REM
Sub CreateSessionSectionHTMLVer1_1(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTMLVer1_1|
	
	'Trap errors
	On Error Goto lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim richStyle As NotesRichTextStyle
	Dim session As New NotesSession
	Dim str_HTML As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	
	Set richStyle = session.CreateRichTextStyle
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	
	If txt_SessionHTML Is Nothing Then
		Goto lblExit
	End If
	
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		Goto lblExit
	End If
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Goto lblExit
	End If
	
	' Section header
	str_HTML = |
<div class="ibm-container">
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>
</div>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To Cint(g_doc_regProfile.rp_numdays(0))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + Cstr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & Cstr(d) & |.|)
			Goto lblExit
		End If
		
'		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
'			str_HTML = str_HTML & |
'<div class="ibm-container"> 
'<h2>| & str_Day & | | & CStr(d) & |</h2>
'</div>| & Chr(13)
'		End If
		
'		str_HTML = str_HTML & |
'<div class="ibm-container ibm-alternate-two">|
		str_HTML = str_HTML & |
<div class="ibm-container">|
		
		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
'<h2>| & str_Day & | | & Cstr(d) & |</h2>| & Chr(13)
			str_HTML = str_HTML & | 
<h2>| & str_Day & |</h2>| & Chr(13)
		End If
		
		Select Case doc_RegTrackProfile.rp_numTracksDay(0)
		Case "1"
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				Call CreateTableOneColumnVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
		Case "2"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableTwoColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableTwoColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), _
					Cstr(s), "258", "right")
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
		Case "3"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
		Case "4"
			Call CreateTableFourColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
		Case "5"
			Call CreateTableFiveColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
		Case "6"
			Call CreateTableSixColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
		Case "7"
			Call CreateTableSevenColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
		Case "8"
			Call CreateTableEightColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
	End Select
		
		str_HTML = str_HTML & |</div>| & Chr(13) & Chr(13)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_0:5:8
%REM
	Sub CreateSessionSectionHTML
	Description: Version 1.0.
%END REM
Sub CreateSessionSectionHTMLVer1_0(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTML|
	
	'Trap errors
	On Error Goto lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim richStyle As NotesRichTextStyle
	Dim session As New NotesSession
	Dim str_HTML As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	
	Set richStyle = session.CreateRichTextStyle
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	
	If txt_SessionHTML Is Nothing Then
		Goto lblExit
	End If
	
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		Goto lblExit
	End If
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Goto lblExit
	End If
	
	' Section header
	str_HTML = |
<div class="ibm-container">
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>
</div>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To Cint(g_doc_regProfile.rp_numdays(0))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + Cstr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
				str_Locale & | missing session tracks for day | & Cstr(d) & |.|)
			Goto lblExit
		End If
		
		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
			str_HTML = str_HTML & |
<div class="ibm-container"> 
<h2>| & str_Day & | | & Cstr(d) & |</h2>|
		End If
		
		Select Case doc_RegTrackProfile.rp_numTracksDay(0)
			Case "1"
				For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
					Call CreateTableOneColumn_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
				Next
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
			Case "2"
				For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
					Call CreateTableTwoColumnsVer1_0(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
				Next
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
			Case "3"
				For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
					' Check if this session spans ALL tracks; If yes, then only create 1 column
					If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
						Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
						'sCtr = sCtr - 1
					Else
						Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s), Cstr(s))
					End If
					'Call CreateTableThreeColumns(str_HTML, doc_RegTrackProfile, g_doc_regProfile, CStr(d), Cstr(s), CStr(s))
				Next
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
			Case "4"
				Call CreateTableFourColumns(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
			Case "5"
				Call CreateTableFiveColumns(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
			Case "6"
				Call CreateTableSixColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
			Case "7"
				Call CreateTableSevenColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
			Case "8"
				Call CreateTableEightColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
				Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
		End Select
		
		str_HTML = str_HTML & |</div>| & Chr(13)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableSevenColumnsVer1_2:6:8
%REM
	Sub CreateTableSevenColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableSevenColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6 & 7 (Track 6 & 7)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-7 (Track 6-7)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:docGetEmailTemplate:1:8
Function docGetEmailTemplate(intEMailType As Integer, docEventProfile As NotesDocument, docEnrollment As NotesDocument) As NotesDocument
   	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Given a type of e-mail, an event profile and an enrollment document, use the locale
	'from the enrollment document and the type of e-mail to find the UNID of the e-mail
	'template stored in the event profile for that locale/e-mail type.
	'
    'Parameters
    '-----------------------
	'intEmailType				The type of e-mail
	'docEventProfile			An event profile
	'docEnrollment			An enrollment document
    '     
    'Return Values
    '-----------------------
    'docEmailTemplate is set to the e-mail template or Nothing if a template could not be found.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEmailTemplate|
	
	Dim docEmailTemplate As NotesDocument
	Dim strLocale As String
	Dim strUNID As String
	Dim strType As String
	Dim strID As String
	Dim strPrefix As String
	Dim strUNIDFieldName As String
	
     'Trap errors
	On Error Goto lblError	
	
	'Find the locale to use from the supplied enrollment document
	strLocale = Cstr(docEnrollment.Locale(0))	
	
	'Get the type of email being created/edited
	strType = strGetEmailType(intEmailType)
	
	'Find the ID of the field set used to store locale specific information for this event
	strID = strGetLocaleID(docEventProfile, strLocale)
	
	'Use the type and ID to find which field in the event profile is used to store the UNID for this email.
	strPrefix = strGetEmailPrefix(intEmailType)
	strUNIDFieldName = strPrefix & |UNID_| & strID
	
	strUNID = docEventProfile.GetItemValue(strUNIDFieldName)(0)
	
	Set docEmailTemplate = docGetEmailTemplateByUNID(strUNID)
	
	If (docEmailTemplate Is Nothing) Then
		Error ERR_SYSTEM_ERROR, |Unable to find [| & strType & |] e-mail template for locale [| & strLocale & |] in the event profile with UNID [| & docEventProfile.UniversalID & |].|			
	End If
	
lblExit:
	
	Set docGetEmailTemplate = docEmailTemplate
	
	Exit Function
	
lblError:
	
	Set docEmailTemplate = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableSevenColumnsVer1_1:6:8
%REM
	Sub CreateTableSevenColumns
	Description: Version 1.1.
%END REM
Sub CreateTableSevenColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields7(1 To 1) As String
	Dim fCtr As Integer
	
	Call CreateTableSixColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, doc_enrollForm)
	
	' Set field names for column 7 (Track 7)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields7(1 To fCtr)
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create column 7 (Track 7)
	For s = 1 To (sCtr - 1)
		
		str_t = "7"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			str_HTML = str_HTML & |<h3>&nbsp;</h3>|
			
			str_HTML = str_HTML & Chr(13) & |</div>|
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			str_HTML = str_HTML & |<h3>&nbsp;</h3>|
			
			str_HTML = str_HTML & Chr(13) & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)	
		
		sCtr = sCtr + 1
	Next
	
End Sub

'++LotusScript Development Environment:2:2:CopyToAREventProfile:1:8
Sub CopyToAREventProfile(docAREventProfile As NotesDocument, strFieldName As String, varValue As Variant)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Copy the supplied value to the named field in the supplied Attendee Repository
	'event profile.
	'
     'Parameters
     '-----------------------
	'docAREventProfie	 		The AR event profile
	'strFieldName				The name of the field to copy to	
	'varValue						The value
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyToAREventProfile|
	
	'Trap errors
	On Error Goto lblError
	
	Call docAREventProfile.ReplaceItemValue(strFieldName, varValue)
	
	Select Case Datatype(varValue)
		
	Case INT_IS_DYNAMIC_STRING_ARRAY:
		
		Call Debug(STR_MODULE_NAME & |: [| & strFieldName & |] set to:|)
		Forall varItem In varValue
			Call Debug(STR_MODULE_NAME & |: [| & Cstr(varItem) & |]|)
		End Forall
		
	Case INT_IS_STRING:
		
		Call Debug(STR_MODULE_NAME & |: [| & strFieldName & |] set to [| & Cstr(varValue) & |]|)
		
	Case Else
		
		Call Debug(STR_MODULE_NAME & |: Unexpected datatype for [| & strFieldName & |] datatype [| & Cstr(Datatype(varValue)) & |]|)
		
	End Select
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableSevenColumnsVer1_0:6:8
%REM
	Sub CreateTableSevenColumns
	Description: Version 1.0.
%END REM
Sub CreateTableSevenColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_Field As String
	
	Call CreateTableSixColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, doc_enrollForm)
	
	' Create column 7 (Track 7)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "7" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If Cstr(sCtr) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t7s| & Cstr(sCtr) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & "7" & "s" & Cstr(sCtr) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
		sCtr = sCtr + 1
	Next
End Sub

'++LotusScript Development Environment:2:1:docCopyRegistrationProfile:1:8
Function docCopyRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Allow the user to choose a registration profile to copy, then make a copy of
	'that registration profile for the supplied locale.
     '
     'Parameters
     '-----------------------
	'docEventProfile				The event profile that the registration profile will be associated with.
	'strLocale						The locale of the registration profile to create.
     '     
     'Return Values
     '-----------------------
     'The newly created registration profile or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCopyRegistrationProfile|
	
	Dim ws As New NotesUIWorkspace
	Dim colRegistrationProfiles As NotesDocumentCollection
	Dim docRegistrationProfile As NotesDocument
	Dim docNewRegistrationProfile As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Set colRegistrationProfiles = ws.PickListCollection(PICKLIST_CUSTOM, False, g_dbCurr.Server, g_dbCurr.FilePath, "vDialogSelectRegistrationProfile", "Select a registration profile", "Please select a registration profile to copy from.")
	
	If (colRegistrationProfiles.Count > 0) Then	
		
		Set docRegistrationProfile = colRegistrationProfiles.GetFirstDocument()
		
		Print |Copying the | & docRegistrationProfile.LocaleName(0) & | registration profile from the '| & docRegistrationProfile.eventname(0) & |' event...|
		
		'Create a new registration profile with values from the event profile
		Set docNewRegistrationProfile = docCreateRegistrationProfile(docEventProfile, strLocale)	
		
		'Copy the rest of the values from the registration profile we are copying
		docNewRegistrationProfile.rp_graphic = docRegistrationProfile.rp_graphic
		docNewRegistrationProfile.rp_graphictext = docRegistrationProfile.rp_graphictext
		docNewRegistrationProfile.rp_additionalEventInfo = docRegistrationProfile.rp_additionalEventInfo
		docNewRegistrationProfile.rp_IncludeBadgeSection =docRegistrationProfile.rp_IncludeBadgeSection
		docNewRegistrationProfile.rp_IncludeEmergencyContactInfo = docRegistrationProfile.rp_IncludeEmergencyContactInfo
		docNewRegistrationProfile.rp_Include_Screening_Statement = docRegistrationProfile.rp_Include_Screening_Statement 
		docNewRegistrationProfile.rp_Screening_Statement = docRegistrationProfile.rp_Screening_Statement 
		docNewRegistrationProfile.rp_RegistrationClosedMsg = docRegistrationProfile.rp_RegistrationClosedMsg
		docNewRegistrationProfile.rp_returnUrl = docRegistrationProfile.rp_returnUrl
		docNewRegistrationProfile.rp_ConfirmationMsg = docRegistrationProfile.rp_ConfirmationMsg
		docNewRegistrationProfile.rp_DuplicateMsg = docRegistrationProfile.rp_DuplicateMsg
		
		'Copy the optional questions information
		docNewRegistrationProfile.rp_OptionalQuestions_Number = docRegistrationProfile.rp_OptionalQuestions_Number
		docNewRegistrationProfile.rp_oq_sectiontitle = docRegistrationProfile.rp_oq_sectiontitle
		docNewRegistrationProfile.rp_oq_message = docRegistrationProfile.rp_oq_message
		
		'Optional question 1
		docNewRegistrationProfile.oq_in_optionq1= docRegistrationProfile.oq_in_optionq1
		docNewRegistrationProfile.oq_la_optionq1= docRegistrationProfile.oq_la_optionq1
		docNewRegistrationProfile.oq_choice1= docRegistrationProfile.oq_choice1
		docNewRegistrationProfile.kw_option_q1= docRegistrationProfile.kw_option_q1
		docNewRegistrationProfile.oq_re_optionq1= docRegistrationProfile.oq_re_optionq1
		
		'Optional question 2
		docNewRegistrationProfile.oq_in_optionq2 = docRegistrationProfile.oq_in_optionq2
		docNewRegistrationProfile.oq_la_optionq2 = docRegistrationProfile.oq_la_optionq2
		docNewRegistrationProfile.oq_choice2 = docRegistrationProfile.oq_choice2
		docNewRegistrationProfile.kw_option_q2 = docRegistrationProfile.kw_option_q2
		docNewRegistrationProfile.oq_re_optionq2 = docRegistrationProfile.oq_re_optionq2
		
		'Optional question 3
		docNewRegistrationProfile.oq_in_optionq3 = docRegistrationProfile.oq_in_optionq3
		docNewRegistrationProfile.oq_la_optionq3 = docRegistrationProfile.oq_la_optionq3
		docNewRegistrationProfile.oq_choice3 = docRegistrationProfile.oq_choice3
		docNewRegistrationProfile.kw_option_q3 = docRegistrationProfile.kw_option_q3
		docNewRegistrationProfile.oq_re_optionq3 = docRegistrationProfile.oq_re_optionq3
		
		'Optional question 4
		docNewRegistrationProfile.oq_in_optionq4 = docRegistrationProfile.oq_in_optionq4
		docNewRegistrationProfile.oq_la_optionq4 = docRegistrationProfile.oq_la_optionq4
		docNewRegistrationProfile.oq_choice4 = docRegistrationProfile.oq_choice4
		docNewRegistrationProfile.kw_option_q4 = docRegistrationProfile.kw_option_q4
		docNewRegistrationProfile.oq_re_optionq4 = docRegistrationProfile.oq_re_optionq4
		
		'Optional question 5
		docNewRegistrationProfile.oq_in_optionq5 = docRegistrationProfile.oq_in_optionq5
		docNewRegistrationProfile.oq_la_optionq5 = docRegistrationProfile.oq_la_optionq5
		docNewRegistrationProfile.oq_choice5 = docRegistrationProfile.oq_choice5
		docNewRegistrationProfile.kw_option_q5 = docRegistrationProfile.kw_option_q5
		docNewRegistrationProfile.oq_re_optionq5 = docRegistrationProfile.oq_re_optionq5
		
		'Optional question 6
		docNewRegistrationProfile.oq_in_optionq6 = docRegistrationProfile.oq_in_optionq6
		docNewRegistrationProfile.oq_la_optionq6 = docRegistrationProfile.oq_la_optionq6
		docNewRegistrationProfile.oq_choice6 = docRegistrationProfile.oq_choice6
		docNewRegistrationProfile.kw_option_q6 = docRegistrationProfile.kw_option_q6
		docNewRegistrationProfile.oq_re_optionq6 = docRegistrationProfile.oq_re_optionq6
		
		'Optional question 7
		docNewRegistrationProfile.oq_in_optionq7 = docRegistrationProfile.oq_in_optionq7
		docNewRegistrationProfile.oq_la_optionq7 = docRegistrationProfile.oq_la_optionq7
		docNewRegistrationProfile.oq_choice7 = docRegistrationProfile.oq_choice7
		docNewRegistrationProfile.kw_option_q7 = docRegistrationProfile.kw_option_q7
		docNewRegistrationProfile.oq_re_optionq7 = docRegistrationProfile.oq_re_optionq7
		
		'Optional question 8
		docNewRegistrationProfile.oq_in_optionq8 = docRegistrationProfile.oq_in_optionq8
		docNewRegistrationProfile.oq_la_optionq8 = docRegistrationProfile.oq_la_optionq8
		docNewRegistrationProfile.oq_choice8 = docRegistrationProfile.oq_choice8
		docNewRegistrationProfile.kw_option_q8 = docRegistrationProfile.kw_option_q8
		docNewRegistrationProfile.oq_re_optionq8 = docRegistrationProfile.oq_re_optionq8
		
		'Copy the badge information
		docNewRegistrationProfile.rp_badgeinfo_sectiontitle = docRegistrationProfile.rp_badgeinfo_sectiontitle
		docNewRegistrationProfile.rp_badgeinfo_message = docRegistrationProfile.rp_badgeinfo_message
		
		docNewRegistrationProfile.bi_in_badgenamefirst = docRegistrationProfile.bi_in_badgenamefirst
		docNewRegistrationProfile.rp_badgenamefirst = docRegistrationProfile.rp_badgenamefirst
		docNewRegistrationProfile.bi_re_badgenamefirst = docRegistrationProfile.bi_re_badgenamefirst
		
		docNewRegistrationProfile.bi_in_badgenamemiddle = docRegistrationProfile.bi_in_badgenamemiddle
		docNewRegistrationProfile.rp_badgenamemiddle = docRegistrationProfile.rp_badgenamemiddle
		docNewRegistrationProfile.bi_re_badgenamemiddle = docRegistrationProfile.bi_re_badgenamemiddle
		
		docNewRegistrationProfile.bi_in_badgenamelast = docRegistrationProfile.bi_in_badgenamelast
		docNewRegistrationProfile.rp_badgenamelast = docRegistrationProfile.rp_badgenamelast
		docNewRegistrationProfile.bi_re_badgenamelast = docRegistrationProfile.bi_re_badgenamelast
		
		docNewRegistrationProfile.bi_in_badgecompanyname = docRegistrationProfile.bi_in_badgecompanyname
		docNewRegistrationProfile.rp_badgecompanyname = docRegistrationProfile.rp_badgecompanyname
		docNewRegistrationProfile.bi_re_badgecompanyname = docRegistrationProfile.bi_re_badgecompanyname
		
		'Copy the emergenct contact information
		docNewRegistrationProfile.rp_emergencycontact_sectiontitle = docRegistrationProfile.rp_emergencycontact_sectiontitle
		docNewRegistrationProfile.rp_emergencycontact_message = docRegistrationProfile.rp_emergencycontact_message
		
		docNewRegistrationProfile.ec_in_emergcontact = docRegistrationProfile.ec_in_emergcontact
		docNewRegistrationProfile.rp_emergcontact = docRegistrationProfile.rp_emergcontact
		docNewRegistrationProfile.ec_re_emergcontact = docRegistrationProfile.ec_re_emergcontact
		
		docNewRegistrationProfile.ec_in_emergdayphone = docRegistrationProfile.ec_in_emergdayphone
		docNewRegistrationProfile.rp_emergdayphone = docRegistrationProfile.rp_emergdayphone
		docNewRegistrationProfile.ec_re_emergdayphone = docRegistrationProfile.ec_re_emergdayphone
		
		docNewRegistrationProfile.ec_in_emergnightphone = docRegistrationProfile.ec_in_emergnightphone
		docNewRegistrationProfile.rp_emergnightphone = docRegistrationProfile.rp_emergnightphone
		docNewRegistrationProfile.ec_re_emergnightphone = docRegistrationProfile.ec_re_emergnightphone
		
		docNewRegistrationProfile.ec_in_emergrelation = docRegistrationProfile.ec_in_emergrelation
		docNewRegistrationProfile.rp_emergrelation = docRegistrationProfile.rp_emergrelation
		docNewRegistrationProfile.ec_re_emergrelation = docRegistrationProfile.ec_re_emergrelation	
		
		'Use the form to complete other fields
		Call docNewRegistrationProfile.ComputeWithForm(True, True)
		
		Print |Registration profile copied.|
		
		Call Debug(STR_MODULE_NAME & |: Registration profile copied for event with ID [| & Cstr(docEventProfile.ep_id(0)) & |].|)
		
	End If
	
lblExit:	
	
	Set docCopyRegistrationProfile = docNewRegistrationProfile		
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function	
	
lblError:	
	
	Set docNewRegistrationProfile = Nothing
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docCreateSpeakersPage:1:8
Function docCreateSpeakersPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Create a new  speakers page for the specified locale.
     '
     'Parameters
     '-----------------------	
	'docEventProfile				The event profile that the speakers page will be associated with.
	'strLocale						The locale of the speakers page to create.
     '     
     'Return Values
     '-----------------------
     'The newly created speakers page or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCreateSpeakersPage|
	
	Dim docSpeakers As NotesDocument	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Print |Creating | & strGetLocaleName(strLocale) & | speakers page for the '| & docEventProfile.eventname(0) & |' event...|
	
	Set docSpeakers = g_dbCurr.CreateDocument
	
	docSpeakers.form = "speakerscontent"
	docSpeakers.ep_id = docEventProfile.ep_id(0)	
	docSpeakers.ep_EventTitle = docEventProfile.eventname(0)	
	docSpeakers.eventname = docEventProfile.eventname(0)
	docSpeakers.startmonth = docEventProfile.startmonth(0)
	docSpeakers.startday = docEventProfile.startday(0)
	docSpeakers.startyear = docEventProfile.startyear(0)
	docSpeakers.city = docEventProfile.loc_confcity(0)
	docSpeakers.country = docEventProfile.loc_confcountry(0)
	docSpeakers.geo = docEventProfile.geo(0)
	docSpeakers.status = docEventProfile.status(0)
	docSpeakers.Locale = strLocale
	docSpeakers.LocaleName = strGetLocaleName(strLocale)		
	
	Call docSpeakers.ComputeWithForm(True, True)
	
	Print |Speakers page created.|
	
lblExit:
	
	Set docCreateSpeakersPage = docSpeakers
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docSpeakers = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CheckField:1:8
Sub CheckField(docCurr As NotesDocument, strFieldName As String, strFieldLabel As String, strMsg As String, strErrorFieldName As String, intCountErrors As Integer)
'------------------------------------------------------------------------------------------------------
'Description
'------------------
'Validation function used to validate fields in Notes forms.
'
'Parameters
'-----------------------
'docCurr				The document to check.
'strFieldName			The name of the field to check.
'strFieldLabel			The field label (used in error messages)
'strMsg					(Returned)		The validation message appended to strMsg.
'strErrorFieldName		(Returned)		If strErrorFieldName was blank and this field failed validation, 
'						strErrorFieldName is set to the name of the the field that failed validation.
'     
'Return Values
'-----------------------
'None.
'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CheckField|	
	
     'Trap errors
	On Error Goto lblError
	
	If (Trim(Cstr(docCurr.GetItemValue(strFieldName)(0))) = "") Then
		If strErrorFieldName = "" Then
			strErrorFieldName = strFieldName
		End If
		intCountErrors = intCountErrors + 1
		strMsg = strMsg & " " & strFieldLabel & Chr$(13)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call Debug(STR_MODULE_NAME & |: Field name being checked [| & strFieldName & |] Field label [| & strFieldLabel & |]|)
	Call LogError(STR_MODULE_NAME & |: Field name being checked [| & strFieldName & |] Field label [| & strFieldLabel & |]|)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:exportCreatePropertyStruct:1:8
Function exportCreatePropertyStruct(strTypeName As String, objCoreReflection As Variant) As Variant
	Dim classSize As Variant
	Set classSize =  objCoreReflection.forName(strTypeName)        
	Dim aStruct
	classSize.createObject aStruct
	Set exportCreatePropertyStruct = aStruct
End Function

'++LotusScript Development Environment:2:2:OpenWebsite:1:8
Sub OpenWebsite(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Mark the event profile to indictae that the associated web site is open.
     '
     'Parameters
     '-----------------------	
	'docEventProfile 		The event profile
	'uidocEventProfile		The event profile open in the UI
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |OpenWebsite|
	
	Dim intReply As Integer
	Dim strMsg As String
	Dim dtNow As New NotesDateTime("")		
	
	'Trap errors
	On Error Goto lblError
	
	intReply = intAskQuestion(|Would you like to open the event web site?|)
	
	If (intReply = IDYES) Then
		
		docEventProfile.kw_RegistrationStatus = |Open|
		'Set the date/time used to timestamp the event profile
		dtNow.SetNow
		Set docEventProfile.ep_DateWebsiteOpened = dtNow
		docEventProfile.ep_WebsiteOpenedBy = g_strUserName		
		Call UpdateAudit(docEventProfile, g_strCommonUserName, |Website opened.|)
		Call docEventProfile.Save(True, False)
		Call uidocEventProfile.Save		
		
		strMsg = |The event web site is now open.|
		
		If (g_flgIsPreview) Then
			strMsg = strMsg & |  Please allow approximately half an hour for the change to be available on the ibm.com web site.|
		End If
		
		Print strMsg
		
		Call Debug(STR_MODULE_NAME & |: Event web site for event with ID [| & docEventProfile.ep_id(0) & |] opened.|)
		
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:2:ExplodeQueryString:1:8
Sub ExplodeQueryString(strQueryString As String, strlstAgentArgs List As String)
	
	Const STR_MODULE_NAME = |ExplodeQueryString|
	
	Dim strArgs As String 	
	Dim strArgKey As String
	Dim strArgValue As String
	Dim varArgsList As Variant
	Dim varResult As Variant
	
	Call Debug(STR_MODULE_NAME & |: Started.  Query string [| & strQueryString & |].|)	
	
     'Trap errors
	On Error Goto lblError
	
	strArgs = Strright(strQueryString, "OpenForm&", 1)
	
	If strArgs = "" Then
		'No query string... try another url
		strArgs = Strright(strQueryString, "OpenAgent&", 1)
		'Still nothing. Hope we get it this time with page url command
		If strArgs = "" Then
			strArgs = Strright(strQueryString, "OpenPage&", 1)
			'Try again
			If strArgs = "" Then
				strArgs = StrRight(LCase(strQueryString), "open&", 1)
			End If
		End If
	End If
	
	If InStr(1, strArgs, "amp;") > 0 Then
		Call Debug(STR_MODULE_NAME & |: Replacing Substring|)
		varResult = Evaluate({@ReplaceSubstring("} & strArgs & {"; "amp;"; "")})
		strArgs = varResult(0)
	End If
	varArgsList = Evaluate ({@Explode("} & strArgs & {"; "&")})
	
	Forall varArg In varArgsList
		strArgKey = Strleft(Cstr(varArg), "=")
		strArgValue = Strright(Cstr(varArg), "=")
		strlstAgentArgs(strArgKey) = strArgValue
		Call Debug(STR_MODULE_NAME & |: | & strArgKey & |=|& strArgValue)
	End Forall
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:1:docGetRegProfileByBriefIDAndLocale:1:8
Function docGetRegProfileByBriefIDAndLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and a locale, check whether a registration profile exists for the
	'event and locale.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'docEventProfile				The event profile to check.
	'strLocale						The locale to check.
	'
     'Return Value
     '-------------------
     'If a registration profile exists for the event and locale return a handle to it.
	'Otherwise retun Nothing.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetRegProfileByBriefIDAndLocale|
	
	Dim docRegistrationProfile As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView
	Dim strKey As String
	
	Set view = g_dbCurr.GetView(|vLookupRegistrationProfilesByIDLocale|)
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docRegistrationProfile = view.GetDocumentByKey(strKey , True)
	
lblExit:
	
	Set docGetRegProfileByBriefIDAndLocale = docRegistrationProfile
	
	Exit Function
	
lblError:
	
	Set docRegistrationProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
	
End Function

'++LotusScript Development Environment:2:1:docGetMIQuestionSetLookup:1:8
Function docGetMIQuestionSetLookup(strQuestionSetID As String, strLocale As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a question set ID and a locale, try to find the MI Question Set Lookup document in the
	'reference database for that ID and locale.
     '
     'Parameters
     '----------------
     'strQuestionSetID			The question set ID
	'strLocale						The locale
	'
     'Return Values
     '-------------------
     'If an MI Question Set Lookup document is found, it is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetMIQuestionSetLookup|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupQuestionSetLookups|
	
	Dim view As NotesView
	Dim docMIQuestionSetLookup As NotesDocument
	Dim strKey As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether an MI Question Set Lookup exists for question set ID [| & strQuestionSetID & |] locale [| & strLocale & |]|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strLocale & strQuestionSetID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docMIQuestionSetLookup = view.GetDocumentByKey(strKey, True)
	
	If (Not docMIQuestionSetLookup Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetMIQuestionSetLookup = docMIQuestionSetLookup
	
	Exit Function
	
lblError:
	
	Set docMIQuestionSetLookup = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgUpdateEventDocument:1:8
Function flgUpdateEventDocument(docEventProfile As NotesDocument, doc As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile and a related event document such as an agenda,
	'speakers or sponsors page, update the related event document from the
	'event profile.
	'
     'Parameters
     '-----------------------
	'docEventProfile 				The event profile
	'doc									The related event document
     '     
     'Return Values
     '-----------------------
     'True, if updated successfully, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateEventDocument|
	
	Dim flgOK As Boolean
	Dim strMsg As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	flgOK = False
	
	'Update fields
	doc.status  = Cstr(docEventProfile.status(0))
	doc.ep_EventTitle = Cstr(docEventProfile.eventname(0))	
	
	'Reset the eventname field
	doc.startmonth =Cstr(docEventProfile.startmonth(0))
	doc.startday =Cstr(docEventProfile.startday(0))
	doc.startyear =Cstr(docEventProfile.startyear(0))	
	doc.city =Cstr(docEventProfile.loc_confcity(0))
	doc.state = Cstr(docEventProfile.loc_confstate(0))	
	doc.country = Cstr(docEventProfile.loc_confcountry(0))	
	doc.geo = Cstr(docEventProfile.geo(0))
	
	'Hide the register button on the agenda if the event website is closed
	If (Cstr(doc.Form(0)) = |agendacontent|) Then
		If (Cstr(docEventProfile.kw_RegistrationStatus(0)) = "Closed") Then
			Call doc.ReplaceItemValue("hideRegisterButton","Y")
		Else
			Call doc.ReplaceItemValue("hideRegisterButton","")
		End If		
	End If
	
	Call doc.Save(True, False)
	
	flgOK = True
	
	strMsg = |Updated | & Strconv(Cstr(doc.DocType(0)), SC_Lowercase) & | for | & Cstr(doc.LocaleName(0)) & |.|
	
	Print strMsg
	
	Call Debug(STR_MODULE_NAME & |: | & strMsg)
	
lblExit:
	
	flgUpdateEventDocument = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableSixColumns_Radio:6:8
%REM
	Sub CreateTableSixColumns_Radio
	Description: Version 2.0. Radio buttons.
%END REM
Sub CreateTableSixColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields6(1 To 1) As String
	Redim str_FieldName6(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6 (Track 6)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_FieldName6(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_FieldName6(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create column 6 (Track 6)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		str_FieldName = str_FieldName6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:strGetAmenityTypeTranslations:1:8
Function strGetAmenityTypeTranslations(docLocaleProfile As NotesDocument, varAmenityTypes As Variant) As String
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a locale profile and a variant containing an array of amenity types in English
	'return the corresponding locale specific translations formatted as HTML.
	'
	'Parameters
	'-----------------------
	'docLocaleProfile					The locale profile to use when translating.
	'varAmenityTypes				The list of amenity types.
	'												The list can contain ONLY the values listed below:
	'													Transportation
	'													Lodging
	'													Meals/Refreshments
	'													Entertainment
	'													Gifts/Novelties
	'													Entrance Fees
	'     
	'Return Values
	'-----------------------
	'The translated list as a string separated by <br /> tags, for example:
	'Translation of Transportation<br />Translation of Lodging<br />
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetAmenityTypeTranslations|
	
	Dim strHTML As String	
	Dim strAmenityType As String
	Dim strTranslatedAmenityType As String
	
	'Trap errors
	On Error Goto lblError 
	
	Forall varAmenityType In varAmenityTypes
		
		strAmenityType = Cstr(varAmenityType)
		
		Select Case strAmenityType
			
			Case |Transportation|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Transportation(0)
				
			Case |Lodging|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Lodging(0)
			
			Case |Meals/Refreshments|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Meals(0)
			
			Case |Entertainment|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Entertainment(0)
			
			Case |Gifts/Novelties|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Gifts(0)
			
			Case |Entrance Fees|:
				strTranslatedAmenityType = docLocaleProfile.lc_CTEBA_Fees(0)
			
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown amenity type [| & strAmenityType & |] was supplied to the function.|	
			
		End Select
		
		strHTML = strHTML & strTranslatedAmenityType & |<br />|
		
	End Forall
	
	strHTML = strHTML & |<br />|
	
lblExit:
	
	strGetAmenityTypeTranslations = strHTML
	
	Exit Function
	
lblError:
	
	strHTML = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:UpdateWeb2CRMSettings:1:8
Sub UpdateWeb2CRMSettings(docEventProfile As NotesDocument, docAREventProfile As NotesDocument, intReturnCode As Integer)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and an Attendee Repository event profile, attempt to configure the web2crm section
	'in the event profile in Attendee Repository.  Set the return code based on what happened.
     '
     'Parameters
     '----------------
	'docEventProfile			An event profile
	'docAREventProfile		An Attendee Repository event profile
	'intReturnCode			(Returned) The return code.
	'								One of:
     '									INT_UPDATED 									The Event Profile was updated successfully in Attendee Repository
	'									INT_NOT_UPDATED 							The Event Profile could not be updated
	'
     'Return Values
     '-------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateWeb2CRMSettings|
	
	Dim intRC As Integer
	Dim dtNow As New NotesDateTime("")
	Dim intCurrQuestion As Integer
	Dim intCurrIndex As Integer
	Dim strIncluded As String
	Dim strTemp As String
	Dim strCountryCode As String
	Dim strTacticCode As String
	Dim strarrQAs() As String
	Dim strarrQTags() As String
	Dim intCountQTags As Integer
	Dim intQTagsIndex As Integer
	Dim strFormula As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Assume not updated successfully until proven otherwise
	intRC = INT_NOT_UPDATED
	
	'Set the date/time used to timestamp the update
	dtNow.SetNow
	
	docAREventProfile.ep_msm = "Yes"
	docAREventProfile.ep_msmcustomcollection = "Yes"
	
	'Updated 09/24/08 by TV to build different formulas for different geos
	'Updated 09/30/09 by RWS to allow for all registration docs to be exported to Siebel
	' msmexported is on the AR Enrollment form with a default of "No"
	Select Case docAREventProfile.ep_eventgeo(0)
	Case "Americas","North America":
'		strFormula = {Form = 'arenrollall' & msmexported = 'No' & (ar_country = 'United States' | ar_country = 'USA' | ar_country = 'US' | ar_country = 'Canada' | ar_country = 'Puerto Rico') & ar_referenceid = '} &Cstr(docEventProfile.ep_id(0)) & {' & (ar_regtype = 'Customer/Delegate' | ar_regtype  = 'Business Partner') & ar_regstatus = 'Attended'}
		strFormula = {Form = 'arenrollall' & msmexported = 'No' & (ar_country = 'United States' | ar_country = 'USA' | ar_country = 'US' | ar_country = 'Canada' | ar_country = 'Puerto Rico') & ar_referenceid = '} &Cstr(docEventProfile.ep_id(0)) & {' & (ar_regtype = 'Customer/Delegate' | ar_regtype  = 'Business Partner') }
	Case Else
'		strFormula = {Form = 'arenrollall' & msmexported = 'No' & ar_referenceid = '} &Cstr(docEventProfile.ep_id(0)) & {' & (ar_regtype = 'Customer/Delegate' | ar_regtype  = 'Business Partner') & ar_regstatus = 'Attended'}			
		strFormula = {Form = 'arenrollall' & msmexported = 'No' & ar_referenceid = '} &Cstr(docEventProfile.ep_id(0)) & {' & (ar_regtype = 'Customer/Delegate' | ar_regtype  = 'Business Partner') }		
	End Select
	
	'Configure the Registration file fields
	docAREventProfile.re_in_isource = |isource::30|
	docAREventProfile.co_isource = |Yes|
	
	'This identifies the script file used to import data via the Web2CRM process
	'It has been left as GSWERP because currently GRP can use the same script as already exists for GSWERP
	docAREventProfile.x_isource = |GSWERP|
	
	docAREventProfile.re_in_iordnum = |iordnum::20|
	docAREventProfile.x_iordnum = |ar_attendeeid|
	
	docAREventProfile.re_in_nfname = |nfname::35|
	docAREventProfile.x_nfname = |ar_first|
	
	docAREventProfile.re_in_nlname = |nlname::35|
	docAREventProfile.x_nlname = |ar_last|
	
	docAREventProfile.re_in_ncompany = |ncompany::35|
	docAREventProfile.x_ncompany = |ar_companyname|
	
	docAREventProfile.re_in_nadline1 = |nadline1::35|
	docAREventProfile.x_nadline1 = |ar_address1|
	
	docAREventProfile.re_in_nadline2 = |nadline2::35|
	docAREventProfile.x_nadline2 = |ar_address2|
	
	docAREventProfile.re_in_ncity = |ncity::35|
	docAREventProfile.x_ncity = |ar_city|
	
	docAREventProfile.re_in_nstate = |nstate::18|
	docAREventProfile.x_nstate = |ar_state|
	
	docAREventProfile.re_in_nzip = |nzip::10|
	docAREventProfile.x_nzip = |ar_zip|
	
	docAREventProfile.re_in_ncountry = |ncountry::30|
	docAREventProfile.x_ncountry = |ar_country|
	
	docAREventProfile.re_in_nphone = |nphone::31|
	docAREventProfile.x_nphone = |ar_phone|
	
	docAREventProfile.re_in_nfax = |nfax::31|
	docAREventProfile.x_nfax = |ar_fax|
	
	docAREventProfile.re_in_nelecadr = |nelecadr::60|
	docAREventProfile.x_nelecadr = |ar_email|
	
	docAREventProfile.re_in_ncourtesy = |ncourtesy::10|
	docAREventProfile.x_ncourtesy = |ar_prefix|
	
	docAREventProfile.re_in_nmiddle = |nmiddle::15|
	docAREventProfile.x_nmiddle = |ar_middle|
	
	docAREventProfile.re_in_njobtitle = |njobtitle::40|
	docAREventProfile.x_njobtitle = |ar_title|
	
	docAREventProfile.re_in_cprivacy = |cprivacy::1|
	docAREventProfile.x_cprivacy = |@If(ar_privacyno != "";"Y";"")|
	
	docAREventProfile.re_in_wwscore = |wwscore::4|
	docAREventProfile.x_wwscore = |@If(ar_privacyyes != "";"Y";"")|
	
	strTemp = docEventProfile.BATMPID(0)
	If Not Instr(strTemp,";") = 0 Then
		strTemp = Mid(strTemp, 1, Instr(strTemp,";") - 1)
	End If
	
	docAREventProfile.re_in_icampaign = |icampaign::30|
	docAREventProfile.co_icampaign = "Yes"
	docAREventProfile.x_icampaign = strTemp
	
	'End of configure the Registration file fields
	
	
	'Configure the Answer file fields
'	intCurrIndex = 5
'	Redim strarrQAs(4)
'	intCurrIndex = 12
'	Redim strarrQAs(11)
'	intCurrIndex = 16 'optInOptOut3 'OIOO_TYPE
'	Redim strarrQAs(15)
	intCurrIndex = 17 'pronunciation
	Redim strarrQAs(16)
	
	'Always fill in the first four items:
	'Always fill in the first five items:
	'Q_EVENT_NAME
	'Q_EVENTCITY
	'Q_IBMREPCALL
	'Q_BUCKET_NAME
	'Q_JOBROLE
	
	strTacticCode = docEventProfile.tactic(0)
	
	Select Case Len(strTacticCode)
	Case 8:
		'Load Q_EVENT_NAME qtag
		strCountryCode = docEventProfile.countrycode(0)
		If (strCountryCode = |BE| Or strCountryCode = |LX|) Then		' 2010.09.09, Jamie requested this new requirement.  -rws
			strCountryCode = |BELUX|
		End If
		If (strCountryCode = |AU| Or strCountryCode = |NZ|) Then		' 2010.09.09, Jamie requested this new requirement.  -rws
			strCountryCode = |ANZ|
		End If
		If (strCountryCode = |US| Or strCountryCode = |CA|) Then
			strCountryCode = |NA|
		End If
		
		strarrQAs(0) = |Q_EVENT_NAME~~| + strTacticCode + | - | & strCountryCode & | - | + docEventProfile.BATTacticname(0) + |~~doccreated~~None~~None~~Yes~~|
		
		'Load Q_EVENTCITY qtag
		strarrQAs(1) = |Q_EVENTCITY~~| + docEventProfile.loc_confcity(0) + |~~doccreated~~None~~None~~Yes~~| 
		
		'Load Q_IBMREPCALL qtag
		strarrQAs(2) = |Q_IBMREPCALL~~ar_acore1~~doccreated~~None~~None~~~~|
		
		'Load Q_BUCKET_NAME qtag
		strarrQAs(3) = |Q_BUCKET_NAME~~| & |@if(ar_acore1 = "Y";"| & docEventProfile.ep_HotTacticCode(0) & | - | & strCountryCode & | - Not available| & |";"| & docEventProfile.ep_WarmTacticCode(0) & | - | & strCountryCode & | - Not available| + |")~~doccreated~~None~~None~~~~|
		
		'Load Q_JOBROLE qtag   'from getAnsFieldsConfiguration() in AR Agent:   '  iquesnum ~~ tanswer ~~ tschange ~~ tconstant
		' Q_JOBROLE while now a core field it is coming thru optional  quetion #20
		strarrQAs(4) = |Q_JOBROLE~~ar_question20~~doccreated~~None~~None~~~~|	
		
		'New Stuff, Q_REGSTATUS
		strarrQAs(5) = |Q_REGSTATUS~~ar_adFormstatus~~doccreated~~None~~None~~~~|	
		
		'Opt In / Opt Out
		strarrQAs(6) = |XSYS:OIEMAIL~~ar_OIEMAIL~~doccreated~~None~~None~~~~|		
		strarrQAs(7) = |XSYS:OITELE~~ar_OITELE~~doccreated~~None~~None~~~~|	
		strarrQAs(8) = |XSYS:OIPOSTAL~~ar_OIPOSTAL~~doccreated~~None~~None~~~~|
		strarrQAs(9) = |XSYS:OOEMAIL~~ar_OOEMAIL~~doccreated~~None~~None~~~~|	
		strarrQAs(10) = |XSYS:OOTELE~~ar_OOTELE~~doccreated~~None~~None~~~~|	
		strarrQAs(11) = |XSYS:OOPOSTAL~~ar_OOPOSTAL~~doccreated~~None~~None~~~~|	
		
		%REM  'optInOptOut3		' implemented 2010.04.06
			chat from Thierry, copying in a chat from Jamie, field names expected, NO PREFIX, i.e. XSYS required
			4:25:26 PM: Jamie Wallace: NC_EMAIL, NC_POSTAL, NC_TELE
		%END REM
		strarrQAs(12) = |NC_EMAIL~~ar_NC_EMAIL~~doccreated~~None~~None~~~~|
		strarrQAs(13) = |NC_POSTAL~~ar_NC_POSTAL~~doccreated~~None~~None~~~~|
		strarrQAs(14) = |NC_TELE~~ar_NC_TELE~~doccreated~~None~~None~~~~|
		
		'OIOO_TYPE
		strarrQAs(15) = |OO_OI_TYPE~~ar_optInOutType~~doccreated~~None~~None~~~~|	
		
		'pronunciation 
		strarrQAs(16) = |Q_KATAKANA~~ar_pronunciation~~doccreated~~None~~None~~~~|	

	Case Else
		
		Error ERR_SYSTEM_ERROR, |Unexpected tactic code length for tactic code. [| & strTacticCode & |] for event with event ID [| & docEventProfile.ep_id(0) & |].|	
		
	End Select
	
	docAREventProfile.tcodecountry = strCountryCode
	docAREventProfile.primarytcode = strTacticCode
	docAREventProfile.primarytcodename = docEventProfile.BATTacticname(0)
	docAREventProfile.warmtcode = docEventProfile.ep_WarmTacticCode(0)
	docAREventProfile.warmtcodename = |Not available|
	docAREventProfile.hottcode = docEventProfile.ep_HotTacticCode(0)
	docAREventProfile.hottcodename = |Not available|
	
	'If the event profile specifies to also send MI data then add additional Q tags for all selected questions
	intQTagsIndex = 0
	If docEventProfile.ep_SendMIAnswersToCRM(0) = "Yes" Then
		'TODO: Review with Bhakty what this formula does
		strFormula =  strFormula & " & (!@Contains(ar_question10;'G') & !@Contains(ar_question10;'H'))"
		
		Call GetQTags(docEventProfile, strarrQTags(), intCountQTags)
		
		For intCurrQuestion = 1 To intCountQTags
			strIncluded = docAREventProfile.GetItemValue(|epma_question| & Cstr(intCurrQuestion))(0)
			'Include all questions in test mode
			If (g_strSystemMode = |Test|) Then
				strIncluded = |Yes|
			End If
			If strIncluded <> "" Then
				Redim Preserve strarrQAs(intCurrIndex)
				strarrQAs(intCurrIndex) = strarrQTags(intQTagsIndex) + |~~ar_question| + Cstr(intCurrQuestion) + |~~doccreated~~None~~None~~~~| 
				intCurrIndex = intCurrIndex + 1			
				intQTagsIndex = intQTagsIndex + 1
			End If
		Next
	End If
	
	docAREventProfile.ep_collectionformula = strFormula
	Call docAREventProfile.ReplaceItemValue(|x_a_fieldspair|, strarrQAs())
	
	Call Debug(STR_MODULE_NAME & |: Start of QA list.|)
	Forall varItem In strarrQAs()
		Call Debug(STR_MODULE_NAME & |: [| & Cstr(varItem) & |]|)	
	End Forall		
	Call Debug(STR_MODULE_NAME & |: End of QA list.|)
	
	'End of configure the Answer file fields
	
	docAREventProfile.e_iquesnum = "15"
	docAREventProfile.e_tschange = "26"
	docAREventProfile.e_tanswer = "250"
	
	'Add a timestamp to indicate when the update occurred
	Set docAREventProfile.ep_DateUpdatedByGRPWeb2CRM = dtNow	
	
	'Only save if in production mode
	If (g_strSystemMode = |Production|) Then
		Call docAREventProfile.ComputeWithForm(True, True)
		Call docAREventProfile.Save(True, False)
		Call Debug(STR_MODULE_NAME & |: Event profile for event ID [| & Cstr(docEventProfile.ep_id(0)) & |] was updated in Attendee Repository.|) 		
	Else
		Call Debug(STR_MODULE_NAME & |: System is in TEST mode.  Event profile for event ID [| & Cstr(docEventProfile.ep_id(0)) & |] was NOT updated in Attendee Repository.|) 
	End If
	
	intRC = INT_UPDATED
	
lblExit:
	
	'Set the return value
	intReturnCode = intRC
	
	Call Debug(STR_MODULE_NAME & |: Finished.  Return code [| & Cstr(intRC) & |]|) 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:PrintSelectedBadges:1:8
Sub PrintSelectedBadges(flgIsSpeaker As Integer)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Print the selected badges.
	'
     'Parameters
     '-----------------------
	'flgIsSpeaker		Print speaker badges
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PrintSelectedBadges|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCountSelected As Integer
	Dim intCount As Integer
	Dim strMsg As String
	Dim intReply As Integer
	
	'Trap errors
	On Error Goto lblError
	
	'Find out how many documents are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Call ShowInfoMsg(|Please select the badge to print.|)
		Goto lblExit
		
	Case 1:
		intReply = intAskQuestion(|Do you want to print the selected badge?|)
		
		If (intReply <> 6) Then
			Goto lblExit
		End If
		
	Case Else
		Call ShowInfoMsg(|Only one badge at a time can be printed.  Please select the badge to print.|)
		Goto lblExit
		
'		intReply = intAskQuestion(|Do you want to print the | & Cstr(intCountSelected) & | selected badges?|)
		
'		If (intReply <> 6) Then
'			Goto lblExit
'		End If		
		
	End Select
	
	If (Not coll Is Nothing) Then
		
		Print |Started.|
		
		Call Debug(STR_MODULE_NAME & |: Printing | & Cstr(coll.Count) & | badge(s)...|)
		
		Set docCurr = coll.GetFirstDocument()
		
		While Not(docCurr Is Nothing)
			
			'Update the count of badges processed
			intCount = intCount + 1
			
			Print |Printing badge for | & Cstr(docCurr.en_badgefirstname(0)) & | | & Cstr(docCurr.en_badgelastname(0)) 
			
			'Try to print the badge
			Call PrintBadge(docCurr, flgIsSpeaker)
			
			'Add a timestamp
			docCurr.DateBadgePrinted = Now()
			Call docCurr.Save(True, False)
			
lblNextDoc:
			
			'Get the next document
			Set docCurr = coll.GetNextDocument(docCurr)
			
		Wend
		
		Call uiviewCurr.DeselectAll 
		
		strMsg = Cstr(intCount) & | badge(s) processed.  | 
		
		Print |Finished.  | & strMsg
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No badges were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFourColumnsSpan_Radio:6:8
%REM
	Sub CreateTableFourColumnsSpan_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableFourColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 4) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			str_HTML = str_HTML & Chr(13) & |</div>|
		End If
		
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:docGetEventProfile:1:8
Function docGetEventProfile(strEventID As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given an event ID, return the event profile for the event.
	'
	'Parameters
	'----------------
	'strEventID					The event ID to check.
	'
	'Return Value
	'-------------------
	'If an event profile exists in this database for the event ID the event profile is returned.
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEventProfile|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vwEventProfile|
	
	Dim strKey As String
	Dim view As NotesView
	Dim docEventProfile As NotesDocument
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether event profile exists for event ID [| & strEventID & |]|) 
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	'Build a key
	strKey = strEventID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strKey & |].|) 
	
	Set docEventProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docEventProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set docGetEventProfile = docEventProfile
	
	Exit Function
	
lblError:
	
	Set docEventProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strGetTranslation:1:8
Function strGetTranslation(docLocaleProfile As NotesDocument, strTextToTranslate As String, strTranslationsFieldName As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a locale profile, some locale specific text and the name of the 
	'field in the locale profile that is used to do the translation, find the English 
	'translation of the supplied text.
	'
	'Translations are stored in the locale profile in the format:
	'
	'Locale specifc text A~English translation of A
	'Locale specifc text B~English translation of B
	'Locale specifc text C~English translation of C	
	'etc...
	'
     'Parameters
     '-----------------------
	'docLocaleProfile					The locale profile
	'strTextToTranslate					The text to translate
	'strTranslationsFieldName		The name of the field in the locale profile that is used to do the translation
     '     
     'Return Values
     '-----------------------
     'The name of the email.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetTranslation|
	
	Dim strTranslatedText As String
	Dim strValue As String
	Dim strLocaleSpecificText As String
	
	'Trap errors
	On Error Goto lblError
	
	'By default, return the supplied text
	strTextToTranslate = Trim(strTextToTranslate)
	strTranslatedText = strTextToTranslate
	
	Forall varValue In docLocaleProfile.GetItemValue(strTranslationsFieldName)
		strValue = Cstr(varValue)
		strLocaleSpecificText = Strleft(strValue, |~|)
		If (strTextToTranslate = strLocaleSpecificText) Then
			strTranslatedText = Strright(strValue, |~|)
			Exit Forall
		End If
	End Forall
	
lblExit:
	
	strGetTranslation = strTranslatedText
	
	Exit Function 
	
lblError:
	
	strTranslatedText = strTextToTranslate
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl  & | Text to Translate | & strTextToTranslate)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl   & | Text to Translate | & strTextToTranslate)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:getGraphicTable:1:8
Function getGraphicTable(doc As NotesDocument) As String
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a registration profile or a landing page profile, format the html that
	'displays the graphic selected in the profile.
     '
     'Parameters
     '----------------
     'doc					The document.
	'
     'Return Values
     '-------------------
     'The html used to display the graphic.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |getGraphicTable|
	
	'Trap errors
	On Error Goto lblError
	
	Dim strTable As String
	Dim strIMG As String
	
	strTable = ""
	
	'*** REGISTRATION PAGE ***
	If doc.rp_graphic(0) <> "" Then
		'Build IMG tag
		strIMG = |<img border="0" src="| + g_strWebPath + |/LookupElementsImage/| + doc.rp_graphic(0) + |/$FILE/| + doc.rp_dblookup_graphic(0) + |" alt="| + doc.rp_dblookup_graphicALT(0) + |"  />|
		'Build the table tag
		strTable = |<table width="443" cellpadding="0" cellspacing="0" border="0"><tr>|
		'Is there text on the right side of image
		If doc.rp_graphictext(0) <>"" Then
			'There is text
			strTable = strTable & |<td width="150">| + strIMG + |</td><td width="10">&nbsp;</td><td>| + doc.rp_graphictext(0) + |</td></tr><tr><td colspan="3"><img src="//www.ibm.com/i/c.gif" width="1" height="10" alt="" /></td>|
		Else
			'No text
			strTable = strTable & |<td>| + strIMG + |</td></tr><tr><td><img src="//www.ibm.com/i/c.gif" width="1" height="10" alt="" /></td>|
		End If		
		strTable = strTable & |</tr></table>|
	End If
	
	'*** LANDING PAGE ***
	If doc.lp_graphic(0) <> "" Then
		'Build IMG tag
		strIMG = |<img border="0" src="| + g_strWebPath + |/LookupElementsImage/| + doc.lp_graphic(0) + |/$FILE/| + doc.lp_dblookup_graphic(0) + |" alt="| + doc.lp_dblookup_graphicALT(0) + |"  />|
		'Build the table tag
		strTable = |<table width="443" cellpadding="0" cellspacing="0" border="0"><tr><td>|
		'Is there text on the right side of image
		If doc.lp_graphictext(0) <>"" Then
			'There is text
			strTable = strTable & |<td width="150">| + strIMG + |</td><td width="10">&nbsp;</td><td>| + doc.lp_graphictext(0) + |</td></tr><tr><td colspan="3"><img src="//www.ibm.com/i/c.gif" width="1" height="10" alt="" /></td>|
		Else
			'No text
			strTable = strTable & |<td>| + strIMG + |</td></tr><tr><td><img src="//www.ibm.com/i/c.gif" width="1" height="10" alt="" /></td>|
		End If		
		strTable = strTable & |</tr></table>|
	End If
	
lblExit:
	
	'Send it back
	getGraphicTable = strTable
	
	Call Debug(STR_MODULE_NAME & |: Start of graphic table html|)
	Call Debug(STR_MODULE_NAME & strTable)	
	Call Debug(STR_MODULE_NAME & |: End of graphic table html|)	
	
	Exit Function
	
lblError:
	
	strTable = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:DeleteEvent:1:8
Sub DeleteEvent()
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Delete all of the event profile documents that are selected in the current view.
	'Find and delete their related event documents (agendas, speaker, sponsor pages etc.)
	'
	'NOTE:	This routine is designed to be called from the 'Delete Event' action.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |DeleteEvent|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupAllByEventID|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCurrDoc As Integer
	Dim intCountSelected As Integer
	Dim intCount As Integer
	Dim intCountDeleted As Integer
	Dim intCountNotDeleted As Integer
	Dim flgOKToDelete As Integer
	Dim intReason As Integer
	Dim strMsg As String
	Dim intReply As Integer
	Dim view As NotesView
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry
	Dim entryNext As NotesViewEntry
	Dim docToRemove As NotesDocument	
	Dim intCountRelated As Integer
	Dim strKey As String
	Dim doc As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	intCount = 0
	
	'Find out how many event profiles are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	
	'Check that only event profile are selected
	If (Not coll Is Nothing) Then		
		Set doc = coll.GetFirstDocument
		While Not (doc Is Nothing)
			If (doc.DocType(0) <> |Event Profile|) Then
				Call ShowInfoMsg(|Please select ONLY the Event information document for the event(s) you want to delete.|)
				Goto lblExit
			End If
			Set doc = coll.GetNextDocument (doc)
		Wend
	End If
	
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the Event information document for the event(s) you want to delete.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			intCountSelected = Cint(coll.Count)			
			
			intReply = intAskQuestion(|Do you want to delete the selected event, all of its associated configuration documents and registrations and remove it from the home database?|)
			
			If (intReply <> IDYES) Then
				Goto lblExit
			End If	
		End If
		
	Case 1:
		intReply = intAskQuestion(|Do you want to delete the selected event, all of its associated configuration documents and registrations and remove it from the home database?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If
		
	Case Else
		intReply = intAskQuestion(|Do you want to delete the | & Cstr(intCountSelected) & | selected events, all of their associated configuration documents and registrations and remove them from the home database?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If		
		
	End Select
	
	If (Not coll Is Nothing) Then
		
		Print |Started.|
		
		'Get the view used to find event related documents
		Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(coll.Count) & | event profile(s)...|)
		
		For intCurrDoc = 1 To intCountSelected
			
			Set docCurr = coll.GetNthDocument(intCurrDoc)		
			
			intCount = intCount + 1
			
			flgOKToDelete = flgIsDeleteAllowed(docCurr, intReason)
			
			If (Not flgOKToDelete) Then
				
				strMsg = |You cannot delete the event '| & Cstr(docCurr.eventname(0)) & |' | & | because |
				
				Select Case intReason
					
				Case INT_NOT_IN_REQUIRED_ROLE:
					strMsg = strMsg & |you are not in any of the roles that are allowed to delete events.|
					
				Case Else
					strMsg = strMsg & |of an unknown reason.|
					
				End Select
				
				Call ShowErrorMsg(strMsg)
				
				intCountNotDeleted = intCountNotDeleted + 1
				
			Else
				
				'Find all related event documents and delete them
				intCountRelated = 0
				
				'Build a key based on the event ID
				strKey = docCurr.ep_id(0)
				
				'Find all event related documents
				Set vc = view.GetAllEntriesByKey(strKey, True)
				
				If (Not vc Is Nothing) Then
					Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | document(s) related to this event...|)
					
					Set entry = vc.GetFirstEntry()
					
					While Not(entry Is Nothing)
						
						'Get the associated document
						Set entryNext = vc.GetNextEntry(entry)
						Set docToRemove = entry.Document
						
						'Remove the document
						Call docToRemove.Remove(True)
						
						'Update the count of documents processed
						intCountRelated = intCountRelated + 1
						
						'Get the next document
						Set entry = entryNext
						
					Wend
					
					Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountRelated) & | related document(s) deleted.|)
					
				Else
					
					Call Debug(STR_MODULE_NAME & |: No related documents were found.|)
					
				End If
				
				'Remove the event from the home database
				'Call UpdateHomeDb(docCurr, INT_REMOVE)
				
				'Now remove the event profile
				Call docCurr.Remove(True)
				
				Call Debug(STR_MODULE_NAME & |: Event profile deleted.|)
				
				intCountDeleted = intCountDeleted + 1
				
			End If
			
		Next
		
		Call uiviewCurr.DeselectAll 
		Call ws.ViewRefresh
		
		strMsg = Cstr(intCount) & | event|
		If (intCount <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & | processed.  | & Cstr(intCountDeleted) & | event|
		If (intCountDeleted <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & | successfully deleted.  | 
		If (intCountNotDeleted > 0) Then
			strMsg = strMsg & Cstr(intCountNotDeleted) & | event|
			If (intCountNotDeleted <> 1)	 Then
				strMsg = strMsg & |s|
			End If
			strMsg = strMsg & | not deleted.| 
		End If		
		
		Print |Finished.  | & strMsg
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No event profiles were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableTwoColumns_Radio:7:8
%REM
	Sub CreateTableTwoColumns
	Description: Version 2.0.
%END REM
Sub CreateTableTwoColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String, _
	str_colWidth As String, str_col2Float As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-two-column">
<div class="ibm-column ibm-list-container ibm-first" style="width:| & str_colWidth & |px">| & Chr(13)
	
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second" style="float:| & str_col2Float & |;width:| & str_colWidth & |px">| & Chr(13)

	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableEightColumnsVer1_2:6:8
%REM
	Sub CreateTableEightColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableEightColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-8 (Track 6-8)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-8 (Track 6-8)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:flgDefaultEmailExists:1:8
Function flgDefaultEmailExists(docEmailTemplate As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an e-mail template, check whether a default e-mail template already exists 
	'for that e-mail type and locale.
	'
     'Parameters
     '-----------------------
     'docEmailTemplate 			The e-mail template.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgDefaultEmailExists|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupDefaultEmailTemplate|
	
	Dim flgExists As Boolean
	Dim view As NotesView	
	Dim docDefaultEmailTemplate As NotesDocument
	Dim strKey As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code
	flgExists = False
	
	strKey = docEmailTemplate.et_Type(0) & docEmailTemplate.et_Locale(0)
	
	Call Debug(STR_MODULE_NAME & |: Checking e-mail template [| & strKey & |].|)
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docDefaultEmailTemplate = view.GetDocumentByKey(strKey , True)
	
	'Check to see if this enrollment doc already exists, if so stop the save and display the dup form
	If docEmailTemplate.IsNewNote And Not (docDefaultEmailTemplate Is Nothing) Then
		flgExists = True
	End If
	
lblExit:
	
	flgDefaultEmailExists = flgExists
	
	If (flgExists) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Existing default e-mail template found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  No default e-mail template found.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgExists = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableEightColumnsVer1_1:6:8
%REM
	Sub CreateTableEightColumns
	Description: Version 1.1.
%END REM
Sub CreateTableEightColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Dim fCtr As Integer
	
	Call CreateTableSixColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, doc_enrollForm)
	
	' Set field names for column 7 & 8 (Track 7 & 8)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 7-8 (Track 7-8)
	For s = 1 To (sCtr - 1)
		
		str_t = "7"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			str_HTML = str_HTML & |<h3>&nbsp;</h3>|
			
			str_HTML = str_HTML & Chr(13) & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)	
		
		sCtr = sCtr + 1
	Next
	
End Sub

'++LotusScript Development Environment:2:2:PublishWeb2CRMToARConfigurations:1:8
Sub PublishWeb2CRMToARConfigurations()
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Find all event profiles that are ready to be configured for Web2CRM in AR
     '
     'Parameters
     '-----------------------
     'None
     '     
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PublishWeb2CRMToARConfigurations|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEventsWeb2CRMexported2AR|
	
	Dim view As NotesView
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry
	Dim entryNext As NotesViewEntry
	Dim docCurr As NotesDocument
	Dim intCount As Integer
	Dim intCountUpdated As Integer	
	Dim intCountErrors As Integer
	Dim intRC As Integer
	Dim dtNow As New NotesDateTime("")
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Set the date/time used to timestamp the event profiles
	dtNow.SetNow
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	intCount = 0
	intCountUpdated = 0
	
	'Get a collection of all entries
	Set vc = view.AllEntries
	
	If (Not vc Is Nothing) Then
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | event profile(s)...|)
		
		Set entry = vc.GetFirstEntry()
		
		While Not(entry Is Nothing)
			
			'Get the associated document
			Set entryNext = vc.GetNextEntry(entry)
			Set docCurr = entry.Document
			
			'Attempt to create an event profile in Attendee Repository
			Call PublishWeb2CRMEvent(docCurr, intRC)
			
			Select Case intRC
				
			Case INT_UPDATED:
				
				intCountUpdated = intCountUpdated + 1	
				docCurr.ep_Web2CRMInfoSentToAR = "Yes"
				Set docCurr.ep_DateWeb2CRMInfoSentToAR = dtNow
				Call UpdateAudit(docCurr, |System|, |Attendee Repository profile updated with CRM Siebel information.|)		
				Call UpdateAudit(docCurr, |System|, |Attendee Repository notified that registrations are ready to be sent to CRM Siebel.|)
				
				'Only save if in production mode
				If (g_strSystemMode = |Production|) Then
					Call docCurr.Save(True, False)
					Call Debug(STR_MODULE_NAME & |: Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was marked as having sent its CRM information to Attendee Repository.|) 		
				Else
					Call Debug(STR_MODULE_NAME & |: System is in TEST mode.  Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was NOT marked as having sent its CRM information to Attendee Repository.|) 
				End If
				
			Case Else
				
				intCountErrors = intCountErrors + 1	
				
			End Select
			
			'Update the count of documents processed
			intCount = intCount + 1
			
			'Get the next document
			Set entry = entryNext
			
		Wend
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No event profiles were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCount) & | event profile(s) processed. | & Cstr(intCountUpdated) & | processed successfully. | & Cstr(intCountErrors) & | error(s).|)
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:2:ShowInfoMsg:1:8
Sub ShowInfoMsg(strMsg As String)
   '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Display a message box with an Information Icon.
	'
     'Parameters
     '-----------------------
     'strMsg		The message to display.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	'NOTE: 64 = MB_ICONINFORMATION 
	
	Messagebox strMsg, 64, g_strSystemName
	
End Sub

'++LotusScript Development Environment:2:1:docGetSpeakersByBriefIDandLocale:1:8
Function docGetSpeakersByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and a locale, check whether a speakers document exists for the
	'event and locale.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'docEventProfile				The event profile to check.
	'strLocale						The locale to check.
	'
     'Return Value
     '-------------------
     'If a speakers document exists for the event and locale return a handle to it.
	'Otherwise retun Nothing.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetSpeakersByBriefIDandLocale|
	
	Dim docSpeakers As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView
	Dim strKey As String
	
	Set view = g_dbCurr.GetView(|vLookupSpeakersByIDLocale|)
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docSpeakers = view.GetDocumentByKey(strKey , True)
	
lblExit:
	
	Set docGetSpeakersByBriefIDandLocale = docSpeakers
	
	Exit Function
	
lblError:
	
	Set docSpeakers = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableFiveColumns:6:8
%REM
	Sub CreateTableFiveColumns
	Description: Version 2.0.
%END REM
Sub CreateTableFiveColumns(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields4(1 To 1) As String
	Redim str_Fields5(1 To 1) As String
	Redim str_Fields4Name(1 To 1) As String
	Redim str_Fields5Name(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 4 & 5 (Track 4 & 5)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields4(1 To fCtr)
			Redim Preserve str_Fields5(1 To fCtr)
			Redim Preserve str_Fields4Name(1 To fCtr)
			Redim Preserve str_Fields5Name(1 To fCtr)
			str_Fields4(fCtr) = |en_d| & str_d & |t4s| & Cstr(s) & |tc|
			str_Fields5(fCtr) = |en_d| & str_d & |t5s| & Cstr(s) & |tc|
			str_Fields4Name(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_Fields5Name(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 4-5 (Tracks 4-5)
	For s = 1 To (sCtr - 1)
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields4(s)
		str_FieldName = str_Fields4Name(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields5(s)
		str_FieldName = str_Fields5Name(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:docCopySponsorsPage:1:8
Function docCopySponsorsPage(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Allow the user to choose a sponsors page to copy, then make a copy of
	'that sponsors page for the supplied locale.
     '
     'Parameters
     '-----------------------
	'docEventProfile				The event profile that the sponsors page will be associated with.
	'strLocale						The locale of the sponsors page to create.
     '     
     'Return Values
     '-----------------------
     'The newly created sponsors page or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCopySponsorsPage|
	
	Dim ws As New NotesUIWorkspace
	Dim colSponsorsPages As NotesDocumentCollection
	Dim docSponsorsPage As NotesDocument
	Dim docNewSponsorsPage As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Set colSponsorsPages = ws.PickListCollection(PICKLIST_CUSTOM, False, g_dbCurr.Server, g_dbCurr.FilePath, "vDialogSelectSponsorPage", "Select a sponsors page", "Please select a sponsors page to copy from.")
	
	If (colSponsorsPages.Count > 0) Then		
		
		Set docSponsorsPage = colSponsorsPages.GetFirstDocument
		
		Print |Copying the | & docSponsorsPage.LocaleName(0) & | sponsors page from the '| & docSponsorsPage.eventname(0) & |' event...|
		
		'Create a new speakers page with values from the event profile
		Set docNewSponsorsPage = docCreateSponsorsPage(docEventProfile, strLocale)
		
		'Copy the rest of the values from the sponsors page we are copying
		docNewSponsorsPage.showgraphic = docSponsorsPage.showgraphic(0)		
		docNewSponsorsPage.abs_info = docSponsorsPage.abs_info(0)
		docNewSponsorsPage.includeabs = docSponsorsPage.includeabs(0)
		docNewSponsorsPage.sp_sectiontitle = docSponsorsPage.sp_sectiontitle(0)
		docNewSponsorsPage.sponsorcountchoice = docSponsorsPage.sponsorcountchoice(0)
		docNewSponsorsPage.sponsorcount = docSponsorsPage.sponsorcount(0)		
		
		docNewSponsorsPage.sponsorname1 = docSponsorsPage.sponsorname1(0)
		docNewSponsorsPage.sponsor1 = docSponsorsPage.sponsor1(0)
		docNewSponsorsPage.sponsorname2 = docSponsorsPage.sponsorname2(0)
		docNewSponsorsPage.sponsor2 = docSponsorsPage.sponsor2(0)
		docNewSponsorsPage.sponsorname3 = docSponsorsPage.sponsorname3(0)
		docNewSponsorsPage.sponsor3 = docSponsorsPage.sponsor3(0)
		docNewSponsorsPage.sponsorname4 = docSponsorsPage.sponsorname4(0)
		docNewSponsorsPage.sponsor4 = docSponsorsPage.sponsor4(0)
		docNewSponsorsPage.sponsorname5 = docSponsorsPage.sponsorname5(0)
		docNewSponsorsPage.sponsor5 = docSponsorsPage.sponsor5(0)
		docNewSponsorsPage.sponsorname6 = docSponsorsPage.sponsorname6(0)
		docNewSponsorsPage.sponsor6 = docSponsorsPage.sponsor6(0)
		docNewSponsorsPage.sponsorname7 = docSponsorsPage.sponsorname7(0)
		docNewSponsorsPage.sponsor7 = docSponsorsPage.sponsor7(0)
		docNewSponsorsPage.sponsorname8 = docSponsorsPage.sponsorname8(0)
		docNewSponsorsPage.sponsor8 = docSponsorsPage.sponsor8(0)
		docNewSponsorsPage.sponsorname9 = docSponsorsPage.sponsorname9(0)
		docNewSponsorsPage.sponsor9 = docSponsorsPage.sponsor9(0)
		docNewSponsorsPage.sponsorname10 = docSponsorsPage.sponsorname10(0)
		docNewSponsorsPage.sponsor10 = docSponsorsPage.sponsor10(0)
		
		Call docNewSponsorsPage.ComputeWithForm(True, True)	
		
		Print |Sponsors page copied.|
		
		Call Debug(STR_MODULE_NAME & |: Sponsors page copied for event with ID [| & Cstr(docEventProfile.ep_id(0)) & |].|)
		
	End If
	
lblExit:
	
	Set docCopySponsorsPage = docNewSponsorsPage	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docNewSponsorsPage = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetOptInOptOutFields:1:8
Sub GetOptInOptOutFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetOptInOptOutFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |oi|, |privacyyes|, arrExportFields())	
	Call GetExportField(docCurr, |oi|, |privacyno| , arrExportFields())	
	
	'OptInOptOutFields
	Call GetExportField(docCurr, |oi|, |en_oiemail| , arrExportFields())	
	Call GetExportField(docCurr, |oi|, |en_ooemail| , arrExportFields())	
	
	Call GetExportField(docCurr, |oi|, |en_oipostal| , arrExportFields())	
	Call GetExportField(docCurr, |oi|, |en_oopostal| , arrExportFields())	
	
	Call GetExportField(docCurr, |oi|, |en_oitele| , arrExportFields())	
	Call GetExportField(docCurr, |oi|, |en_ootele| , arrExportFields())	
	
	'optInOptOut3, export		' implemented weekend of 2010.04.12
	%REM  NC_EMAIL, NC_POSTAL, NC_TELE
	%END REM
	Call GetExportField(docCurr, |oi|, |NC_HIDDEN_EMAIL| , arrExportFields())	
	Call GetExportField(docCurr, |oi|, |NC_HIDDEN_PHONE| , arrExportFields())	
	Call GetExportField(docCurr, |oi|, |NC_HIDDEN_POSTAL| , arrExportFields())	
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
	
End Sub

'++LotusScript Development Environment:2:1:docGetAREventProfile:1:8
Function docGetAREventProfile(strEventID As String, intReturnCode As Integer) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID, check whether an event profile exists in the Attendee
	'Repository (AR) database for the specified event ID.
	'If one does, return a handle to it, otherwise return Nothing.
	'Set the return code depending on what happened.
     '
     'Parameters
     '----------------
     'strEventID				The event ID to check.
	'intReturnCode		(Returned) The return code.
	'							One of:
     '								INT_FOUND 							An event profile exists for the event ID
	'								INT_NOT_FOUND 					An event profile does not exist for the event ID
	'								INT_UNKNOWN_REASON		An unexpected error occurred	
	'
     'Return Values
     '-------------------
     'If an event profile exists in Attendee Repository for the event ID the event profile is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetAREventProfile|
	
	Const STR_LOOKUP_VIEW_ALIAS = |lookupepreferenceid|
	
	Dim intRC As Integer		
	Dim strKey As String
	Dim view As NotesView
	Dim docAREventProfile As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether event profile exists in Attendee Repository for event ID [| & strEventID & |]|) 
	
	'Assume not found until proven otherwise
	intRC = INT_NOT_FOUND
	
	'Find the lookup view
	Set g_dbAttendeeRepository = dbGetAttendeeRepositoryDb()
	
	Set view = g_dbAttendeeRepository.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	'Build a key from the supplied event ID
	strKey = strEventID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strKey & |].|) 
	
	Set docAREventProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docAREventProfile Is Nothing) Then
		intRC = INT_FOUND
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		intRC = INT_NOT_FOUND
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.  Return code [| & Cstr(intRC) & |]|) 
	
	intReturnCode = intRC
	
	Set docGetAREventProfile = docAREventProfile
	
	Exit Function
	
lblError:
	
	intRC = INT_UNKNOWN_REASON
	Set docAREventProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CopyToSame:1:8
Sub CopyToSame(docFrom As NotesDocument, strFieldName As String, docTo As NotesDocument)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Copy the contents of the named field in the source document to the same named field in
	'the target document.
	'
	'Parameters
	'-----------------------
	'docFrom 						The document to copy the field from
	'strFieldName				The name of the field to copy from/to
	'docTo	 						The document to copy the field to
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyToSame|
	
	'Trap errors
	On Error GoTo lblError
	
	Call CopyTo(docFrom, strFieldName, docTo, strFieldName)	
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:dbGetInviteeToolDb:1:8
Function dbGetInviteeToolDb()
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Return a handle to the Invitee Tool database.  The location of the
	'database is defined in the Database Profile.
	'
	'Parameters
	'----------------
	'None.
	'
	'Return Values
	'-------------------
	'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetInviteeToolDb|
	
	Dim s As New NotesSession	
	Dim dbInviteeTool As New NotesDatabase("", "")
	Dim strInviteeToolServer As String
	Dim strInviteeToolFilename As String
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'If we already have a handle to the database, return it
	If (Not g_dbInviteeTool Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Invitee Tool database is available.|)
		Set dbInviteeTool = g_dbInviteeTool
	Else
		'Get a handle to the Invitee Tool database
		strInviteeToolServer = CStr(g_docDbProfile.dp_InviteeToolServer(0))
		strInviteeToolFilename = CStr(g_docDbProfile.dp_InviteeToolFilename(0))
		
		Call Debug(STR_MODULE_NAME & |: Invitee Tool server is [| & strInviteeToolServer & |].|)	
		Call Debug(STR_MODULE_NAME & |: Invitee Tool filename is [| & strInviteeToolFilename & |].|)
		
		On Error Resume Next
		
		Set dbInviteeTool = s.GetDatabase(strInviteeToolServer, strInviteeToolFilename, False)
		
		On Error GoTo lblError		
		
		If (dbInviteeTool Is Nothing) Then
			Call dbInviteeTool.Open(strInviteeToolServer, strInviteeToolFilename)
			If dbInviteeTool.IsOpen Then
				Call Debug(STR_MODULE_NAME & |: Invitee Tool database is available.|)
			Else
				Call Debug(STR_MODULE_NAME & |: Unable to find Invitee Tool database.|)	
			End If	
		Else
			Call Debug(STR_MODULE_NAME & |: Invitee Tool database is available.|)
		End If
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetInviteeToolDb = dbInviteeTool
	
	Exit Function
	
lblError:
	
	Set dbInviteeTool = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableTwoColumnsSpan_Radio:6:8
%REM
	Sub CreateTableTwoColumnsSpan_New
	Description: Version 2.0.
%END REM
Sub CreateTableTwoColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-two-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If str_s = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

		If str_s = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		' Close the 2 column track label section
		str_HTML = str_HTML + |
</div>| & Chr(13)
	
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p>| & Chr(13) & |<div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div></div>| & Chr(13)
	
	'str_HTML = str_HTML & Chr(13) & |<div class="ibm-alternate-rule"><hr /></div>| & Chr(13)
	'str_HTML = str_HTML & Chr(13) & |<div class="ibm-container">| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableThreeColumnsSpan_Radio:6:8
%REM
	Sub CreateTableThreeColumnsSpan
	Description: Version 2.0.
%END REM
Sub CreateTableThreeColumnsSpan_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 3) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>| & Chr(13)
			str_HTML = str_HTML & |</div>|
		End If
		
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:dbGetAmenityDb:1:8
Function dbGetAmenityDb() As NotesDatabase
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Return a handle to the Event briefs database.  The location of the
	'database is defined in the Database Profile.
	'
	'Parameters
	'----------------
	'None.
	'
	'Return Values
	'-------------------
	'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetAmenityDb|
	
	Dim s As New NotesSession	
	Dim dbAmenity As New NotesDatabase("", "")
	Dim strAmenityServer As String
	Dim strAmenityFilename As String
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'If we already have a handle to the database, return it
	If (Not g_dbAmenity Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Amenity database is available.|)
		Set dbAmenity = g_dbAmenity
	Else
		'Get a handle to the Event Briefs database
		strAmenityServer = CStr(g_docDbProfile.dp_AmenityServer(0))
		strAmenityFilename = CStr(g_docDbProfile.dp_AmenityFilename(0))
		
		Call Debug(STR_MODULE_NAME & |: Amenity server is [| & strAmenityServer & |].|)	
		Call Debug(STR_MODULE_NAME & |: Amenity filename is [| & strAmenityFilename & |].|)
		
		On Error Resume Next
		
		Set dbAmenity = s.GetDatabase(strAmenityServer, strAmenityFilename, False)
		
		On Error GoTo lblError		
		
		If (dbAmenity Is Nothing) Then
			Call dbAmenity.Open(strAmenityServer, strAmenityFilename)
			If dbAmenity.IsOpen Then
				Call Debug(STR_MODULE_NAME & |: Amenity database is available.|)
			Else
				Call Debug(STR_MODULE_NAME & |: Unable to find Amenity database.|)	
			End If	
		Else
			Call Debug(STR_MODULE_NAME & |: Amenity database is available.|)
		End If
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetAmenityDb = dbAmenity
	
	Exit Function
	
lblError:
	
	Set dbAmenity = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Function

'++LotusScript Development Environment:2:2:UpdateESWebAddress:1:8
Sub UpdateESWebAddress(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile, update its associated ES brief with the GRP web page address.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile backend document
	'uidocEventProfile			The event profile document open in the UI	
	'	
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateESWebAddress|
	
	Dim strEventID As String
	Dim flgOK As Boolean
	Dim strInfoMsg As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Get the event ID from the event profile
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	'Attempt to update the web address in the corrsponding ES brief
	flgOK = flgUpdateESBriefWebAddress(docEventProfile, True)
	
	If (Not flgOK) Then
		Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update the Event Solution Brief for event with ID [| & strEventID & |].|	
	End If
	
	'Save the UI doc so we don't get prompted to save our changes
	Call uidocEventProfile.Save		
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call ShowErrorMsg(Err() & |: | & Error() & | in line | & Erl)		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:UpdateAREventProfile:1:8
Sub UpdateAREventProfile(docESEventBrief As NotesDocument, docEventProfile As NotesDocument, docAREventProfile As NotesDocument, intReturnCode As Integer)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event brief, an event profile in this database and an Attendee Repository event profile,
	'attempt to update the event profile in Attendee Repository (AR) with information from the event brief and
	'event profile.  Set the return code based on what happened.
     '
     'Parameters
     '----------------
     'docESEventBrief			An ES event brief
	'docEventProfile				An event profile
	'docAREventProfile			An AR event profile
	'intReturnCode				(Returned) The return code.
	'									One of:
     '										INT_UPDATED 									The event profile was updated successfully in Attendee Repository
	'										INT_NOT_UPDATED							The event profile could not be updated
	'
     'Return Values
     '-------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateAREventProfile|
	
	Dim intRC As Integer
	Dim dtNow As New NotesDateTime("")
	Dim varResult As Variant
	Dim intCurrQuestion As Integer
	Dim intCurrIndex As Integer
	Dim intLen As Integer
	Dim intPos As Integer
	Dim strIncluded As String
	Dim docMIQuestionSetLookup As NotesDocument
	Dim strMIQuestionSetID As String
	Dim strCurrServerName As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Assume not created successfully until proven otherwise
	intRC = INT_NOT_UPDATED
	
	'Set the date/time used to timestamp the update
	dtNow.SetNow
	
	Call CopyToAREventProfile(docAREventProfile, |AS_Type|, |GRP|)
	Call CopyToAREventProfile(docAREventProfile, |ep_eventname|, docESEventBrief.eventname(0))
	
	'Updated 11/7/2008 by TV to support changes to Event Solution where mastereventname is no longer
	'guaranteed to be available on all event briefs
	If (docESEventBrief.HasItem(|mastereventname|)) Then
		Call CopyToAREventProfile(docAREventProfile, |ep_mastereventname|, docESEventBrief.mastereventname(0))
	Else
		Call CopyToAREventProfile(docAREventProfile, |ep_mastereventname|, ||)
	End If	
	
	Call CopyToAREventProfile(docAREventProfile, |ep_referenceid|, docESEventBrief.referenceid(0))
	
	'Updated 11/7/2008 by TV to support changes to Event Solution where masterid is no longer
	'guaranteed to be available on all event briefs
	If (docESEventBrief.HasItem(|masterid|)) Then
		Call CopyToAREventProfile(docAREventProfile, |ep_masterid|, docESEventBrief.masterid(0))
	Else
		Call CopyToAREventProfile(docAREventProfile, |ep_masterid|, ||)
	End If	
	
	Call CopyToAREventProfile(docAREventProfile, |ep_tactic|, docESEventBrief.tactic(0))
	
	If docESEventBrief.eventname(0) = "RY" Then
		Call CopyToAREventProfile(docAREventProfile, |ep_masterroadshow|, "Yes")
	Else
		Call CopyToAREventProfile(docAREventProfile, |ep_masterroadshow|, "No")
	End If
	
	Call CopyToAREventProfile(docAREventProfile, |ep_startmonth|, docESEventBrief.startmonth(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_startday|, docESEventBrief.startday(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_startyear|, docESEventBrief.startyear(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_endmonth|, docESEventBrief.endmonth(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_endday|, docESEventBrief.endday(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_endyear|, docESEventBrief.endyear(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_quarter|, docESEventBrief.quarter(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventtype|, docESEventBrief.eventtype(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventcategory|, docESEventBrief.eventcategory(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_attprimarytype|, docESEventBrief.attpricat(0) + "-" + docESEventBrief.attpri(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_sponsor_bu_pri|, docESEventBrief.sponsor_bu_pri(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_sector|, docESEventBrief.sector(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_industry|, docESEventBrief.industry(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventcity|, docESEventBrief.l_city(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventstate|, docESEventBrief.l_state(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventcountry|, docESEventBrief.l_country(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventregion|, docESEventBrief.l_region(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_eventgeo|, docESEventBrief.l_geo(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_campaign|, docESEventBrief.BATCampaign(0))
	Call CopyToAREventProfile(docAREventProfile, |CDefUniqueID|, docESEventBrief.CDefUniqueID(0))
	Call CopyToAREventProfile(docAREventProfile, |TDepUniqueID|, docESEventBrief.TDepUniqueID(0))
	Call CopyToAREventProfile(docAREventProfile, |MTDepUniqueID|, docESEventBrief.MTDepUniqueID(0))
	
	'Configure the information on the DB & Import Setup tab
	Call CopyToAREventProfile(docAREventProfile, |ep_registrations|, "Yes")
	Call CopyToAREventProfile(docAREventProfile, |ep_dbreplicaid|, g_dbCurr.ReplicaID)
	
	Dim nameServer As New NotesName(g_dbCurr.Server)
	strCurrServerName = nameServer.Abbreviated
	
	'Updated 7/24/09 by TV to allow agent to set erner name correctly when egnt is run locally
	strCurrServerName = |D25DBW06/25/A/IBM|
	
	Dim strFilename As String
	strFilename = |internet\events\wwe\grp\| & g_dbCurr.FileName
	
	Call CopyToAREventProfile(docAREventProfile, |ep_dbserver|, strCurrServerName)
	Call CopyToAREventProfile(docAREventProfile, |ep_dbpath|, strFilename)
	Call CopyToAREventProfile(docAREventProfile, |ep_dbtitle|, g_dbCurr.Title)
	
	Call CopyToAREventProfile(docAREventProfile, |ep_dbtype|, |multiple|)
	Call CopyToAREventProfile(docAREventProfile, |ep_leaddeveloper|, g_docDbProfile.dp_ARLeadDeveloper(0))
	Call CopyToAREventProfile(docAREventProfile, |ep_dbcollection|, {(form = "enrollall") & ep_id = "} & Cstr(docEventProfile.ep_id(0)) & {"})
	Call CopyToAREventProfile(docAREventProfile, |ep_agentfreq|, g_docDbProfile.dp_ARAgentFrequency(0))
	
	'Configure the information on the Reg. Fields Mapping tab
	Call CopyToAREventProfile(docAREventProfile, |epmc_prefix|, |en_prefix_trans|)
	
	Call CopyToAREventProfile(docAREventProfile, |epmc_first|, |en_first|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_middle|, |en_middle|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_last|, |en_last|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_pronunciation|, |en_pronunciation|)  'pronunciation
	Call CopyToAREventProfile(docAREventProfile, |epmc_title|, |en_title|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_companyname|, |en_companyname|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_address1|, |en_mailstreet1|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_address2|, |en_mailstreet2|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_city|, |en_city|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_state|, |en_state|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_zip|, |en_zip|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_country|, |en_country_trans|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_region|, ||)
	Call CopyToAREventProfile(docAREventProfile, |epmc_geo|, |confgeoregion|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_email|, |en_email|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_phone|, |en_phone|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_fax|, |en_fax|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_role|, |en_role|)			' to handle Role
	Call CopyToAREventProfile(docAREventProfile, |eplmc_acorelabel1|, |IBM Rep can call?|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_acore1|, |@if(ad_phone_followup_requested = "Yes";"Y";ad_phone_followup_requested = "No";"N";"U")|)
	Call CopyToAREventProfile(docAREventProfile, |epmo_privacyyes|, |privacyyes|)
	Call CopyToAREventProfile(docAREventProfile, |epmo_privacyno|, |privacyno|)
	Call CopyToAREventProfile(docAREventProfile, |epmc_originCreated|, |en_originCreated|)			' to handle en_originCreated
	Call CopyToAREventProfile(docAREventProfile, |epmc_originUpdated|, |en_originUpdated|)			' to handle en_originUpdated	
	Call CopyToAREventProfile(docAREventProfile, |epmc_grpDBReplicaID|, |dbReplicaID|)			' to handle dbReplicaID of source db grp canister
	Call CopyToAREventProfile(docAREventProfile, |epmc_grpRegDocUniqueID|, |docUniqueID|)			' to handle docUniqueID of reg doc in source grp canister
	
	
	Dim strFormula As String	
	
	' Q_REGSTATUS  if ad_formstatus = "Attended", mark q_regstatus as "Y" otherwise "N" 
	strFormula =  |@if(ad_formstatus = "Attended";"Y";"N")|
	Call CopyToAREventProfile(docAREventProfile, |epma_adFormstatus|, strFormula)
	
	'Opt In / Opt Out
	Call CopyToAREventProfile(docAREventProfile, |epma_optInOutType|, |lc_optInOutType|)
	Dim strIfContainsOptInOutType
	Dim oi_in_use As String
	Dim oo_in_use As String
	oi_in_use = | oi_in_use := @If(@Trim(en_OIEMAIL) = "" & @Trim(en_OITELE) = "" & @Trim(en_OIPOSTAL) = ""; @False; @True); |
	oo_in_use = | oo_in_use := @If(@Trim(en_OOEMAIL) = "" & @Trim(en_OOTELE) = "" & @Trim(en_OOPOSTAL) = ""; @False; @True); |
	'  i.e.  @If((  (!@Contains(@DocFields; "lc_optInOutType")) | lc_optInOutType = "Original"  ); ""; en_OIEMAIL != ""; "Checked"; "Not Checked")
'	strIfContainsOptInOutType = |@If((  (!@Contains(@DocFields; "lc_optInOutType")) | + "|" + | lc_optInOutType = "Original"  ); ""; |
	strIfContainsOptInOutType = oi_in_use + oo_in_use + |@If(( lc_optInOutType = "Original"  ); ""; |
	' en_OIEMAIL   
	strFormula = strIfContainsOptInOutType + |oo_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OIEMAIL != "" & @UpperCase(en_OIEMAIL) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OIEMAIL|, strFormula)
	' en_OITELE
	strFormula = strIfContainsOptInOutType + |oo_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OITELE != "" & @UpperCase(en_OITELE) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OITELE|, strFormula)
	' en_OIPOSTAL
	strFormula = strIfContainsOptInOutType + |oo_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OIPOSTAL != "" & @UpperCase(en_OIPOSTAL) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OIPOSTAL|, strFormula)
	' en_OOEMAIL
	strFormula = strIfContainsOptInOutType + |oi_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OOEMAIL != "" & @UpperCase(en_OOEMAIL) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OOEMAIL|, strFormula)
	' en_OOTELE
	strFormula = strIfContainsOptInOutType + |oi_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OOTELE != "" & @UpperCase(en_OOTELE) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OOTELE|, strFormula)
	' en_OOPOSTAL
	strFormula = strIfContainsOptInOutType + |oi_in_use = @True; ""; (oi_in_use = @False & oo_in_use = @False); ""; en_OOPOSTAL != "" & @UpperCase(en_OOPOSTAL) != "UNCHECKED"; "Checked"; "Not Checked")|
	Call CopyToAREventProfile(docAREventProfile, |epma_OOPOSTAL|, strFormula)
	
	'optInOptOut3		' implemented 2010.04.06
	Call CopyToAREventProfile(docAREventProfile, |epmo_NC_EMAIL|, |NC_EMAIL|)		
	Call CopyToAREventProfile(docAREventProfile, |epmo_NC_POSTAL|, |NC_POSTAL|)		
	Call CopyToAREventProfile(docAREventProfile, |epmo_NC_TELE|, |NC_TELE|)		
	
	'prep for ongoing virtual events, 2010.07.02
	If(docEventProfile.Hasitem("ep_IsOn24") And docEventProfile.Getitemvalue("ep_IsOn24")(0) = "Yes") Then
		Call CopyToAREventProfile(docAREventProfile, |isVirtualEvent|, |Yes|)	
	Else
		Call CopyToAREventProfile(docAREventProfile, |isVirtualEvent|, |No|)	
	End If
	
	
	'Configure the information on the MI Questions Fields tab
	
	'Check whether any marketing questions were included
	strMIQuestionSetID = Cstr(docEventProfile.MIQuestionSet(0))
	If (strMIQuestionSetID <> "") Then
		Call Debug(STR_MODULE_NAME & |: Marketing intelligence questions were included from the set [| & Cstr(docEventProfile.MIQuestionSetName(0)) & |].|)
		'Now get the worldwide (default) question set lookup so that we can get the default question details
		Set docMIQuestionSetLookup = docGetMIQuestionSetLookup(strMIQuestionSetID, |en_ZZ|)
		For intCurrQuestion = 1 To INT_MAX_MI_QUESTIONS
			strIncluded = docEventProfile.GetItemValue(|ep_MI_Include_Q| & Cstr(intCurrQuestion))(0)
			If (strIncluded = "Yes") Then
				Call StoreMIQuestion(docMIQuestionSetLookup, intCurrQuestion, docAREventProfile)
			End If
		Next
			' to handle Role
		Call StoreMiQuestion20(docAREventProfile)
	Else
		Call Debug(STR_MODULE_NAME & |: Marketing intelligence questions were not included.|) 
	End If
	
	'Configure the information on the Registration Admin Fields tab
	Call CopyToAREventProfile(docAREventProfile, |epmr_attendeeid|, |regid|)
	Call CopyToAREventProfile(docAREventProfile, |epmr_regtype|, |en_attendeetype_trans|)
	Call StoreAttendeeTypes(docAREventProfile, docEventProfile)	
	Call CopyToAREventProfile(docAREventProfile, |epmr_regstatus|, |ad_formstatus|)
	Call CopyToAREventProfile(docAREventProfile, |epmr_regattendedstatus|, g_docDbProfile.dp_ARAttendedStatus(0))
	
	'Configure the information on the Metrics tab
	Call CopyToAREventProfile(docAREventProfile, |ep_resexclude|, |type|)
	Call CopyToAREventProfile(docAREventProfile, |ep_resattendedstatus|, g_docDbProfile.dp_ARAttendedStatus(0))	
	
	'Add a timestamp to indicate when the update occurred
	Set docAREventProfile.ep_DateUpdatedByGRPPublish = dtNow	
	
	'Only save if in production mode
	If (g_strSystemMode = |Production|) Then
		Call docAREventProfile.ComputeWithForm(True, True)
		Call docAREventProfile.Save(True, False)
		Call Debug(STR_MODULE_NAME & |: Event profile for event ID [| & Cstr(docEventProfile.ep_id(0)) & |] was updated in Attendee Repository.|) 		
	Else
		Call Debug(STR_MODULE_NAME & |: System is in TEST mode.  Event profile for event ID [| & Cstr(docEventProfile.ep_id(0)) & |] was NOT updated in Attendee Repository.|) 
	End If
	
	intRC = INT_UPDATED
	
lblExit:
	
	'Set the return value
	intReturnCode = intRC
	
	If (intReturnCode = INT_UPDATED) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Event profile updated.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Event profile NOT updated.|) 	
	End If
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:LoadOptionalQuestion:1:8
Sub LoadOptionalQuestion(intCurrQuestion As Integer, docRegistrationProfile As NotesDocument, docDialog As NotesDocument)
	
	Const STR_MODULE_NAME = |LoadOptionalQuestion|
	
	Dim strCurrQuestion As String
	Dim strIncludeFieldName As String
	Dim strIncludeThisQuestion As String
	Dim strText As String
	Dim strType As String
	Dim strAnswerFieldName As String
	
     'Trap errors
	On Error Goto lblError
	
	strCurrQuestion = |Q| & Cstr(intCurrQuestion)
	
	Call Debug(STR_MODULE_NAME & |: Processing optional question [| & strCurrQuestion & |].|) 
	
	'Build field names based on the question number
	strIncludeFieldName = |oq_in_optionq| & Cstr(intCurrQuestion)
	
	'Set the field that identifies whether this MI question is included
	strIncludeThisQuestion = Cstr(docRegistrationProfile.GetItemValue(strIncludeFieldName)(0))
	
	'Translate any non-blank value to 'Yes'
	If (strIncludeThisQuestion <> "") Then
		strIncludeThisQuestion = "Yes"
	Else
		strIncludeThisQuestion = "No"
	End If
	
	Call docDialog.ReplaceItemValue(strIncludeFieldName, strIncludeThisQuestion)
	
	If (strIncludeThisQuestion = "Yes") Then
		Call Debug(STR_MODULE_NAME & |: Question is included.|) 
		
		strText = Cstr(docRegistrationProfile.GetItemValue(|oq_la_optionq| & Cstr(intCurrQuestion))(0))
		Call Debug(STR_MODULE_NAME & |: Question text is [| & strText & |].|) 		
		Call docDialog.ReplaceItemValue(|oq_la_optionq| & Cstr(intCurrQuestion), strText)
		
		'Based on the question type, calculate the name of the field used to store the answer to this question
		strType = Cstr(docRegistrationProfile.GetItemValue(|oq_choice| & Cstr(intCurrQuestion))(0))
		Call Debug(STR_MODULE_NAME & |: Question type is [| & strType & |].|) 		
		
		Select Case strType
		Case |check|:
			strAnswerFieldName = |en_coptionq|
		Case |dialog|:
			strAnswerFieldName = |en_doptionq|	
		Case |radio|:
			strAnswerFieldName = |en_roptionq|
		Case |text|:	
			strAnswerFieldName = |en_toptionq|
		Case Else
			Error ERR_SYSTEM_ERROR, |An unknown field type [| & strType & |] was found for question [| & Cstr(intCurrQuestion) & |].|	
		End Select
		
		strAnswerFieldName = strAnswerFieldName & |_| & Cstr(intCurrQuestion)
		
		Call Debug(STR_MODULE_NAME & |: Answer field name is [| & strAnswerFieldName & |].|) 		
		Call docDialog.ReplaceItemValue(|oq_fieldname_| & strCurrQuestion, strAnswerFieldName)
		
		'Set the default value
		Call docDialog.ReplaceItemValue(|oq_in_optionq| & Cstr(intCurrQuestion) & |_exp| , strAnswerFieldName)
		
	Else
		Call Debug(STR_MODULE_NAME & |: Question is NOT included.|) 
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ShowErrorMsg:1:8
Sub ShowErrorMsg(strMsg As String)
   '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Display a message box with an Exclamation Icon.
	'
     'Parameters
     '-----------------------
     'strMsg		The message to display.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Messagebox strMsg, MB_ICONEXCLAMATION, g_strSystemName
	
End Sub

'++LotusScript Development Environment:2:1:strRemoveNewlines:1:8
Function strRemoveNewlines(strInput As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Remove ASCII 10 and 13 characters from the supplied string
	'
     'Parameters
     '-----------------------
     'strInput				The input string.
     '     
     'Return Values
     '-----------------------
     'The input string with ASCII 10 and 13 characters removed.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strRemoveNewlines|
	
	Dim strOutput As String
	Dim intCurrChar As Integer
	Dim strCurrChar As String
	
	'Initialize the return value
	strOutput = ""
	
	If (Instr(strInput, Chr$(13)) > 0 Or Instr(strInput, Chr$(10)) > 0) Then
		For intCurrChar = 1 To Len(strInput)
			strCurrChar = Mid$(strInput, intCurrChar, 1)
			If strCurrChar <> Chr$(13) And strCurrChar <> Chr$(10) Then
				strOutput = strOutput & strCurrChar
			End If		
		Next
	Else
		strOutput = strInput
	End If
	
lblExit:
	
	'Set the return value	
	strRemoveNewlines = strOutput
	
	Exit Function
	
lblError:
	
	'If an error occurs just return the original string
	strOutput = strInput
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateSessionSectionHTMLVer1_15:5:8
%REM
	Sub CreateSessionSectionHTMLVer1_15
	Description: Comments for Sub
%END REM
Sub CreateSessionSectionHTMLVer1_15(doc_enrollForm As NotesDocument, doc_eventProfile As NotesDocument, str_Locale As String)
	
	Const STR_MODULE_NAME = |CreateSessionSectionHTMLVer1_15|
	
	'Trap errors
	On Error Goto lblError
	
	Dim txt_SessionHTML As NotesItem
	Dim richStyle As NotesRichTextStyle
	Dim session As New NotesSession
	Dim str_HTML As String
	Dim d As Integer, s As Integer
	Dim strKey As String
	Dim view As NotesView
	Dim doc_RegTrackProfile As NotesDocument
	Dim str_Day As String
	
	Set richStyle = session.CreateRichTextStyle
	Set txt_SessionHTML = doc_enrollForm.GetFirstItem("txt_SessionHTML")
	Set view = g_dbCurr.GetView("vLookupRegistrationSessionProfilesByIDLocaleDay")
	
	If txt_SessionHTML Is Nothing Then
		Goto lblExit
	End If
	
	Set g_doc_regProfile = getRegistrationProfile(doc_eventProfile, str_Locale)
	
	If g_doc_regProfile Is Nothing Then
		Call LogError(STR_MODULE_NAME & |: Registration profile (Event ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & str_Locale & | not found.|)
		Goto lblExit
	End If
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	If g_doc_regProfile.rp_IncludeSessionsInfo(0) = "No" Then
		Goto lblExit
	End If
	
	' Section header
	str_HTML = |
<div class="ibm-container">
<h2>| + g_doc_regProfile.rp_sessions_sectiontitle(0) + |</h2>
</div>| & Chr(13)
	
	' Loop for the # Days
	For d = 1 To Cint(g_doc_regProfile.rp_numdays(0))
		
		strKey = g_doc_regProfile.ep_id(0) & g_doc_regProfile.Locale(0) + "/" + Cstr(d)
		Set doc_RegTrackProfile = view.GetDocumentByKey( strKey , True )
		
		If doc_RegTrackProfile Is Nothing Then
			Call LogError(STR_MODULE_NAME & |: Event profile (ID:| & doc_eventProfile.ep_id(0) &|) for locale:| & _
			str_Locale & | missing session tracks for day | & Cstr(d) & |.|)
			Goto lblExit
		End If
		
		'		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
		'			str_HTML = str_HTML & |
		'<div class="ibm-container"> 
		'<h2>| & str_Day & | | & CStr(d) & |</h2>
		'</div>| & Chr(13)
		'		End If
		
		'		str_HTML = str_HTML & |
		'<div class="ibm-container ibm-alternate-two">|
		str_HTML = str_HTML & |
<div class="ibm-container">|
		
		If doc_RegTrackProfile.rp_numTracksDay(0) <> "1" Then
			str_HTML = str_HTML & | 
<h2>| & str_Day & | | & Cstr(d) & |</h2>| & Chr(13)
		End If
		
		Select Case doc_RegTrackProfile.rp_numTracksDay(0)
		Case "1"
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				Call CreateTableOneColumnVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), "1", Cstr(s))
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "1")
		Case "2"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableTwoColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableTwoColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), _
					Cstr(s), "388", "left")
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "2")
		Case "3"
			sCtr = 1
			For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
				' Check if this session spans ALL tracks; If yes, then only create 1 column
				If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
					Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"s"+Cstr(s)+"span", "Yes")
					Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(s))
					sCtr = sCtr - 1
				Else
					Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), Cstr(sCtr), Cstr(s))
				End If
				sCtr = sCtr + 1
			Next
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "3")
		Case "4"
			Call CreateTableFourColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "4")
		Case "5"
			Call CreateTableFiveColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "5")
		Case "6"
			Call CreateTableSixColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "6")
		Case "7"
			Call CreateTableSevenColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "7")
		Case "8"
			Call CreateTableEightColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, Cstr(d), doc_enrollForm)
			Call doc_enrollForm.ReplaceItemValue("en_d"+Cstr(d)+"numTracks", "8")
	End Select
		
		str_HTML = str_HTML & |</div>| & Chr(13) & Chr(13)
		
	Next
	
	Set txt_sessionHTML = doc_enrollForm.ReplaceItemValue("txt_SessionHTML", str_HTML)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:UpdateHomeDb:1:8
Sub UpdateHomeDb(docEventProfile As NotesDocument, intUpdateType As Integer)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Add the event ot or remove the event from the home database.
	'
     'Parameters
     '-----------------------
     'docEventProfile			The event profile for the event to remove.
	' intUpdateType 			INT_ADD or INT_REMOVE
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateHomeDb|
	
	Dim strKey As String
	Dim dbHome As NotesDatabase
	Dim docCanisterProfile As NotesDocument
	Dim docHomeEventProfile As NotesDocument
	Dim view As NotesView
	Dim docConflict As NotesDocument	
	Dim docNextConflict As NotesDocument	
	Dim collConflicts As NotesDocumentCollection
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	'Check whether publishing is enabled, and if it isn't exit
	If (Cstr(g_docDbProfile.dp_EnablePublishEventsToHome(0)) <> "Yes") Then
		Call Debug(STR_MODULE_NAME & |: This canister is set to not publish events to the home database.  The home database has not been updated.|)
		Print(|This canister is set to not publish events to the home database.  The home database has not been updated.|)
		Goto lblExit
	End If
	
	'Get the home database in the live environment
	Set dbHome = dbGetHomeDb(INT_LIVE)
	
	Call Debug(STR_MODULE_NAME & |: Updating home database [| & dbHome.Title & |] on server [| &  dbHome.Server & |].|)
	
	'Check if this event already exists in the home database
	Set view = dbHome.GetView("EventsByEventID")
	
	strKey = docEventProfile.ep_id(0)
	
	Call Debug(STR_MODULE_NAME & |: Searching home database for event with ID [| & strKey & |].|)
	
	Set docHomeEventProfile = view.GetDocumentByKey(strKey, True)
	
	'Do the update
	Select Case intUpdateType
		
	Case INT_REMOVE:
		
		'Delete any existing event profiles for this event from the home database
		If (Not docHomeEventProfile Is Nothing)Then
			
			Call Debug(STR_MODULE_NAME & |: Removing event [| & docHomeEventProfile.eventname(0) & |] from home database.|)	
			
			Set collConflicts = docHomeEventProfile.Responses
			
			Call Debug(STR_MODULE_NAME & |: Removing | & Cstr(collConflicts.Count) & | conflict document(s)...|)
			
			If (collConflicts.Count > 0) Then
				
				Set docConflict = collConflicts.GetFirstDocument
				
				While Not docConflict Is Nothing
					
					Set docNextConflict = collConflicts.GetNextDocument(docConflict)
					
					Call docConflict.Remove(True)
					
					Set docConflict = docNextConflict
				Wend
				
			End If
			
			'Remove the document
			Call docHomeEventProfile.Remove(True)
			
			Print(|The event has been removed from the home database.|)
			
		End If
		
	Case INT_ADD:
		
		'If there is not an existing document, create one
		If (docHomeEventProfile Is Nothing)Then
			Set docHomeEventProfile = dbHome.CreateDocument			
		End If
		
		'Copy everything from the supplied event profile to the home database
		Call docEventProfile.CopyAllItems(docHomeEventProfile, True)
		
	 	'Add the canister title
		Set docCanisterProfile = docGetCanisterProfile(docEventProfile.dp_canisterid(0))
		
		docHomeEventProfile.cp_SystemName = docCanisterProfile.cp_SystemName(0)	
		
		'Check if geo is North or South IOT and replace by "Europe" only, to avoid confusion for clients
		'TODO: Does this need changing?
		If Instr (1 , docHomeEventProfile.geo(0) , "Europe", 5 ) > 0 Then	
			docHomeEventProfile.geo = "Europe"
		End If		
		
		Call docHomeEventProfile.Save(True, False)
		
		'Now delete any conflicts
		Set collConflicts = docHomeEventProfile.Responses
		
		Call Debug(STR_MODULE_NAME & |: Removing | & Cstr(collConflicts.Count) & | conflict document(s)...|)
		
		If (collConflicts.Count > 0) Then
			
			Set docConflict = collConflicts.GetFirstDocument
			
			While Not docConflict Is Nothing
				
				Set docNextConflict = collConflicts.GetNextDocument(docConflict)
				
				Call docConflict.Remove(True)
				
				Set docConflict = docNextConflict
			Wend
			
		End If
		
		Call Debug(STR_MODULE_NAME & |: Added [| & docHomeEventProfile.eventname(0) & |] to home database.|)			
		Print(|The home database has been updated.|)
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown update type [| & Cstr(intUpdateType) & |] was supplied to the function.|	
		
	End Select
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call ShowErrorMsg(Err() & |: | & Error() & | in line | & Erl)	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:GetFooterSettings:1:8
Sub GetFooterSettings(docLocaleRef As NotesDocument, doc As NotesDocument)
     '------------------------------------------------------------------------------------------------------
     'Description 
     '------------------
     'Given a locale profile from the reference database and a document, copy the
	'fields that are used to format the footer of the web page for the locale.
     '
     'Parameters
     '-----------------------
	'docLocaleRef					The locale profile
	'doc									The document to be updated
	'
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetFooterSettings|
	
     'Trap errors
	On Error Goto lblError
	
	doc.lc_AboutLinkText = docLocaleRef.lc_AboutLinkText(0)
	doc.lc_AboutLinkURL = docLocaleRef.lc_AboutLinkURL(0)
	doc.lc_PrivacyLinkText = docLocaleRef.lc_PrivacyLinkText(0)
	doc.lc_PrivacyLinkURL = docLocaleRef.lc_PrivacyLinkURL(0)		
	doc.lc_ContactLinkText = docLocaleRef.lc_ContactLinkText(0)
	doc.lc_ContactLinkURL = docLocaleRef.lc_ContactLinkURL(0)		
	doc.lc_TermsOfUseLinkText = docLocaleRef.lc_TermsOfUseLinkText(0)
	doc.lc_TermsOfUseLinkURL = docLocaleRef.lc_TermsOfUseLinkURL(0)		
	
lblExit: 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docBuildReport:1:8
Function docBuildReport(strEventID As String, strReportType As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID and a type of report, create a document containing that type of report.
	
     'Parameters
     '-----------------------
	'strEventID				The event ID.
	'strReportType		The report type.
     '     
     'Return Values
     '-----------------------
     'docBuildReport is set to the report or Nothing if a report could not be created.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docBuildReport|
	
	Dim docReport As NotesDocument
	Dim rtitem As NotesRichTextItem
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Call Debug(STR_MODULE_NAME & |: Building [| & strReportType & |] report for event ID [| & strEventID & |]...|)
	
	Select Case (strReportType)
		
	Case |Summary|:
		
		Set docReport = g_dbCurr.CreateDocument
		
		'TODO: Have this do something! 
		Set rtitem = New NotesRichTextItem (docReport, |Body|)
		Call rtitem.AppendText(|Summary report for event ID [| & strEventID & |]|)
		
		
	Case |Detail|:
		
		Set docReport = g_dbCurr.CreateDocument
		
		'TODO: Have this do something!
		Set rtitem = New NotesRichTextItem (docReport, |Body|)
		Call rtitem.AppendText(|Summary report for event ID [| & strEventID & |]|)		
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown report type [| & strReportType & |] was supplied to the function].|	
		
	End Select
	
lblExit:
	
	Set docBuildReport = docReport
	
	If (docReport Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Unable to build report.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Report built.|)
	End If
	
	Exit Function
	
lblError:
	
	Set docReport = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:PublishEventsToAR:1:8
Sub PublishEventsToAR()
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Find all event profiles that have been marked as 'Published' and
	'create a corresponding event profile in the Attendee Repository database.
     '
     'Parameters
     '-----------------------
     'None
     '     
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PublishEventsToAR|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEventsPublished|
	
	Dim view As NotesView
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry
	Dim entryNext As NotesViewEntry
	Dim docCurr As NotesDocument
	Dim intCount As Integer
	Dim intCountCreated As Integer
	Dim intCountUpdated As Integer	
	Dim intCountExcluded As Integer	
	Dim intCountErrors As Integer
	Dim intRC As Integer
	Dim dtNow As New NotesDateTime("")
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Set the date/time used to timestamp the event profiles
	dtNow.SetNow
	
	'Get a collection of all all non-cancelled event profiles that have ep_AttendanceUpdateStatus="Complete" and ep_RegistrationsSentToAR=""
	'i.e.	All events that have been marked as having their attendance information complete that have not already
	'		been sent to Attendee Repository.
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	intCount = 0
	
	Set vc = view.AllEntries
	
	If (Not vc Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | event profile(s)...|)
		
		Set entry = vc.GetFirstEntry()
		
		While Not(entry Is Nothing)
			
			'Get the associated document
			Set entryNext = vc.GetNextEntry(entry)
			Set docCurr = entry.Document
			
			'Attempt to create a corresponding event profile in Attendee Repository
			Call PublishEventToAR(docCurr, intRC)
			
			Select Case intRC
				
			Case INT_CREATED:
				intCountCreated = intCountCreated + 1
				Set docCurr.ep_DateCreatedInAR = dtNow
				docCurr.ep_RegistrationsSentToAR = "Yes"
				Set docCurr.ep_DateRegistrationsSentToAR = dtNow
				Call UpdateAudit(docCurr, |System|, |Attendee Repository profile created.|)
				Call UpdateAudit(docCurr, |System|, |Attendee Repository notified that registrations are ready to be imported.|)
				
				'Only save if in production mode
				If (g_strSystemMode = |Production|) Then
					Call docCurr.Save(True, False)
					Call Debug(STR_MODULE_NAME & |: Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was marked as exported to Attendee Repository.|) 		
				Else
					Call Debug(STR_MODULE_NAME & |: System is in TEST mode.  Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was NOT marked as exported to Attendee Repository.|) 
				End If						
				
			Case INT_UPDATED:
				intCountUpdated = intCountUpdated + 1	
				Set docCurr.ep_DateUpdatedInAR = dtNow		
				docCurr.ep_RegistrationsSentToAR = "Yes"
				Set docCurr.ep_DateRegistrationsSentToAR = dtNow
				Call UpdateAudit(docCurr, |System|, |Attendee Repository profile updated.|)		
				Call UpdateAudit(docCurr, |System|, |Attendee Repository notified that registrations are ready to be imported.|)				
				
				'Only save if in production mode
				If (g_strSystemMode = |Production|) Then
					Call docCurr.Save(True, False)
					Call Debug(STR_MODULE_NAME & |: Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was marked as updated in Attendee Repository.|) 		
				Else
					Call Debug(STR_MODULE_NAME & |: System is in TEST mode.  Event profile for event ID [| & Cstr(docCurr.ep_id(0)) & |] was NOT marked as updated in Attendee Repository.|) 
				End If					
				
			Case INT_EXCLUDED:
				intCountExcluded = intCountExcluded + 1	
				
			Case Else
				intCountErrors = intCountErrors + 1
				
			End Select
			
			'Update the count of documents processed
			intCount = intCount + 1
			
			'Get the next document
			Set entry = entryNext
			
		Wend
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No event profiles were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCount) & | event profile(s) processed.  | & Cstr(intCountCreated + intCountUpdated) & | processed successfully.  | & Cstr(intCountExcluded) & | excluded from reporting process.  | & Cstr(intCountErrors) & | error(s).|)
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountCreated) & | event profile(s) created in Attendee Repository.|)	
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountUpdated) & | event profile(s) updated in Attendee Repository.|)	
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docGetEmailTemplateByAdminTask:1:8
Function docGetEmailTemplateByAdminTask(strTask As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given the name of an admin task, return the e-mail template document for that task.
	
     'Parameters
     '-----------------------
	'strTask				The name of the task.
     '     
     'Return Values
     '-----------------------
     'docEmailTemplate is set to the e-mail template or Nothing if a template could not be found.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEmailTemplateByAdminTask|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEmailTemplatesAdminByTask|
	
	Dim view As NotesView
	Dim docEmailTemplate As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Call Debug(STR_MODULE_NAME & |: Searching for document with key [| & strTask & |] in view [| & view.Aliases(0) & |].|)
	
	Set docEmailTemplate = view.GetDocumentByKey(strTask , True)
	
	If (Not docEmailTemplate Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Unable to find document.|)
	End If
	
lblExit:
	
	Set docGetEmailTemplateByAdminTask = docEmailTemplate
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docEmailTemplate = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableEightColumns_Radio:6:8
%REM
	Sub CreateTableEightColumns
	Description: Version 2.0
%END REM
Sub CreateTableEightColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Redim str_FieldName6(1 To 1) As String
	Redim str_FieldName7(1 To 1) As String
	Redim str_FieldName8(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-8 (Track 6-8)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			Redim Preserve str_FieldName6(1 To fCtr)
			Redim Preserve str_FieldName7(1 To fCtr)
			Redim Preserve str_FieldName8(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			str_FieldName6(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName7(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName8(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-8 (Track 6-8)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		str_FieldName = str_FieldName6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		str_FieldName = str_FieldName7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		str_FieldName = str_FieldName8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:1:createRegID:1:8
Function createRegID(doc As NotesDocument) As String
	
	Const STR_MODULE_NAME = |createRegID|
	
	Dim regView As NotesView
	Dim edoc As NotesDocument
	Dim newid As String
	Dim tmpid As Variant
	Dim uniqueid As String
	Dim docid As String
	Dim lnewid As String
	Dim rnewid As String
	Dim mnewid As String
	Dim z As String
	Dim p As Integer, i As Integer, v As Integer
	Dim eventID As String
	Dim regKey As String
	
	'Trap errors
	On Error Goto lblError	
	
	Set regView = g_dbCurr.GetView("vLookupRegistrationsByEventIDRegID")
	eventID = doc.ep_id(0)
	v = 13
	
	p = 8
	
NewID:
	
	uniqueid = ""
	
	docid = Left$(doc.UniversalID, p)
	lnewid = Ucase(Left$(docid, 2))
	'tmpid = Evaluate("@Unique")
	rnewid = Ucase(Right$(docid, 2))
	
	uniqueid = lnewid & rnewid
	
	For i = 1 To 2 
		z = Mid$(doc.UniversalID, v + i, 1)
		uniqueid = uniqueid & z
	Next

	'Validate for Uniqueness
	regKey = eventID + uniqueid
	Set edoc = regView.GetDocumentByKey( regKey )
	If (edoc Is Nothing) And Len(uniqueid) = 6 Then
		'ID is unique
		createRegID = uniqueid
		Set edoc = Nothing
	Else
		p = p + 3
		If v => 30 Then
			v = v -17
		Else
			v = v + 1
		End If
		
		
		Goto NewID
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableTwoColumnsVer1_1:9:8
%REM
	Sub CreateTableTwoColumns
	Description: Version 1.1.
		str_colWidth: number of pixels for the width
		str_col2Float: 'left' or 'right' for specifying the position of the column
%END REM
Sub CreateTableTwoColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String, _
	str_colWidth As String, str_col2Float As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-two-column">
<div class="ibm-column ibm-list-container ibm-first" style="width:| & str_colWidth & |px">| & Chr(13)
	
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second" style="float:| & str_col2Float & |;width:| & str_colWidth & |px">| & Chr(13)

	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableTwoColumnsVer1_0:6:8
%REM
	Sub CreateTwoColumns
	Description: Comments for Sub. Ver 1.0.
%END REM
Sub CreateTableTwoColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-two-column">
<div class="ibm-column ibm-first">|
	
	If str_s = "1" Then
		str_HTML = str_HTML & |<h2>| & str_tLabel & |</h2>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|

	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If

	str_HTML = str_HTML & |
<div class="ibm-column ibm-second">| + Chr(13)

	If str_s = "1" Then
		str_HTML = str_HTML & |<h2>| & str_tLabel & |</h2>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	' Close the section
	str_HTML = str_HTML + |
</div>| & Chr(13) & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableTwoColumnsSpanVer1_1:6:8
%REM
	Sub CreateTableTwoColumnsSpan
	Description: Version 1.1.
%END REM
Sub CreateTableTwoColumnsSpanVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-two-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If str_s = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

		If str_s = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |</div>|
		
		' Close the 2 column track label section
		str_HTML = str_HTML + |
</div>| & Chr(13)
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p>| & Chr(13) & |<div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div></div>| & Chr(13)
	
	'str_HTML = str_HTML & Chr(13) & |<div class="ibm-alternate-rule"><hr /></div>| & Chr(13)
	'str_HTML = str_HTML & Chr(13) & |<div class="ibm-container">| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:docGetLocaleSettings:1:8
Function docGetLocaleSettings(strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a locale, try to find the locale settings document  in the current database for the
	'specified locale.
     '
     'Parameters
     '----------------
	'strLocale						The locale
	'
     'Return Values
     '-------------------
     'If a locale settings document is found, it is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetLocaleSettings|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupLocaleSettings|
	
	Dim view As NotesView
	Dim docLocaleSettings As NotesDocument
	Dim strKey As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Looking for locale settings document for locale [| & strLocale & |]|) 
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strLocale
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strKey & |].|) 
	
	Set docLocaleSettings = view.GetDocumentByKey(strKey, True)
	
	If (Not docLocaleSettings Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetLocaleSettings = docLocaleSettings
	
	Exit Function
	
lblError:
	
	Set docLocaleSettings = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetAttendeeTypeTranslations:1:8
Sub GetAttendeeTypeTranslations(docLocaleProfile As NotesDocument, strScript As String)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a locale profile, build a JavaScript array that can be use to translate a
	'langauge specific attendee type into its English equivalent.
	'
	'For example,
	'
	'	var m_attendeeTypes = new Array();
	'	m_attendeeTypes["Cliente/Delegado"] = "Customer/Delegate";
	'	m_attendeeTypes["Asociado de Negocios"] = "Business Partner";
	'	m_attendeeTypes["Gerente IBM"] = "IBM Executive";
	'	m_attendeeTypes["Empleado IBM"] = "IBM Employee";
	'	m_attendeeTypes["Personal de Proveedores"] = "Vendor Staff";
	'	m_attendeeTypes["Prensa/Analista"] = "Press/Analyst";
	'	m_attendeeTypes["Orador"] = "Speaker";
	'	m_attendeeTypes["Académico"] = "Academic";
	'
	'The language specific versions are stored in the Locale Profile in
	'the lc_AttendeeTypeValues field in the format:
	'
	'	Cliente/Delegado~Customer/Delegate
	'	Asociado de Negocios~Business Partner
	'	Gerente IBM~IBM Executive
	'	Empleado IBM~IBM Employee
	'	Personal de Proveedores~Vendor Staff
	'	Prensa/Analista~Press/Analyst
	'	Orador~Speaker
	'	Académico~Academic
	'
	'Parameters
	'-----------------------
	'docLocaleProfile 			The locale profile
	'strScript							(Returned) The javascript
	'     
	'Return Values
	'-----------------------
	'None, but  the Javascript array definition is appended to strScript.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetAttendeeTypeTranslations|
	
	Dim strJS As String
	Dim strAttendeeTypeInfo As String
	Dim strTranslatedAttendeeType As String
	Dim strAttendeeType As String
	
	'Trap errors
	On Error Goto lblError
		
	'Build the script
	strJS = ||
	
	strJS = strJS & Chr$(13) & |var m_attendeeTypes = new Array();|  
	
	Forall varAttendeeType In docLocaleProfile.lc_AttendeeTypeValues
		'Build lines of the format:
		'	m_attendeeTypes["Cliente/Delegado"] = "Customer/Delegate";
		strAttendeeTypeInfo = Cstr(varAttendeeType)
		strTranslatedAttendeeType = Strleft(strAttendeeTypeInfo, |~|)
		strAttendeeType = Strright(strAttendeeTypeInfo, |~|)
		If (strTranslatedAttendeeType <> || And strAttendeeType <> ||) Then
			strJS = strJS & |m_attendeeTypes["| & strTranslatedAttendeeType & |"] = "| & strAttendeeType & |";|
		End If
	End Forall
	
	strJS = strJS & Chr$(13)
	
lblExit:
	
	'Append the javascript
	strScript = strScript & strJS
	
	Call Debug(STR_MODULE_NAME & |: Finished.  Returning: [| & strJS & |]|)
	
	Exit Sub
	
lblError:
	
	strJS = ||
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ProcessSubscriptions:1:8
Sub ProcessSubscriptions()
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Process all enabled subscriptions and send notification e-mails.
     '
     'Parameters
     '-----------------------
     'None
     '     
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |ProcessSubscriptions|
	
	Dim strFormula As String
	Dim collSubscriptionProfiles As NotesDocumentCollection
	Dim docSubscriptionProfile As NotesDocument
	Dim intCount As Integer
	Dim intCountOK As Integer
	Dim intCountFailed As Integer
	Dim flgOK As Boolean
	Dim dtNow As New NotesDateTime("")
	Dim varEventIDs As Variant
	Dim strReportType As String
	Dim strEventID As String
	Dim strReportFormat As String
	Dim docReport As NotesDocument
	Dim docCombinedReport As NotesDocument
	Dim intCountReportErrors As Integer
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Set the date/time used to timestamp the event profiles
	dtNow.SetNow
	
	'Build a formula to find the subscriptions to process
	'TODO: Have this select just those subscriptions to process this hour
	strFormula =  {(Form = "fSubscriptionProfile") & (sp_IsEnabled = "Yes")}
	
	Call Debug(STR_MODULE_NAME & |: Searching for subscription profiles using formula [| & strFormula & |]...|)
	
	'Get a collection of subscriptions to process
	Set collSubscriptionProfiles = g_dbCurr.Search(strFormula, Nothing, 0)
	
	intCount = 0
	
	If collSubscriptionProfiles.Count > 0 Then
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(collSubscriptionProfiles.Count) & | subscription profile(s)...|)
		Call Debug(STR_MODULE_NAME & |: ______________________________________________________________________|)		
		
		Set docSubscriptionProfile = collSubscriptionProfiles.GetFirstDocument
		
		While Not(docSubscriptionProfile Is Nothing)
			
			'Assume something goes wrong until proven otherwise
			flgOK = False
			
			'If we encouter any errors in the loop, skip to the next subscription profile
			On Error Goto lblErrorNextSubscriptionProfile
			
			Call Debug(STR_MODULE_NAME & |: Processing subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |]...|)
			
			'Initialize a count of errors found when processing reports for this subscription profile
			intCountReportErrors = 0
			
			'Update the count of documents processed
			intCount = intCount + 1
			
			varEventIDs = docSubscriptionProfile.ep_ids
			strReportType = docSubscriptionProfile.sp_ReportType(0)
			strReportFormat = docSubscriptionProfile.sp_ReportFormat(0)
			
			Call Debug(STR_MODULE_NAME & |: Report type is [| & strReportType & |]. Report format is [| & strReportFormat & |].|)
			
			'If the subscription is for a single event
			If (Ubound(varEventIDs) = 0) Then
				
				Call Debug(STR_MODULE_NAME & |: Processing single event subscription profile...|)
				
				strEventID = varEventIDs(0)
				
				Set docReport = docBuildReport(strEventID, strReportType)
				
				If docReport Is Nothing Then		
					intCountReportErrors = intCountReportErrors + 1					
					Error ERR_SYSTEM_ERROR, |Unable to create report for subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
				End If
				
			'Otherwise, the subscription is for a multiple events
			Else
				
				Call Debug(STR_MODULE_NAME & |: Processing multiple event subscription profile.  [| & Cstr(Ubound(varEventIDs) + 1) & |] events to be processed.|)
				
				Forall varEventID In varEventIDs
					
					'If we encounter an error in this loop, skip to the next report
					On Error Goto lblErrorNextReport
					
					strEventID = Cstr(varEventID)
					
					Set docReport = docBuildReport(strEventID, strReportType)
					
					If docReport Is Nothing Then
						intCountReportErrors = intCountReportErrors + 1
						Error ERR_SYSTEM_ERROR, |Unable to create report for event ID [| & strEventID & |] in subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
					End If					
					
					Select Case strReportFormat
						
					Case |Separate|:
						
						flgOK = flgSendReport(docReport, docSubscriptionProfile)
						
						If (Not flgOK) Then
							intCountReportErrors = intCountReportErrors + 1							
							Error ERR_SYSTEM_ERROR, |Unable to send report for event ID [| & strEventID & |] in subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
						End If
						
					Case |Combined|:
						
						Set docCombinedReport =  docAppendReport(docCombinedReport, docReport)
						If docCombinedReport Is Nothing Then
							intCountReportErrors = intCountReportErrors + 1							
							Error ERR_SYSTEM_ERROR, |Unable to create report for event ID [| & strEventID & |] in subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
						End If							
						
					Case Else
						
						intCountReportErrors = intCountReportErrors + 1
						Error ERR_SYSTEM_ERROR, |An unknown report type [| & strReportFormat & |] was found in subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
						
					End Select
					
lblNextReport:
					
					'Resume error handling that will skip to the next subscription profile on error
					On Error Goto lblErrorNextSubscriptionProfile
					
				End Forall
				
				If (strReportFormat = |Combined|) Then
					
					flgOK = flgSendReport(docCombinedReport, docSubscriptionProfile)
					
					If (Not flgOK) Then
						intCountReportErrors = intCountReportErrors + 1						
						Error ERR_SYSTEM_ERROR, |Unable to send report for event ID [| & strEventID & |] in subscription profile with UNID [| & docSubscriptionProfile.UniversalID & |].|	
					End If
					
				End If
				
			End If
			
lblNextSubscriptionProfile:
			
			'Resume standard error handling
			On Error Goto lblError
			
			If (	intCountReportErrors = 0) Then
				Call Debug(STR_MODULE_NAME & |: Subscription profile processed successfully.|)
				intCountOK = intCountOK + 1
			Else
				Call Debug(STR_MODULE_NAME & |: Subscription profile processed with [| & Cstr(intCountReportErrors) & |] error(s).|)				
				intCountFailed = intCountFailed + 1
			End If
			
			Call Debug(STR_MODULE_NAME & |: ______________________________________________________________________|)		
			
			Set docSubscriptionProfile = collSubscriptionProfiles.GetNextDocument(docSubscriptionProfile)
			
		Wend
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No subscription profiles were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCount) & | subscription profile(s) processed.|)
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountOK) & | processed successfully.|)
	If (intCountFailed > 0) Then
		Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountFailed) & | processed with errors.|)	
	End If
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
lblErrorNextSubscriptionProfile:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextSubscriptionProfile
	
lblErrorNextReport:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextReport
	
End Sub

'++LotusScript Development Environment:2:1:strGetLocaleID:1:8
Function strGetLocaleID(docEventProfile As NotesDocument, strLocale As String) As String
   	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and a locale, return the ID (L1, L2 ...) that is used as a field name
	'suffix to identify the fields that contain information for that locale.  For example, if the
	'information for the en_US locale is stored in the fields ending '_L2', this function would
	'return 'L2'.
	'
     'Parameters
     '-----------------------
	'docEventProfile				An event profile
	'strLocale						A locale
     '     
     'Return Values
     '-----------------------
     'The ID.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetLocaleID|
	
	Dim intCurrLocale As Integer
	Dim strCurrID As String
	Dim strID As String
	Dim strFieldName As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	strID = ||
	
	'Check each available locale to find the ID to use
	For intCurrLocale = 1 To 5
		strCurrID = |L| & Cstr(intCurrLocale)
		strFieldName = |ep_Locale_| & strCurrID
		If (docEventProfile.GetItemValue(strFieldName)(0) = strLocale) Then
			strID = strCurrID
			Exit For
		End If
	Next
	
	If (strID = ||) Then
		Error ERR_SYSTEM_ERROR, |The locale [| & strLocale & |] could not be found in the event profile with UNID [| & docEventProfile.UniversalID & |].|	
	End If
	
lblExit:
	
	strGetLocaleID = strID
	
	Exit Function
	
lblError:
	
	strID = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strGetURLParameter:1:8
Function strGetURLParameter(strParameterName As String, strQueryString As String) As String
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Extract the supplied named parameter from the supplied string.
     '
     'Parameters
     '-----------------------
     'strParameterName - The name of the paramter.
	'strQueryString - The query string.
     '     
     'Return Values
     '-----------------------
     'strGetURLParameter is set to the value of the parameter.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = "strGetURLParameter"
	
	Dim strReturnValue As String	
	Dim intStartPos As Integer
	Dim intEndPos As Integer
	Dim intSkipLength As Integer
	Dim strParameters As String
	Dim strName As String	
	
	Call Debug(STR_MODULE_NAME & |: Started.  Searching for parameter [| & strParameterName & |] in [| & strQueryString & |].|)
	
     'Trap errors
	On Error Goto lblError
	
	strParameters = strQueryString + "&" + strParameterName + "=" + "&"
	strName = Ucase("&" + strParameterName + "=")
	intSkipLength = Len(strName)
	intStartPos = Instr(Ucase(strParameters), strName) + intSkipLength
	intEndPos = Instr(intStartPos, strParameters, "&")
	strReturnValue = Mid(strParameters, intStartPos, intEndPos - intStartPos)
	
lblExit:
	
	'Return the value
	strGetURLParameter = strReturnValue
	
	Call Debug(STR_MODULE_NAME & |: Finished. Returning [| & strReturnValue & |].|)
	
	Exit Function
	
lblError:
	
	strReturnValue = ""
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:UpdateHomeDbViaAgent:1:8
Sub UpdateHomeDbViaAgent(docEventProfile As NotesDocument, intUpdateType As Integer)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Add the event to or remove the event from the home database by calling
	'a server based agent that has sufficient privileges to make the update.
	'
    'Parameters
    '-----------------------
    'docEventProfile			The event profile for the event to remove.
	' intUpdateType 			INT_ADD or INT_REMOVE
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateHomeDbViaAgent|
	
	Dim docParameters As NotesDocument
	Dim agent As NotesAgent    
	Dim strEventID As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	'Create a parameter document to pass to the agent that does the update
	Set docParameters = g_dbCurr.CreateDocument
	
	'Store the current user's name
	docParameters.UserName = g_strUserName
	
	'Store the locale
	docParameters.UpdateType = intUpdateType
	
	'Store the event ID of the event profile
	strEventID = docEventProfile.ep_id(0)
	
	docParameters.EventID = strEventID
	
	'Make parameter document public access so all users can create.
	Call docParameters.ReplaceItemValue(|$PublicAccess|, "1")
	
	Call docParameters.Save(True, False)
	
	Set agent = g_dbCurr.GetAgent (|UpdateHomeDb|)         
	
	Call Debug(STR_MODULE_NAME & |: Running agent [| & agent.Name & |] on server to update home database...|)
	
	If (agent.RunOnServer(docParameters.NoteID) = 0) Then
		Call Debug(STR_MODULE_NAME & |: Agent ran successfully.|)		
	Else
		Error ERR_SYSTEM_ERROR, |The agent responsible for updating the home database did not run successfully.  Event ID [| & strEventID & |] Update type [| & Cstr(intUpdateType) & |]  User name [| & g_strUserName & |]|	
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CopyNominationsToInviteeTool:1:8
Sub CopyNominationsToInviteeTool(docEventProfile As NotesDocument, flgEnableUI As Boolean)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'
	'Parameters
	'-----------------------
	'docEventProfile		The event profile.
	'flgEnableUI			Whether to write messages to the status bar and show message boxes.
	'	
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyNominationsToInviteeTool|
	
	'Const STR_PENDING = |Pending GOE Determination|
	Const STR_PENDING = |In CTEBA Review|
	
	Dim dtNow As New NotesDateTime("")	
	Dim view As NotesView	
	Dim strKey As String
	Dim strEventID As String
	Dim strEmail As String
	Dim vecNominations As NotesViewEntryCollection
	Dim veCurr As NotesViewEntry
	Dim docCurrNomination As NotesDocument
	Dim docInvitee As NotesDocument
	Dim flgOK As Boolean
	Dim lngCount As Long
	Dim strMsg As String
	Dim lngCountErrors As Long
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Get the event ID
	strEventID = docEventProfile.referenceid(0)
	
	'Find the Invitee Tool database
	Set g_dbInviteeTool = dbGetInviteeToolDb()	
	
	'Set the date/time used to timestamp the nominations
	dtNow.SetNow
	
	'Get each nomination that hasn't been processed yet
	'Set view = g_dbCurr.GetView(|vwlookupNomNotProcessed|)
	Set view = g_dbCurr.GetView(|CTEBA Export|)  'SMH Export view 8/1/2012
	
	'Set vecNominations = view.AllEntries
	Set vecNominations = view.GetAllEntriesByKey(strEventID)
	
	If (vecNominations.Count > 0) Then
		Call Debug(STR_MODULE_NAME & |: Processing [| & vecNominations.Count & |] nomination(s).|)	
		If (flgEnableUI) Then
			Print |Processing [| & vecNominations.Count & |] nomination(s).|
		End If
		
		lngCount = 0
		
		Set veCurr = vecNominations.GetFirstEntry
		
		While Not veCurr Is Nothing	
			
			lngCount = lngCount + 1
			
			On Error GoTo lblErrorNext
			
			strMsg = |Processing nomination | & lngCount & | of | &  vecNominations.Count & |. |
			
			Set docCurrNomination = veCurr.Document
			
			strEmail = docCurrNomination.en_email(0)
			
			'Check whether there is already an invitee document for the nomination
			strKey = strEventID & strEmail
			
			Set docInvitee = docGetInviteeDocument(strKey)
			
			'If there isn't, create a new invitee document in the Invitee Tool
			If (docInvitee Is Nothing) Then
				Call Debug(STR_MODULE_NAME & |: | & strMsg & |Creating invitee record in the Invitee Tool for event id [| & strEventID & |] e-mail [| & strEmail & |].|)	
				If (flgEnableUI) Then
					Print strMsg & |Creating invitee record in the Invitee Tool for event id [| & strEventID & |] e-mail [| & strEmail & |].|
				End If	
				Set docInvitee = g_dbInviteeTool.CreateDocument
				docInvitee.Form = |frm_Invitee|
				flgOK = flgUpdateInviteeDocument(docEventProfile, docCurrNomination, dtNow, docInvitee)
				If (flgOK) Then
					'Change the status of the nomination to drop it from the Not Processed view
					docCurrNomination.in_Status = STR_PENDING
					Set docCurrNomination.en_DateCopiedToInviteeTool = dtNow
					
					'fields added by SMH for Pulse 11/1/2012
					'change the nomination status to indicate exported to CTEBA
					If docCurrNomination.gp_approval(0)  = "Approved for CTEBA Review" Then docCurrNomination.gp_approval = "In CTEBA Review"
					If docCurrNomination.cio_approval(0)  = "Approved for CTEBA Review" Then docCurrNomination.cio_approval = "In CTEBA Review"
					
					docCurrNomination.CTEBA_EXPORT_DATE = Today
					docCurrNomination.cteba_status = docEventProfile.cteba_status(0)
					
					Call docCurrNomination.Save(True, False)
				Else
					lngCountErrors = lngCountErrors + 1
					Error ERR_SYSTEM_ERROR, |Unable to create invitee record in the Invitee Tool for event id [| & strEventID & |] e-mail [| & strEmail & |].|						
				End If
			Else

				'There is already a record for this event/e-mail in the invitee tool
				'After discussion with Geoff we decided to flag this as an error condition for now.
				
				'12/31/14 - commented out SMH
				'lngCountErrors = lngCountErrors + 1
				'Error ERR_SYSTEM_ERROR, |Invitee record already exists in the Invitee Tool for event id [| & strEventID & |] e-mail [| & strEmail & |].|
				
				'12/31/14 -- change status to IN CTEBA Review, flag as dup, and no error, SMH
				If docCurrNomination.gp_approval(0) = "Approved for CTEBA Review" Then
					docCurrNomination.gp_approval = "In CTEBA Review"
					docCurrNomination.invitee_dupflag = "Yes"
					Call docCurrNomination.Save(True, False)
				End If
				
			End If
			
lblNext:	
			On Error GoTo lblError
			Set veCurr = vecNominations.GetNextEntry(veCurr)
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No nominations to process.|)	
		If (flgEnableUI) Then
			Print |No nominations to process.|
		End If		
	End If
	
	
lblExit:
	
	strMsg = |Finished. | & lngCount & | nomination(s) processed.|
	
	If (lngCountErrors > 0) Then
		strMsg = strMsg & | | & lngCountErrors & | error(s) occurred.|
	End If
	
	Call Debug(STR_MODULE_NAME & |: | & strMsg)
	
	If (flgEnableUI) Then
		Print strMsg
		Call ShowInfoMsg(strMsg)
	End If		
	
	Exit Sub
	
lblError:
	
	If (flgEnableUI) Then
		Print Err() & |: | & Error() & | in line | & Erl
	End If		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
lblErrorNext:
	
	If (flgEnableUI) Then
		Print Err() & |: | & Error() & | in line | & Erl
	End If		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNext	
	
End Sub

'++LotusScript Development Environment:2:1:intAskQuestion:1:8
Function intAskQuestion(strMsg As String) As Integer
   '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Display a message box with Yes/No buttons and return the selected button.
	'
     'Parameters
     '-----------------------
     'strMsg		The message to display.
     '     
     'Return Values
     '-----------------------
     'IDYES (6) if the user selected 'Yes'
	'IDNO (7) if the user selected 'No'
     '------------------------------------------------------------------------------------------------------   
	
	intAskQuestion = Messagebox(strMsg, MB_YESNO + MB_ICONQUESTION, g_strSystemName)
	
End Function

'++LotusScript Development Environment:2:1:docGetEnrollmentByUNID:1:8
Function docGetEnrollmentByUNID(strUNID As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given the UNID of an enrollment document, return the document.
	
     'Parameters
     '-----------------------
	'strUNID				The UNID of the enrollment document.
     '     
     'Return Values
     '-----------------------
     'docGetEnrollmentByUNID is set to the enrollment document or 
	'Nothing if the document could not be found.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEnrollmentByUNID|
	
	Dim docEnrollment As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Call Debug(STR_MODULE_NAME & |: Searching for enrollment document with UNID [| & strUNID & |].|)
	
	Set docEnrollment = g_dbCurr.GetDocumentByUNID(strUNID)
	
	If (Not docEnrollment Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Unable to find document.|)
	End If
	
lblExit:
	
	Set docGetEnrollmentByUNID = docEnrollment
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docEnrollment = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetESBriefInfo:1:8
Sub GetESBriefInfo(docEventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Update the event brief fields in the event profile.
	'
	'Parameters
	'-----------------------
	'None.
	'	
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetESBriefInfo|
	
	Dim ws As New NotesUIWorkspace
	Dim strEventID As String
	Dim flgOK As Boolean
	Dim docESBrief As NotesDocument
	Dim strInfoMsg As String
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Set the event ID
	strEventID = docEventProfile.ep_id(0)
	
	'Get the event brief
	Set docESBrief = docGetESEventBrief(strEventID)
	
	'Get the amenity db
	Set g_dbAmenity = dbGetAmenityDb  'updated 3/17/2014 SMH
	
	If (Not docESBrief Is Nothing) Then
		
		flgOK = flgGetESBriefFields(docEventProfile, docESBrief)
		
		If (Not flgOK) Then
			Error ERR_SYSTEM_ERROR, |An error occurred when attempting to get information from the Event Solution Brief for event with ID [| & strEventID & |].|	
		End If
	End If
	
	Call docEventProfile.Save(True, True)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call ShowErrorMsg(Err() & |: | & Error() & | in line | & Erl)		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:flgGetESBriefFields:1:8
Function flgGetESBriefFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Copy fields from the supplied Event Solution Brief into the supplied Event Profile.
	'
	'Parameters
	'-----------------------
	'docEventProfile			The event profile to update
	'docESEventBrief			The event brief.
	'     
	'Return Values
	'-----------------------
	'True if all fields were copied, False otherwise.
	'------------------------------------------------------------------------------------------------------   
	Const STR_MODULE_NAME = |flgGetESBriefFields|
	
	Dim item As NotesItem
	Dim strEventName As String
	Dim intCurrPackage As Integer
	Dim strID As String
	Dim strFieldName As String
	Dim flgOK As Boolean	
	Dim x As Integer
	
	Dim vwAmenity As NotesView
	Dim docAmenity As NotesDocument
	Dim dcAmenity As NotesDocumentCollection
	
	Set vwAmenity = g_dbAmenity.GetView("lookupAPReferenceid")
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Assume that the brief has all of the fields unless proved otherwise
	flgOK = True
	
	'Copy fields
	strFieldName = |referenceid|	
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
		Dim itemReferenceID As NotesItem
		Set itemReferenceID = docESEventBrief.GetFirstItem(strFieldName)
		Set dcAmenity = vwAmenity.getAllDocumentsByKey(itemReferenceID.values(0), True)
	End If
	
	strFieldName = |eventname|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	strFieldName = |EditorNames|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |cteba_approval_conditions_L1|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	'DM - We now get these from the amenity db
	Set docAmenity = dcAmenity.getFirstDocument
	Dim item1 As NotesItem
	Dim item2 As NotesItem
	Dim item3 As NotesItem
	Do While Not(docAmenity Is Nothing)
		'Loop through all packages
		strFieldName = |cteba_package|
		If (Not docAmenity.HasItem(strFieldName)) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in amenity.|)			
			flgOK = False
		Else
			If(Not docEventProfile.HasItem(|cteba_package_all|)) Then
				Set item1 = New NotesItem(docEventProfile, |cteba_package_all|, docAmenity.GetFirstItem(strFieldName))
			Else
				Set item1 = docEventProfile.Getfirstitem(|cteba_package_all|)
				Call item1.AppendToTextList(docAmenity.GetFirstItem(strFieldName))
			End If
		End If
		
		strFieldName = |cteba_atype|
		If (Not docAmenity.HasItem(strFieldName)) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in amenity.|)			
			flgOK = False
		Else
			If(Not docEventProfile.HasItem(|cteba_atype_all|)) Then
				Set item2 = New NotesItem(docEventProfile, |cteba_atype_all|, docAmenity.GetFirstItem(strFieldName))
			Else
				Set item2 = docEventProfile.Getfirstitem(|cteba_atype_all|)
				Call item2.AppendToTextList(docAmenity.GetFirstItem(strFieldName))
			End If
		End If		
		
		strFieldName = |amenity_local_total|
		If (Not docAmenity.HasItem(strFieldName)) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in amenity.|)			
			flgOK = False
		Else
			If(Not docEventProfile.HasItem(|amenity_local_GOE_charge_all|)) Then
				Set item3 = New NotesItem(docEventProfile, |amenity_local_GOE_charge_all|, docAmenity.GetFirstItem(strFieldName))
			Else
				Set item3 = docEventProfile.Getfirstitem(|amenity_local_GOE_charge_all|)
				Call item3.AppendToTextList(CStr(docAmenity.GetFirstItem(strFieldName).Values(0)))
			End If
		End If
		
		'added this from below SMH 10/7/14
		strFieldName = |cteba_packages|
		If (Not docESEventBrief.HasItem(strFieldName)) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
			flgOK = False
		Else
			Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
		End If
		
		'DSH, 25 Nov 2018 - Set the default amenity package number
		If docAmenity.defaultYN(0) = "Y" Then
			Set item = docEventProfile.ReplaceItemValue("cteba_package_default", docAmenity.cteba_packagenum(0))
		End If
		
		Set docAmenity = dcAmenity.getNextDocument(docAmenity)
	Loop
	
	strFieldName = |o_ownernotesid|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	strFieldName = |o_pnotesid|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		'flgOK = False
		'25 Nov 2018, DSH - This field is not found on any Japan Briefs in EST
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	strFieldName = |o_owneremail|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	'Now get the Notes URL of the brief
	docEventProfile.ESTURL = docESEventBrief.Notesurl
	
lblExit:
	
	flgGetESBriefFields = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	%rem	
	Const STR_MODULE_NAME = |flgGetESBriefFields|
	
	Dim item As NotesItem
	Dim strEventName As String
	Dim intCurrPackage As Integer
	Dim strID As String
	Dim strFieldName As String
	Dim flgOK As Boolean	
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Assume that the brief has all of the fields unless proved otherwise
	flgOK = True
	
	'Copy fields
	strFieldName = |referenceid|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |eventname|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	strFieldName = |EditorNames|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |cteba_approval_conditions_L1|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		
	
	strFieldName = |cteba_packages|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |cteba_package_all|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		
	
	strFieldName = |cteba_atype_all|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If			
	
	strFieldName = |amenity_local_GOE_charge_all|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		
	
	strFieldName = |o_ownernotesid|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		
	
	strFieldName = |o_pnotesid|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		
	
	strFieldName = |o_owneremail|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If				
	
	'Now get the Notes URL of the brief
	docEventProfile.ESTURL = docESEventBrief.Notesurl
	
lblExit:
	
	flgGetESBriefFields = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	%endrem	
End Function

'++LotusScript Development Environment:2:1:flgSendAdminEmail:1:8
Function flgSendAdminEmail(docEventProfile As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, an admin e-mail template and a merge generator,
	'send the admin e-mail using information from the event profile.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile.
	'docEmailTemplate		The email template to use.
	'myMerger						The merge generator to use.
     '     
     'Return Values
     '-----------------------
     'True if sent OK, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgSendAdminEmail|
	
	Dim flgOK As Boolean
	Dim strEventID As String
	Dim itemBlindCopyTo As NotesItem
	Dim docEmail As NotesDocument
	Dim varSendToAddresses As Variant
	Dim varCopyToAddresses As Variant
	Dim strTask As String
	Dim nameCurr As NotesName
	Dim strCanonicalUserName As String
	Dim objBluePages As BluePages
	Dim strarrCopyTo() As String
	Dim intCountCC As Integer
	Dim strInternetEmailAddress As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	flgOK = False
	
	'Get a Blue Pages object so that we can lookup internet e-mail addresses
	Set objBluePages = New BluePages("http://bluepages.ibm.com/BpHttpApisv3/apilocator")                 
	
	'Initialise an array to use when storing internet e-mail addresses
	Redim strarrCopyTo(0)
	
	'Get the event ID
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Call Debug(STR_MODULE_NAME & |: Sending admin e-mail for event ID [| & strEventID & |].|)	
	
	Set itemBlindCopyTo = docEmailTemplate.GetFirstItem("et_BlindCopyTo")
	
	myMerger.FromAddress = Cstr(docEmailTemplate.et_From(0))	
	'myMerger.templateBody = Cstr(docEmailTemplate.et_Text(0))
	'myMerger.templateSubject = Cstr(docEmailTemplate.et_Subject(0))
	
	If (Cstr(g_docDbProfile.dp_EmailMode(0)) = |Test|) Then
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Test].  Sending admin e-mail to the following test mode e-mail addresses:|)		
		varSendToAddresses = g_docDbProfile.dp_TestModeEmailAddress
		Forall varAddress In varSendToAddresses
			Call Debug(STR_MODULE_NAME & |: | & Cstr(varAddress))	
		End Forall
	Else
		'Send the admin e-mail to the event owners and copy to anyone of the notification list
		Set nameCurr = New NotesName(docEventProfile.offeringQuestionsName(0))
		
		'Check whether an internet format name was supplied
		strInternetEmailAddress = nameCurr.Addr821
		
		'If it wasn't, do a Blue Pages lookup to get it
		If (strInternetEmailAddress = ||) Then
			strCanonicalUserName = nameCurr.Canonical
			flgOK = flgGetInternetEmailAddrFromBluePages(objBluePages, strCanonicalUserName, strInternetEmailAddress)
			If (Not flgOK) Then
				Error ERR_SYSTEM_ERROR, |Unable to create admin e-mail for event [| & strEventID & |].  Could not get internet e-mail address for [| & strCanonicalUserName & |].|
			End If
		End If
		
		varSendToAddresses = strInternetEmailAddress
		
		Forall varName In docEventProfile.ep_AdditionalNotificationEmails
			If (Cstr(varName) <> ||) Then
				Set nameCurr = New NotesName(Cstr(varName))
				
				'Check whether an internet format name was supplied
				strInternetEmailAddress = nameCurr.Addr821
				
				'If it wasn't, do a Blue Pages lookup to get it
				If (strInternetEmailAddress = ||) Then
					strCanonicalUserName = nameCurr.Canonical
					flgOK = flgGetInternetEmailAddrFromBluePages(objBluePages, strCanonicalUserName, strInternetEmailAddress)
					If (Not flgOK) Then
						Error ERR_SYSTEM_ERROR, |Unable to create admin e-mail for event [| & strEventID & |].  Could not get internet e-mail address for [| & strCanonicalUserName & |].|
					End If
				End If
				
				Redim Preserve strarrCopyTo(intCountCC)
				strarrCopyTo(intCountCC) = strInternetEmailAddress
				intCountCC = intCountCC + 1
			End If
		End Forall
		
		varCopyToAddresses = strarrCopyTo
		
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Production].  Sending admin e-mail to:|)
		Call Debug(STR_MODULE_NAME & |: | & Cstr(varSendToAddresses))	
		'If there are any Copy to addresses, list them too
		If (varCopyToAddresses(0) <> ||) Then
			Call Debug(STR_MODULE_NAME & |: Copying admin e-mail to:|)
			Forall varAddress In varCopyToAddresses
				Call Debug(STR_MODULE_NAME & |: | & Cstr(varAddress))	
			End Forall
		End If
	End If
	
	'Create the email
	Set docEmail = myMerger.getEMailFromDocument(docEventProfile, varSendToAddresses, varCopyToAddresses, itemBlindCopyTo.values, Cstr(docEmailTemplate.et_Format(0)))
	
	If (docEmail Is Nothing) Then 
		Error ERR_SYSTEM_ERROR, |Unable to create admin e-mail for event [| & strEventID & |].|
	Else
		If (myMerger.isCreatedOnServer) Then
			Call docEmail.Save(True, False )	
		Else
			Call docEmail.Send(False)
		End If
		
		Call Debug(STR_MODULE_NAME & |: Admin e-mail sent.|)	
		
		strTask = Cstr(docEmailTemplate.et_AdminTask(0))
		
		Select Case strTask
			
		Case |pre2days|:
			docEventProfile.ep_DateAdminPre2DaysEmailSent = Now()
			
		Case |post1week|:
			docEventProfile.ep_DateAdminPost1WeekEmailSent = Now()
			
		Case |post2weeks|:
			docEventProfile.ep_DateAdminPost2WeeksEmailSent = Now()
			
		Case Else
			Error ERR_SYSTEM_ERROR, |An unknown admin task [| & strTask & |] was found for event [| & strEventID & |].|	
			
		End Select
		
		Call docEventProfile.Save(True, False)
		
		'E-mail has been sent
		flgOK = True
		
	End If	
	
lblExit:
	
	flgSendAdminEmail = flgOK
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:StoreAttendeeTypes:1:8
Sub StoreAttendeeTypes(docAREventProfile As NotesDocument, docEventProfile As NotesDocument)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Set the value assigned to the 'Registration type(s) to include' field in the Attendee Repository
	'event profile as follows:
	'	
	'Given a list of possible types of attendee, remove from this list all of the values in 
	'the 'Attendee types to exclude from metrics' field in the Database Profile.
	'	
	'For example, if the list of possible attendee types is:
		'Customer/Delegate
		'Business Partner
		'IBM Executive
		'IBM Employee
		'Vendor Staff
		'Press/Analyst
		'Speaker
	'and the 'Attendee types to exclude from metrics' field lists:
		'IBM Executive
		'IBM Employee
		'Vendor Staff
	'The value assigned to the 'Registration type(s) to include' field is:
		'Customer/Delegate
		'Business Partner
		'Press/Analyst
		'Speaker
	'
     'Parameters
     '----------------
	'docAREventProfile						The Attendee Repository event profile to be updated.
	'docEventProfile							The event profile in this database.
	'
     'Return Values
     '-------------------
     'None..
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |StoreAttendeeTypes|
	
	Dim strCurrLocale As String	
	Dim docLocaleProfile As NotesDocument
	Dim strlstAttendeeTypes List As String
	Dim strarrAttendeeTypes() As String
	Dim strTranslatedAttendeeType As String
	Dim varAttendeeTypes As Variant
	Dim varExcludedAttendeeTypes As Variant
	Dim strarrIncludedAttendeeTypes() As String
	Dim flgInclude As Boolean
	Dim intCurrIndex As Integer
	Dim intLen As Integer
	Dim intPos As Integer
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'To get the possible set of attendee types for the event we have to:
	'1. Find the locale profile for each locale that is configured for the event
	'2. Get the set of attendee types that have been specified for that locale
	'3. Get the English translation of each of these types.
	'4. Build a list with no duplicates of the English translations of all attendee types for all locales that are configured for the event
	
	Erase strlstAttendeeTypes
	
	Forall varLocale In docEventProfile.ep_Locales
		
		strCurrLocale = Cstr(varLocale)
		
		Call Debug(STR_MODULE_NAME & |: Attendee types for locale [| & strCurrLocale & |].|) 
		
		Set docLocaleProfile = docGetLocaleProfile(strCurrLocale)
		
		Forall varAttendeeTypeValue In docLocaleProfile.lc_AttendeeTypeValues
			intLen = Len(varAttendeeTypeValue)
			intPos = Instr(varAttendeeTypeValue, "~")
			strTranslatedAttendeeType = Right$(Cstr(varAttendeeTypeValue), intLen - intPos)
			If (Not Iselement(strlstAttendeeTypes(strTranslatedAttendeeType))) Then
				Call Debug(STR_MODULE_NAME & |: Adding [| & strTranslatedAttendeeType & |].|) 
				strlstAttendeeTypes(strTranslatedAttendeeType) = strTranslatedAttendeeType		
			Else
				Call Debug(STR_MODULE_NAME & |: Skipping [| & strTranslatedAttendeeType & |].  Already in list|) 
			End If
		End Forall
		
	End Forall
	
	'Convert the list to an array for storing
	intCurrIndex = 0
	Redim strarrAttendeeTypes(intCurrIndex)
	
	Forall varItem In strlstAttendeeTypes
		Redim Preserve strarrAttendeeTypes(intCurrIndex)
		strarrAttendeeTypes(intCurrIndex) = Cstr(Listtag(varItem))
		intCurrIndex = intCurrIndex + 1
	End Forall
	
	Call Debug(STR_MODULE_NAME & |: [| & Cstr(intCurrIndex) & |] attendee types found.|) 
	
	'Now get the excluded attendee types
	varExcludedAttendeeTypes = g_docDbProfile.dp_ARExclAttendeeTypes
	
	'Write to debug log
	Call Debug(STR_MODULE_NAME & |: List of attendee types to exclude (from database profile):|) 
	Forall varExcludedAttendeeType In varExcludedAttendeeTypes
		Call Debug(STR_MODULE_NAME & |: [| & Cstr(varExcludedAttendeeType) & |]|) 
	End Forall	
	
	intCurrIndex = 0
	Redim strarrIncludedAttendeeTypes(0)
	
	Forall varAttendeeType In strarrAttendeeTypes()
		flgInclude = True
		intLen = Len(varAttendeeType)
		intPos = Instr(varAttendeeType, "~")
		Forall varExcludedAttendeeType In varExcludedAttendeeTypes
			If (Trim$(Ucase$(Right$(Cstr(varAttendeeType), intLen - intPos))) = Trim$(Ucase$(Cstr(varExcludedAttendeeType)))) Then
				flgInclude = False
				Exit Forall
			End If
		End Forall
		If (flgInclude) Then
			Redim Preserve strarrIncludedAttendeeTypes(intCurrIndex)
			strarrIncludedAttendeeTypes(intCurrIndex) = Right$(Cstr(varAttendeeType), intLen - intPos)
			intCurrIndex = intCurrIndex + 1
		End If		
	End Forall
	
	Call Debug(STR_MODULE_NAME & |: List of attendee types to include (in Attendee Repository event profile):|) 
	Forall varAttendeeType In strarrIncludedAttendeeTypes()
		Call Debug(STR_MODULE_NAME & |: [| & Cstr(varAttendeeType) & |]|) 
	End Forall	
	
	'Update the AR event profile
	Call CopyToAREventProfile(docAREventProfile, |epmr_regtypevalues|, strarrAttendeeTypes())	
	Call CopyToAREventProfile(docAREventProfile, |ep_resexcludetype|, strarrIncludedAttendeeTypes())
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:LoadTopLinkDefaults:1:8
Sub LoadTopLinkDefaults(doc As NotesDocument, strLocale As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a locale and a document, find the locale settings document in the current database
	'for the supplied locale and copy values from it into the supplied document.
	'
     'Parameters
     '-----------------------
	'doc 					The document to copy the fields to.	
	'strLocale			The locale
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |LoadTopLinkDefaults|
	
	Dim docLocaleSettings As NotesDocument
	Dim strLocaleName As String
	Dim intReply As Integer	
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Locale: [| & strLocale & |].|)
	
	strLocaleName = strGetLocaleName(strLocale)
	
	intReply = intAskQuestion(|This action will reload the default top link information for | & strLocaleName & | web pages.  The current top link information will be overwritten with the default values.| & Chr$(13) & Chr$(13) & |Do you want to continue?|)
	If (intReply <> IDYES) Then
		Goto lblExit
	End If
	
	Print |Loading top link defaults...|
	
	'Find the locale settings in this database
	Set docLocaleSettings = docGetLocaleSettings(strLocale)
	
	'Now copy the default values
	Call CopyFromDocument(docLocaleSettings, |ls_TopLinkText|, doc, |rp_TopLinkText|)
	Call CopyFromDocument(docLocaleSettings, |ls_TopLinkURL|, doc, |rp_TopLinkURL|)	
	
	Call doc.Save(True, False)
	
	Print |Top link defaults loaded.|
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docGetEmailTemplateByUNID:1:8
Function docGetEmailTemplateByUNID(strUNID As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given the UNID of an e-mail template, return the e-mail template document.
	
     'Parameters
     '-----------------------
	'strUNID				The UNID of the e-mail template.
     '     
     'Return Values
     '-----------------------
     'docEmailTemplate is set to the e-mail template or Nothing if a template could not be found.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEmailTemplateByUNID|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEmailTemplatesByUNID|
	
	Dim view As NotesView
	Dim docEmailTemplate As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Call Debug(STR_MODULE_NAME & |: Searching for document with UNID [| & strUNID & |] in view [| & view.Aliases(0) & |].|)
	
	Set docEmailTemplate = view.GetDocumentByKey(strUNID , True)
	
	If (Not docEmailTemplate Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Unable to find document.|)
	End If
	
lblExit:
	
	Set docGetEmailTemplateByUNID = docEmailTemplate
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docEmailTemplate = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:PublishWeb2CRMEvent:1:8
Sub PublishWeb2CRMEvent(docEventProfile As NotesDocument, intReturnCode As Integer)
	   '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile start processing the configuration.
     '
     'Parameters
     '-----------------------
     'docEventProfile			The event profile
	'intReturnCode				(Returned) The return code.
	'									One of:
	'										INT_AR_LOOKUP_ERROR		An error occurred when attempting to lookup information from Attendee Repository
     '     									INT_UNKNOWN_REASON			An unexpected error occurred
	'
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PublishWeb2CRMEvent|
	
	Dim intReturn As Integer
	Dim strEventID As String
	Dim docAREventProfile As NotesDocument
	Dim intRC As Integer
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	intReturn = INT_UNKNOWN_REASON
	
	'Check in Attendee Repository whether an event profile exists for the event
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Set docAREventProfile = docGetAREventProfile(strEventID, intRC)
	
	Select Case intRC
		
	Case INT_FOUND:
		Call Debug(STR_MODULE_NAME & |: An event profile exists in Attendee Repository for event ID [| & strEventID & |].|) 
		
	Case INT_NOT_FOUND:
		Call Debug(STR_MODULE_NAME & |: An event profile does NOT exist in Attendee Repository for event ID [| & strEventID & |].|) 
		
	Case Else
		intReturn = INT_AR_LOOKUP_ERROR
		Error ERR_SYSTEM_ERROR, |Unable to configure Web2CRM in Attendee Repository. Unable to check whether an event profile exists in Attendee Repository for event ID [| & strEventID & |].|
		
	End Select
	
	'The event profile exists in Attendee Repository so proceed with the web2crm configuration
	If Not (docAREventProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Updating EXISTING event profile in Attendee Repository for event ID [| & strEventID & |].|) 
		Call UpdateWeb2CRMSettings(docEventProfile, docAREventProfile, intRC)
		intReturn = intRC
	End If
	
lblExit:
	
	'Set the return code 
	intReturnCode = intReturn
	
	Call Debug(STR_MODULE_NAME & |: Finished.  Return code [| & Cstr(intReturn) & |]|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableEightColumnsVer1_0:6:8
%REM
	Sub CreateTableEightColumns
	Description: Version 1.0.
%END REM
Sub CreateTableEightColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Call CreateTableSixColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, doc_enrollForm)
	
	' Create column 7 & 8 (Track 7-8)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "7", Cstr(sCtr), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "7" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If Cstr(sCtr) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t7s| & Cstr(sCtr) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & "7" & "s" & Cstr(sCtr) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "8", Cstr(sCtr), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "8", Cstr(sCtr), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "8", Cstr(sCtr), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "8", Cstr(sCtr), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "8" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t8s| & Cstr(sCtr) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & "8" & "s" & Cstr(sCtr) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
		sCtr = sCtr + 1
	Next
End Sub

'++LotusScript Development Environment:2:1:docCreateAgenda:1:8
Function docCreateAgenda(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Create a new  agenda for the specified locale.
     '
     'Parameters
     '-----------------------	
	'docEventProfile				The event profile that the agenda will be associated with.
	'strLocale						The locale of the agenda to create.
     '     
     'Return Values
     '-----------------------
     'The newly created agenda or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   	
	
	Const STR_MODULE_NAME = |docCreateAgenda|
	
	Dim docAgenda As NotesDocument
	Dim docLocaleProfile As NotesDocument
	Dim item As NotesItem
	Dim strTmp As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Print |Creating | & strGetLocaleName(strLocale) & | agenda for the '| & docEventProfile.eventname(0) & |' event...|
	
	Set docAgenda = g_dbCurr.CreateDocument
	
	docAgenda.form = "agendacontent"
	docAgenda.ep_id = docEventProfile.ep_id(0)	
	docAgenda.ep_EventTitle = docEventProfile.eventname(0)	
	docAgenda.eventname = docEventProfile.eventname(0)
	docAgenda.startmonth = docEventProfile.startmonth(0)
	docAgenda.startday = docEventProfile.startday(0)
	docAgenda.startyear = docEventProfile.startyear(0)
	docAgenda.city= docEventProfile.loc_confcity(0)
	docAgenda.country = docEventProfile.loc_confcountry(0)
	docAgenda.geo = docEventProfile.geo(0)
	docAgenda.status = docEventProfile.status(0)	
	docAgenda.abs_info = docEventProfile.offeringDescription(0)
	docAgenda.Locale = strLocale
	docAgenda.LocaleName = strGetLocaleName(strLocale)	
	
	'Set default values from the locale profile
	Set docLocaleProfile = docGetLocaleProfile(strLocale)
	
	docAgenda.age_sectiontiltle = docLocaleProfile.lc_AgendaPageSectionTitle
	docAgenda.age_colone = docLocaleProfile.lc_AgendaPageCol1Title
	docAgenda.age_coltwo = docLocaleProfile.lc_AgendaPageCol2Title
	
	Set item = New NotesItem(docAgenda, "loc_info", docEventProfile.loc_conffacility(0) + "<br />")
	Call item.AppendToTextList( Chr(13) )
	
	If strLocale = "ja_JP" Then
		Call item.AppendToTextList( docEventProfile.loc_confcountry(0)  + "<br />")
		Call item.AppendToTextList( Chr(13) )		
		strTmp = docEventProfile.loc_confroom(0)
		If strTmp <> "" Then
			Call item.AppendToTextList( strTmp  + "<br />")
			Call item.AppendToTextList( Chr(13) )
		End If		
		Call item.AppendToTextList( docEventProfile.loc_confzip(0)  + "<br />")
		Call item.AppendToTextList( Chr(13) )	
		Call item.AppendToTextList( docEventProfile.loc_confstate(0) + "<br />")
		Call item.AppendToTextList( Chr(13) )
		Call item.AppendToTextList( docEventProfile.loc_confcity(0)  + "<br />")
		Call item.AppendToTextList( Chr(13) )		
		strTmp = docEventProfile.loc_confstreet2(0)
		If strTmp <> "" Then
			Call item.AppendToTextList( strTmp  + "<br />")
			Call item.AppendToTextList( Chr(13) )
		End If	
		Call item.AppendToTextList( docEventProfile.loc_confstreet(0) + "<br />" )
	Else
		Call item.AppendToTextList( docEventProfile.loc_confstreet(0) + "<br />" )
		Call item.AppendToTextList( Chr(13) )
		strTmp = docEventProfile.loc_confstreet2(0)
		If strTmp <> "" Then
			Call item.AppendToTextList( strTmp  + "<br />")
			Call item.AppendToTextList( Chr(13) )
		End If
		strTmp = docEventProfile.loc_confroom(0)
		If strTmp <> "" Then
			Call item.AppendToTextList( strTmp  + "<br />")
			Call item.AppendToTextList( Chr(13) )
		End If
		Call item.AppendToTextList( docEventProfile.loc_confcity(0) + ", " + docEventProfile.loc_confstate(0) + " " + docEventProfile.loc_confzip(0)  + "<br />")
		Call item.AppendToTextList( Chr(13) )
		Call item.AppendToTextList( docEventProfile.loc_confcountry(0)  + "<br />")		
	End If
	
	strTmp = docEventProfile.loc_confphone(0)
	If strTmp <> "" Then
		Call item.AppendToTextList( Chr(13) )
		Call item.AppendToTextList( strTmp + "<br />")
	End If
	
	strTmp = docEventProfile.loc_conffax(0)
	If strTmp <> "" Then
		Call item.AppendToTextList( Chr(13) )
		Call item.AppendToTextList( strTmp + "<br />")
	End If
	
	strTmp = docEventProfile.loc_confurl(0)
	If strTmp <> "" Then
		Call item.AppendToTextList( Chr(13) )
		Call item.AppendToTextList( strTmp + "<br />")
	End If
	
	Call docAgenda.ComputeWithForm(True, True)
	
	Print |Agenda created.|
	
lblExit:
	
	Set docCreateAgenda = docAgenda
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docAgenda = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docGetInvitationByEmail:1:8
Function docGetInvitationByEmail(strEventID As String, strInvEmail As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID and an invitation e-mail, check whether an invitation in 'Invited' status
	'exists in this database for the specified event ID and invitation e-mail.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'strEventID				The event ID to check.
	'strInvEmail			The invitation e-mail to check.
	'
     'Return Values
     '-------------------
     'If an invitation exists for the event ID and invitation e-mail the invitation is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetInvitationByEmail|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupInvitationsByEmail|
	
	Dim view As NotesView
	Dim docInvitation As NotesDocument
	Dim strarrKey(1) As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strarrKey(0) = strEventID
	strarrKey(1) = Lcase$(strInvEmail)
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for invitation.  Event ID [| & strarrKey(0) & |] invitation e-mail [| & strarrKey(1) & |].|) 
	
	Set docInvitation = view.GetDocumentByKey(strarrKey, True)
	
	If (Not docInvitation Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetInvitationByEmail = docInvitation
	
	Exit Function
	
lblError:
	
	Set docInvitation = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
	
End Function

'++LotusScript Development Environment:2:2:GetMarketingRoles:1:8
Sub GetMarketingRoles(strLocale As String, strBrand As String, docCurr As NotesDocument, strScript As String)
		'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'
	'
     'Parameters
     '-----------------------
	'strLocale				The locale
	'strBrand				The brand for the event (as defined in ES)
	'docCurr				The content document for the web page being updated
	'strScript				The Javascript declarations to update
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetMarketingRoles|
	
	Dim strQuestionSetID As String
	Dim docMIQuestionSetLookup As NotesDocument
	Dim docRoleMapping As NotesDocument
	Dim strText As String
	Dim varValues As Variant
	Dim varMappingValues As Variant
	Dim strEnglishText As String
	Dim strlstNewList List As String
	Dim strarrNewValues() As String
	Dim intCountNewValues As Integer
	Dim intCurrValue As Integer
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Getting marketing roles for brand [| & strBrand & |] locale [| & strLocale & |]...|)
	
	'Get the Marketing Roles lookup document
	strQuestionSetID = |TDUD-7PRQTD|
	
	'Add two JS arrays of potential dropdown values for Roles full 32 set or subset for specific brand that user can switch using the last "More" selection.
	Dim strRolesJSArray As String
	strRolesJSArray = "var RolesLists = new Array();"
	strRolesJSArray = strRolesJSArray + |RolesLists['fullSet']   = new Array();|
	strRolesJSArray = strRolesJSArray + |RolesLists['subSet']    = new Array();|
	
	Set docMIQuestionSetLookup = docGetMIQuestionSetLookup(strQuestionSetID, strLocale)
	
	If (Not docMIQuestionSetLookup Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|)
		
		strText = Cstr(docMIQuestionSetLookup.GetItemValue(|Q1_text|)(0))
		Call Debug(STR_MODULE_NAME & |: Question text is [| & strText & |].|)
		
		Call docCurr.ReplaceItemValue(|label_role|, strText)
		strScript = strScript & |labels['label_role']="| & strText & |";|
		
		varValues = docMIQuestionSetLookup.GetItemValue(|Q1_values|)
		Call Debug(STR_MODULE_NAME & |: Answer list is:|)		
		Forall varValue In varValues
			Call Debug(STR_MODULE_NAME & |: [| & Cstr(varValue) & |].|) 	
		End Forall
		Call docCurr.ReplaceItemValue(|values_role|, varValues)
		
		'Find the roles for the brand of this event
		Set docRoleMapping = docGetRoleMapping(strBrand)
		
		'If we find a mapping, get the list of roles
		If (Not docRoleMapping Is Nothing) Then
			varMappingValues = docRoleMapping.GetItemValue(|rm_RoleName|)
			
			Call Debug(STR_MODULE_NAME & |: Start of mappings|)
			Forall varMappingItem In varMappingValues
				Call Debug(STR_MODULE_NAME & |: [| & Cstr(varMappingItem) & |]|)
			End Forall
			Call Debug(STR_MODULE_NAME & |: End of mappings|)
			
			'This gets us the English names of the roles for this brand
			'i.e. The locale specific list consists of items in the format:
			'	Locale specific text | Siebel code=English text
			'
			'The English list is in the format:
			'	English text
			'
			'Now build a lookup list that consists of only those items in the locale specific list where the English text
			'matches the English text in the list of roles from the mapping document
			'i.e. If the locale specific list is:
			'	Locale specific text A | Siebel code A=English text A
			'	Locale specific text B | Siebel code B=English text B
			'	Locale specific text C | Siebel code C=English text C
			'and the list of roles from the mapping document is:
			'	English text B
			'Then the new list will be:
			'	Locale specific text B | Siebel code B=English text B
			'
			'Full list
			Dim strLabelList As String
			Dim strValuesList As String
			Dim strSubLabelList As String
			Dim strSubValuesList As String
			Dim intLabelListLength As Integer
			Dim intValuesListLength As Integer
			
			Forall varItem In varValues
				strEnglishText = Strright(Cstr(varItem), |=|)
				
				strLabelList   = strLabelList  + |"| +  Strleft(Cstr(Trim(varItem)),  "|") + |",|
				strValuesList  = strValuesList + |"| +  Strright(Cstr(Trim(varItem)), "|") + |",|
				
				Forall varMappingItem In varMappingValues
					If (Cstr(varMappingItem) = strEnglishText) Then
						' One of the items in the master roles list has been found in the brand subset
						strlstNewList(strEnglishText) = Cstr(varItem)
						strSubLabelList   = strSubLabelList  + |"| +  Strleft(Cstr(Trim(varItem)),  "|") + |",|
						strSubValuesList  = strSubValuesList + |"| +  Strright(Cstr(Trim(varItem)), "|") + |",|
						Exit Forall
					End If
				End Forall
			End Forall			
			'Add the "Other" value
			strlstNewList("Other") = strOther & " | Other"
			
			'  Integration Development | IAH=Integration Development
			intLabelListLength  = Len(strLabelList)
			intValuesListLength = Len(strValuesList)
			strRolesJSArray = strRolesJSArray +  "RolesLists['fullSet'][0]   = new Array(" + Left(strLabelList ,intLabelListLength  -1) + ");"
			strRolesJSArray = strRolesJSArray +  "RolesLists['fullSet'][1]   = new Array(" + Left(strValuesList,intValuesListLength -1) + ");"
			
			'Subset
			intLabelListLength  = Len(strSubLabelList)
			intValuesListLength = Len(strSubValuesList)
			strRolesJSArray = strRolesJSArray +  |RolesLists['subSet'][0]   = new Array(| + strSubLabelList  + |"| + strOther +|");|
			strRolesJSArray = strRolesJSArray +  |RolesLists['subSet'][1]   = new Array(| + strSubValuesList + |"Other");|
			
			Call Debug(STR_MODULE_NAME & |: Start of new list|)
			Forall varTemp In strlstNewList
				Call Debug(STR_MODULE_NAME & |: [| & Cstr(varTemp) & |]|)
			End Forall
			Call Debug(STR_MODULE_NAME & |: End of new list|)
			
			'Convert the list into an array so that we can store it
			intCountNewValues = 0
			Forall varTemp In strlstNewList
				intCountNewValues = intCountNewValues + 1
			End Forall
			
			If (intCountNewValues > 0) Then
				Redim strarrNewValues(intCountNewValues - 1)
				intCurrValue = 0
				Forall varTemp In strlstNewList
					strarrNewValues(intCurrValue) = Cstr(varTemp)
					intCurrValue = intCurrValue + 1
				End Forall
			Else
				Redim strarrNewValues(0)
			End If
			
			Call docCurr.ReplaceItemValue(|values_brand_role|, strarrNewValues())
			
			' The  string variable  strRolesJSArray is populated during this call and appended to the dynamic JS header list here	
			strScript = strScript + Chr(13) +  strRolesJSArray			
		Else
			'If there is no mapping just return a blank list
			Call docCurr.ReplaceItemValue(|values_brand_role|, varValues)
		End If		
	Else
		
		Error ERR_SYSTEM_ERROR, |Unable to find marketing roles lookup question set [| & strQuestionSetID & |] for locale [| & strLocale & |].|	
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:flgGetCTEBAFields:1:8
Function flgGetCTEBAFields(docEventProfile As NotesDocument, docESEventBrief As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Copy CTEBA related fields from the supplied Event Solution Brief into the supplied Event Profile.
	'
	'Parameters
	'-----------------------
	'docEventProfile			The event profile to update
	'docESEventBrief			The event brief.
	'     
	'Return Values
	'-----------------------
	'True if all CTEBA fields were copied, False otherwise.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgGetCTEBAFields|
	
	Dim apView As NotesView
	Dim apCol As NotesDocumentCollection
	Dim apDoc As NotesDocument
	Dim item As NotesItem
	Dim strEventName As String
	Dim intCurrPackage As Integer
	Dim strID As String
	Dim strFieldName As String
	Dim strAPVersion As String
	Dim flgOK As Boolean	
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Assume that the brief has all of the CTEBA fields unless proved otherwise
	flgOK = True
	
	'First we should clear all the CTEBA fields on the GRP Event Profile
	For intCurrPackage = 1 To 5		
		strID = |_| & CStr(intCurrPackage)
		
		strFieldName = |cteba_package| & strID
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If
		
		strFieldName = |amenity_local_GOE_charge| & strID			
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If
		
		strFieldName = |amenity_USD_GOE_charge| & strID
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If
		
		strFieldName = |amenity_types| & strID		
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If
		
		strFieldName = |cteba_atype| & strID		
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If	
		
		strFieldName = |amenity_underclip| & strID
		If docEventProfile.HasItem(strFieldName) Then
			Call docEventProfile.Replaceitemvalue(strFieldName, "")
		End If
		
	Next
	
	'Clear new multiple amentiy package field if it exists
	strFieldName = |package_detail_grp|		
	If docEventProfile.HasItem(strFieldName) Then
		Set item = docEventProfile.GetFirstItem(strFieldName)
		Do While Not(item Is Nothing)
			Call item.Remove()
			Set item = docEventProfile.GetFirstItem(strFieldName)
		Loop
	End If
	
	If docESEventBrief.HasItem("cteba_ap_version") And (docESEventBrief.cteba_ap_version(0) <> "") Then
		Print "Getting new CTEBA amenity package docs"
		docEventProfile.cteba_ap_version = docESEventBrief.cteba_ap_version
		
		If g_dbAmenityPackage Is Nothing Then
			Set g_dbAmenityPackage = dbGetAmenityPackageDb
		End If
		If Not g_dbAmenityPackage Is Nothing Then
			Dim strFieldNameAP As String
			
			Set apView = g_dbAmenityPackage.GetView("lookupAPreferenceid")
			If Not apView Is Nothing Then

				Set apCol = apView.GetAllDocumentsByKey(docESEventBrief.referenceid(0), True)
				If apCol.Count > 0 Then
					Dim ub As Integer
					Dim detailPackage() As String
					
					ReDim detailPackage(0)
					
					Set apDoc = apCol.GetFirstDocument
					While Not apDoc Is Nothing
						
						'Check for new field for multiple amentiy packages
						If apDoc.HasItem("package_detail_grp") Then
							
							If apDoc.package_detail_grp(0) <> "" Then
								If detailPackage(0) = "" Then ub = 0 Else ub = UBound(detailPackage) + 1
								ReDim Preserve detailPackage(ub)
								detailPackage(ub) = apDoc.package_detail_grp(0)
							End If
							
						Else
							strID = |_| & CStr(apDoc.cteba_packagenum(0))
							
							strFieldNameAP = |cteba_package|
							strFieldName = |cteba_package| & strID
							If (Not apDoc.HasItem(strFieldNameAP)) Then
								Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldNameAP & |] on amenity package.|)			
								flgOK = False
							Else
								Call docEventProfile.CopyItem(apDoc.GetFirstItem(strFieldNameAP), strFieldName)
							End If
							
							strFieldNameAP = |amenity_local_total|
							strFieldName = |amenity_local_GOE_charge| & strID
							If (Not apDoc.HasItem(strFieldNameAP)) Then
								Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldNameAP & |] on amenity package.|)			
								flgOK = False
							Else
								Call docEventProfile.CopyItem(apDoc.GetFirstItem(strFieldNameAP), strFieldName)
							End If
							
							strAPVersion = replaceSubString(docEventProfile.cteba_ap_version(0),"V", "")
							If strAPVersion = "" Then strAPVersion = "0"
							If CInt(strAPVersion) >= 3 Then
								strFieldNameAP = |USD_PackageTotal|
								strFieldName = |amenity_USD_GOE_charge| & strID
								If (Not apDoc.HasItem(strFieldNameAP)) Then
									Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldNameAP & |] on amenity package.|)			
									flgOK = False
								Else
									Call docEventProfile.CopyItem(apDoc.GetFirstItem(strFieldNameAP), strFieldName)
								End If
							End If
							
							strFieldNameAP = |amenity_types|
							strFieldName = |amenity_types| & strID	
							If (Not apDoc.HasItem(strFieldNameAP)) Then
								Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldNameAP & |] on amenity package.|)			
								flgOK = False
							Else
								Call docEventProfile.CopyItem(apDoc.GetFirstItem(strFieldNameAP), strFieldName)
							End If
							
							strFieldNameAP = |cteba_atype|
							strFieldName = |cteba_atype| & strID		
							If (Not apDoc.HasItem(strFieldNameAP)) Then
								Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldNameAP & |] on amenity package.|)			
								flgOK = False
							Else
								Call docEventProfile.CopyItem(apDoc.GetFirstItem(strFieldNameAP), strFieldName)
							End If
						End If			
						
						Set apDoc = apCol.GetNextDocument(apDoc)
					Wend
					
					'AJ 12/10/2013 Set new amenity field for multiple packages 
					'DH - 22 Oct 2014, David Holbrook - Change amenity field from text to rich text to
					'	avoid hitting a maximum field size limit
					If detailPackage(0) <> "" Then
						Dim rtitem As NotesRichTextItem
						Dim z As Long
						Set rtitem = New NotesRichTextItem(docEventProfile, "package_detail_grp")
						For z = 0 To (UBound(detailPackage))
							If z = 0 Then
								Call rtitem.AppendText(detailPackage(z))
							Else
								Call rtitem.AddNewLine(1)
								Call rtitem.AppendText(detailPackage(z))
							End If
						Next
						Call rtitem.Compact() 'Prevents duplicate rich text items from being created
					End If
				Else
					Call Debug(STR_MODULE_NAME & |: No amentiy packages for this brief.|)	
					docEventProfile.cteba_package_1 = ""
					docEventProfile.amenity_local_GOE_charge_1 = 0
					docEventProfile.amenity_types_1 = ""
					docEventProfile.cteba_atype_1 = ""
					docEventProfile.amenity_underclip_1 = ""
				End If
			Else
				flgOK = False
				Call Debug(STR_MODULE_NAME & |: Unable to get handle on amenity package view.|)			
			End If
			
		End If
	Else
		'Copy each set of fields that describe a package
		'TV - Updated Nov 22 2011 to match corresponding change in ES where the number of
		'packages was reduced from 10 to 5.
		For intCurrPackage = 1 To 5
			
			strID = |_| & CStr(intCurrPackage)
			
			strFieldName = |cteba_package| & strID
			If (Not docESEventBrief.HasItem(strFieldName)) Then
				Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
				flgOK = False
			Else
				Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
			End If
			
			strFieldName = |amenity_local_GOE_charge| & strID		
			If (Not docESEventBrief.HasItem(strFieldName)) Then
				Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)				
				flgOK = False
			Else
				Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
			End If		
			
			strFieldName = |amenity_types| & strID		
			If (Not docESEventBrief.HasItem(strFieldName)) Then
				Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)				
				flgOK = False
			Else
				Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
			End If
			
			strFieldName = |cteba_atype| & strID		
			If (Not docESEventBrief.HasItem(strFieldName)) Then
				Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)				
				flgOK = False
			Else
				Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
			End If
			
			strFieldName = |amenity_underclip| & strID		
			If (Not docESEventBrief.HasItem(strFieldName)) Then
				Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)				
				flgOK = False
			Else
				Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
			End If
			
		Next
	End If
	
	'Copy any additional CTEBA fields
	strFieldName = |cteba_cc|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |cteba_status|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	strFieldName = |cteba_amenities|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	'AJ 12/11/2013 Used to determine which amenity fields to get from ES brief
	strFieldName = |cteba_ap_version|	
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		docEventProfile.cteba_ap_version = ""
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	'AJ 08/21/2014 Used to determine whether to show amenities on registration page and send client letter emails
	If (docESEventBrief.HasItem(|GRP_NO_CL|)) Then
		docEventProfile.GRP_NO_CL = docESEventBrief.GRP_NO_CL(0)
	Else
		docEventProfile.GRP_NO_CL = ""
	End If
	
	strFieldName = |o_ownername|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If		

	strFieldName = |o_owneremail|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If	
	
	strFieldName = |o_ownernotesid|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If			
	
	' DH - 21 Oct 2014, David Holbrook - Added currency 3 character code for CTEBA confirmation letters
	strFieldName = |cteba_ric|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief. Setting to blank.|)			
		docEventProfile.cteba_ric = ||
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
	End If
	
	' AJ - 10 March 2015, Allison Janicki - Added to prevent google search for invitation only events
	strFieldName = |cteba_invitation|
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief. Setting to blank.|)			
		docEventProfile.cteba_invitation = ||
		docEventProfile.ep_NoWebSearch = |No|
	Else
		Call docEventProfile.CopyItem(docESEventBrief.GetFirstItem(strFieldName), strFieldName)
		If docESEventBrief.cteba_invitation(0) = "Exclusive invitation" Then
			docEventProfile.ep_NoWebSearch = |Yes|
		Else
			docEventProfile.ep_NoWebSearch = |No|
		End If
	End If
	
	'AJ 02/17/2016 Used to determine whether to show business amenities on registration page.
	If (docESEventBrief.HasItem(|CLIP75FLAG|)) Then
		docEventProfile.CLIP75FLAG = docESEventBrief.CLIP75FLAG(0)
	Else
		docEventProfile.CLIP75FLAG = ""
	End If
	
	'Build the ep_AvailablePackages field
	'TV - Updated Nov 22 2011 to match corresponding change in ES where the number of
	'packages was reduced from 10 to 5.	
	Dim varResult As Variant
	varResult = Evaluate(|@Implode(@Trim(@Unique(cteba_atype_1 : cteba_atype_2 : cteba_atype_3 : cteba_atype_4 : cteba_atype_5)); ",")|, docEventProfile)
	docEventProfile.ep_AvailablePackages = varResult
	
	docEventProfile.ep_CTEBAIncludeGOE = |Yes|
	
	'Set the lobbyist question based on the event country
	strFieldName = |l_country|		
	If (Not docESEventBrief.HasItem(strFieldName)) Then
		Call Debug(STR_MODULE_NAME & |: Unable to find field [| & strFieldName & |] in event solution brief.|)			
		flgOK = False
	Else
		If (docESEventBrief.l_country(0) = |United States|) Then
			docEventProfile.ep_CTEBAIncludeLobbyist = |Yes|
		Else
			docEventProfile.ep_CTEBAIncludeLobbyist = |No|
		End If
	End If	
	
	'Decide whether to show the amenities section
	If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes|) Then
		Call Debug(STR_MODULE_NAME & |: CTEBA is enabled.|)
		'If the cteba_status field is not in the event profile, or it is in the event profile but is blank, do not show the section		
		If (Not docEventProfile.HasItem(|cteba_status|)) Then
			docEventProfile.ep_CTEBAIncludePaymentOptions = |No|
		Else
			Dim strCTEBAStatus As String
			strCTEBAStatus = docEventProfile.cteba_status(0)
			Call Debug(STR_MODULE_NAME & |: CTEBA status [| & strCTEBAStatus & |].|)			
			If (strCTEBAStatus = ||) Then
				docEventProfile.ep_CTEBAIncludePaymentOptions = |No|
			Else
				'Check the CTEBA status to decide when to show amenities
				Select Case strCTEBAStatus
					Case |Compliant - no amenities|:
						docEventProfile.ep_CTEBAIncludePaymentOptions = |No|
					Case |Compliant - under clip|:
						docEventProfile.ep_CTEBAIncludePaymentOptions = |Yes|		
					Case |Approved|:
						docEventProfile.ep_CTEBAIncludePaymentOptions = |Yes|			
					Case |Compliant - no GOE/no CPICC|
						docEventProfile.ep_CTEBAIncludePaymentOptions = |Yes|					
					Case Else
						docEventProfile.ep_CTEBAIncludePaymentOptions = |Yes|
				End Select
			End If
		End If
	Else
		Call Debug(STR_MODULE_NAME & |: CTEBA is NOT enabled.|)
	End If
	
	' DH - 19 Nov 2018, David Holbrook - Added the 'cteba_packages' field for use to ultimately send this data to any Invitee docs in the Invitee Tool
	If docESEventBrief.HasItem("cteba_packages") Then
		Call docEventProfile.Replaceitemvalue("cteba_packages", docESEventBrief.cteba_packages(0))
	Else
		Call docEventProfile.Replaceitemvalue("cteba_packages", 0)
	End If
	
	If docEventProfile.Status(0) <> "Draft" Then
		'Setup amenity table on CTEBA tab
		Call setupAmenityDetails(docEventProfile)
	End If
	
lblExit:
	
	flgGetCTEBAFields = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgHasRole:1:8
Function flgHasRole(strRole As String) As Integer
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return True if the current user has the named role.
     '
     'Parameters
     '-----------------------
     'strRole			The role to check
     '     
     'Return Values
     '-----------------------
     'True if the user has the supplied role, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgHasRole|
	
	Dim flgIsRoleEnabled As Integer
	Dim varRoles As Variant
	
     'Trap errors
	On Error Goto lblError
	
	'Assume not in role until proved otherwise
	flgIsRoleEnabled = False
	
	'Check whether the current user has the role
	varRoles = g_dbCurr.QueryAccessRoles(g_strUserName)
	Forall varRole In varRoles
		If (Cstr(varRole) = strRole) Then
			flgIsRoleEnabled = True
			Exit Forall
		End If
	End Forall
	
lblExit:
	
	'Set the return value
	flgHasRole= flgIsRoleEnabled
	
	Exit Function
	
lblError:
	
	flgIsRoleEnabled = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docGetCanisterProfile:1:8
Function docGetCanisterProfile(strCanisterID As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a canister ID, try to find the canister profile in the reference database for the
	'specified canister ID.
     '
     'Parameters
     '----------------
	'strCanisterID						The canister ID.
	'
     'Return Values
     '-------------------
     'If a canister profile is found, it is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetCanisterProfile|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupCanisterProfiles|
	
	Dim view As NotesView
	Dim docCanisterProfile As NotesDocument
	Dim strKey As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Looking for canister profile for canister ID [| & strCanisterID & |]|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strCanisterID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docCanisterProfile = view.GetDocumentByKey(strKey, True)
	
	If (Not docCanisterProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetCanisterProfile = docCanisterProfile
	
	Exit Function
	
lblError:
	
	Set docCanisterProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgAlreadyRegistered:1:8
Function flgAlreadyRegistered(docInvitation As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an invitation document, check whether a registration already exists for
	'the invitation ID specified.	
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgAlreadyRegistered|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupRegistrationsByInvID_All|
	
	Dim flgIsDuplicate As Boolean
	Dim view As NotesView	
	Dim docExistingRegistration As NotesDocument
	Dim strKey As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code (Assume not a duplicate until proved otherwise)
	flgIsDuplicate = False
	
	strKey = docInvitation.in_id(0)
	
	Call Debug(STR_MODULE_NAME & |: Checking Invitation ID [| & strKey & |].|)
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docExistingRegistration= view.GetDocumentByKey(strKey , True)
	
	'Check to see if  a registration already exists
	If Not (docExistingRegistration Is Nothing) Then
		flgIsDuplicate = True
	End If
	
lblExit:
	
	flgAlreadyRegistered = flgIsDuplicate
	
	If (flgIsDuplicate) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Existing registration found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  No registration found.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgIsDuplicate = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:AddRegistrationConfiguration:1:8
Sub AddRegistrationConfiguration(strLocale As String) 
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Create a new registration configuration for the supplied locale.
	'
     'Parameters
     '-----------------------
	'strLocale				The locale for the registration configuration.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AddRegistrationConfiguration|	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Dim docEventProfile As NotesDocument	
	Dim ws As New NotesUIWorkspace
	Dim uidoc As NotesUIDocument	
	Dim view As NotesView
	Dim strKey As String
	Dim docRegistrationProfile As NotesDocument	
	Dim intReply As Integer
	
	Set uidoc = ws.CurrentDocument
	Set docEventProfile = uidoc.Document		
	Call docEventProfile.Save(True, False)
	Call uidoc.Save
	
	Set view = g_dbCurr.GetView("vLookupRegistrationProfilesByIDLocale")
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docRegistrationProfile = view.GetDocumentByKey( strKey , True )
	
	If docRegistrationProfile Is Nothing Then
		intReply = intAskQuestion(|Would you like to copy a registration profile from an existing event?|)
		
		If (intReply = IDYES) Then
			'Create a new document by starting with values in an existing document
			Set docRegistrationProfile = docCopyRegistrationProfile(docEventProfile, strLocale)
		Else
			'Create a new document
			Set docRegistrationProfile = docCreateRegistrationProfile(docEventProfile, strLocale)
		End If
		
	End If	
	
	'Now edit the registration profile in the UI
	If Not docRegistrationProfile Is Nothing Then
		Call ws.EditDocument(True,docRegistrationProfile)
	End If
	
lblExit:	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	'Don't log NotesUIDocument: Save cancelled errors
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)	
	If Err() <> 4411 Then
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	End If
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:AddSpeakerConfiguration:1:8
Sub AddSpeakerConfiguration(strLocale As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Create a new speaker configuration for the supplied locale.
	
     'Parameters
     '-----------------------
	'strLocale				The locale for the speaker configuration.
	'
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------
	
	Const STR_MODULE_NAME = |AddSpeakersConfiguration|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Dim ws As New NotesUIWorkspace 
	Dim uidoc As NotesUIDocument
	Dim docEventProfile As notesdocument
	Dim view As NotesView	
	Dim strKey As String
	Dim docSpeakerContent As NotesDocument
	Dim intReply As Integer
	
	Set uidoc = ws.CurrentDocument
	Call uidoc.Save
	Set docEventProfile = uidoc.document	
	
	Set view = g_dbCurr.GetView("vLookupSpeakersByIDLocale")
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docSpeakerContent = view.GetDocumentByKey(strKey , True)
	
	If docSpeakerContent Is Nothing Then
		
		intReply = intAskQuestion(|Would you like to copy a speakers page from an existing event?|)
		
		If (intReply = IDYES) Then
			'Create a speakers page by starting with values in an existing speakers page
			Set docSpeakerContent = docCopySpeakersPage(docEventProfile, strLocale)	
		Else
			'Create a new blank speakers page
			Set docSpeakerContent = docCreateSpeakersPage(docEventProfile, strLocale)
		End If
		
	End If
	
	If Not docSpeakerContent Is Nothing Then
		Call ws.EditDocument(True, docSpeakerContent)		
	End If
	
lblExit:	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	'Don't log NotesUIDocument: Save cancelled errors
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
	If Err() <> 4411 Then
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	End If
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:exportConvertToUrl:1:8
Function exportConvertToUrl(strFile As String) As String
%REM
Found this code here:  http://www.kalitech.fr/clients/doc/VB_APIOOo_en.html#for_the_hurried_ones
'Converts a Ms Windows local pathname in URL (RFC 1738)
'Todo : UNC pathnames, more character conversions
%END REM
	strFile = Replace(strFile, "\", "/")
	strFile = Replace(strFile, ":", "|")
	strFile = Replace(strFile, " ", "%20")
	strFile = "file:///" & strFile 
	ExportConvertToUrl = strFile
End Function

'++LotusScript Development Environment:2:1:docGetAgendaByBriefIDandLocale:1:8
Function docGetAgendaByBriefIDandLocale(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile and a locale, check whether an agenda exists for the
	'event and locale.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'docEventProfile				The event profile to check.
	'strLocale						The locale to check.
	'
     'Return Value
     '-------------------
     'If an agenda exists for the event and locale return a handle to it.
	'Otherwise retun Nothing.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetAgendaByBriefIDandLocale|
	
	Dim docAgenda As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView
	Dim strKey As String
	
	Set view = g_dbCurr.GetView(|vLookupAgendasByIDLocale|)
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docAgenda = view.GetDocumentByKey(strKey , True)
	
lblExit:
	
	Set docGetAgendaByBriefIDandLocale = docAgenda
	
	Exit Function
	
lblError:
	
	Set docAgenda = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:OpenESEventBrief:1:8
Sub OpenESEventBrief(docEventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Open in the UI the event brief associated with the supplied event profile.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |OpenESEventBrief|
	
	Dim ws As New NotesUIWorkspace
	Dim strEventID As String
	Dim docESEventBrief As NotesDocument
	Dim uidoc As NotesUIDocument
	
	'Trap errors
	On Error Goto lblError
	
	'This may take a while because the Event Briefs database needs to be opened, so print a status message
	Print |Opening associated event brief.  Please wait.|
	
	'Find the event key
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Set docESEventBrief = docGetESEventBrief(strEventID)
	
	If Not docESEventBrief Is Nothing Then
		Set uidoc = ws.EditDocument(False, docESEventBrief)
	Else
		ShowErrorMsg(|Unable to find the event brief associated with this event.|)
	End If
	
lblExit:
	
	'Clear the status bar
	Print ||
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateAREventProfile:1:8
Sub CreateAREventProfile(docESEventBrief As NotesDocument, docEventProfile As NotesDocument, intReturnCode As Integer)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an ES event brief and an event profile, attempt to create an event profile
	'in Attendee Repository (AR).  Set the return code based on what happened.
     '
     'Parameters
     '----------------
     'docESEventBrief			An ES event brief
	'docEventProfile				An event profile
	'intReturnCode				(Returned) The return code.
	'									One of:
     '										INT_CREATED 						An event profile was created successfully in Attendee Repository
	'										INT_NOT_CREATED 				An event profile could not be created
	'										INT_UNKNOWN_REASON		An unexpected error occurred	
	'
     'Return Values
     '-------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CreateAREventProfile|
	
	Dim intRC As Integer
	Dim intUpdateRC As Integer
	Dim docAREventProfile As NotesDocument
	
    'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Assume not created successfully until proven otherwise
	intRC = INT_NOT_CREATED
	
	'Create an event profile in Attendee Repository
	Set docAREventProfile = g_dbAttendeeRepository.CreateDocument()
	
	'Set its form
	docAREventProfile.form = "areventprofile"
	
	'Update it from the ES event brief and event profile
	Call UpdateAREventProfile(docESEventBrief, docEventProfile, docAREventProfile, intUpdateRC)
	
	If (intUpdateRC = INT_UPDATED) Then
		intRC = INT_CREATED
	End If
	
lblExit:
	
	'Set the return value
	intReturnCode = intRC
	
	If (intReturnCode = INT_CREATED) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Event profile created.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Event profile NOT created.|) 	
	End If
	
	Exit Sub
	
lblError:
	
	intRC = INT_UNKNOWN_REASON
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:SelectVenue:1:8
Sub SelectVenue(docEventProfile As NotesDocument)
     '------------------------------------------------------------------------------------------------------
     'Description 
     '------------------
     'Show a dialog box that allows a user to select a venue from those already
	'used in events.
     '
     'Parameters
     '-----------------------
	'docEventProfile						The event profile.
	'
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |SelectVenue|
	
	Dim s As New NotesSession
	Dim ws As NotesUIWorkspace
	Dim docSelected As NotesDocument
	Dim coll As NotesDocumentCollection
	
     'Trap errors
	On Error Goto lblError
	
	Set ws = New  NotesUIWorkspace
	
	Set coll = ws.PickListCollection (PICKLIST_CUSTOM, False, g_dbCurr.Server, g_dbCurr.Filepath, |vDialogSelectVenue|, |Select a venue|, |Please select a venue.|)
	
	Set docSelected = coll.GetFirstDocument
	
	If Not (docSelected Is Nothing) Then		
		Call docEventProfile.ReplaceItemValue ("loc_conffacility", docSelected.loc_conffacility(0))
		Call docEventProfile.ReplaceItemValue ("loc_confroom", docSelected.loc_confroom(0))
		Call docEventProfile.ReplaceItemValue ("loc_confstreet", docSelected.loc_confstreet(0))
		Call docEventProfile.ReplaceItemValue ("loc_confstreet2", docSelected.loc_confstreet2(0))
		Call docEventProfile.ReplaceItemValue ("loc_confcity", docSelected.loc_confcity(0))
		Call docEventProfile.ReplaceItemValue ("loc_confstate", docSelected.loc_confstate(0))
		Call docEventProfile.ReplaceItemValue ("loc_confzip", docSelected.loc_confzip(0))
		Call docEventProfile.ReplaceItemValue ("loc_confcountry", docSelected.loc_confcountry(0))
		Call docEventProfile.ReplaceItemValue ("loc_confphone", docSelected.loc_confphone(0))
		Call docEventProfile.ReplaceItemValue ("loc_conffax", docSelected.loc_conffax(0))
		Call docEventProfile.ReplaceItemValue ("loc_confurl", docSelected.loc_confurl(0))
	End If
	
lblExit: 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:flgOKToExport:1:8
Function flgOKToExport(collDocsToExport As NotesDocumentCollection) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a collection of enrollment documents, check that they all belong to the
	'same event.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'True if all of the documents belong to the same event.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgOKToExport|
	
	Dim flgOK As Boolean
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Assume documents are not all from the same event until proved otherwise
	flgOK = False
	
	'TODO: Iterate through the collection and check that all have the same ep_id.
	flgOK = True
	
lblExit:
	
	flgOKToExport = flgOK
	
	If (flgOK) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Enrollments are all for the same event.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Enrollments are for more than one event.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgOK = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strBuildAmenityDiv:1:8
Function strBuildAmenityDiv(docEventProfile As NotesDocument, docLocaleProfile As NotesDocument, strCurrencySymbol As String, strAttendeeType As String, strAmountFieldName As String, strAmenityTypesFieldName As String) As String
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Build the html for one of the divs on the registration page that shows the amenity
	'description for an attendee type.
	'
	'Parameters
	'-----------------------
	'docEventProfile							The event profile.
	'docLocaleProfile							The locale profile for the page being displayed.
	'strCurrencySymbol					The currency symbol for the local currency that the amenity package is priced in.
	'strAttendeeType						The attendee type for the package.
	'strAmountFieldName				The name of the field in the event profile that stores the value of the package.
	'														(amenity_locale_GOE_charge_1 thru amenity_locale_GOE_charge_10)
	'														The value is formatted using the supplied currency country code and page locale.
	'strAmenityTypesFieldName	The name of the field In the event profile that stores the types of amenity included in the package.
	'     													Possible values are:
	'															Transportation
	'															Lodging
	'															Meals/Refreshments
	'															Entertainment
	'															Gifts/Novelties
	'															Entrance Fees	
	'														These are translated into their equivalents for the page locale.
	'
	'Return Values
	'-----------------------
	'The HTML for a div that contains the amenity description text.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strBuildAmenityDiv|
	
	Dim strHTML As String
	Dim dblValueToFormat As Double
	Dim strUnformattedCurrency As String	
	Dim strFormattedCurrency As String
	Dim strFormattedAttendeeType As String
	Dim strTrainingAndEducationLink As String
	Dim strTrainingAndEducation As String
	Dim strTELink As String
	
	'Trap errors
	On Error Goto lblError 
	
	'Initialize the return value
	strHTML = ||	
	
	'Get the amenity value to format
	dblValueToFormat = docEventProfile.GetItemValue(strAmountFieldName)(0)
	
	'Format just the number part of the amenity value (e.g. 100.00)
	strUnformattedCurrency = strFormatAsCurrency(dblValueToFormat, ||, docLocaleProfile)
	
	'Format the amenity value as a local currency value (e.g. $100.00)
	strFormattedCurrency = strFormatAsCurrency(dblValueToFormat, strCurrencySymbol, docLocaleProfile)
	
	'Format the attendee type so it can be used to identify a div
	'Make it lowercase and change and / or space characters into dashes
	strFormattedAttendeeType = Lcase$(strAttendeeType)
	strFormattedAttendeeType = replaceSubString(strFormattedAttendeeType, |/|, |-|)
	strFormattedAttendeeType = replaceSubString(strFormattedAttendeeType, | |, |-|)
	
	'Build the link to the Training and Education Notice
	strTrainingAndEducationLink = |<a href="#overlay" onclick="ibmCommon.Overlays.show('overlay', this);return false;">%TELink</a>|
	strTrainingAndEducation = docLocaleProfile.lc_CTEBA_TE_Link(0)
	
	'First replace the words that will become the link to the Training and Education Notice
	'So if:
	'
	'lc_CTEBA_Amenity_6 = 'A link to the Training and Eduction notice.' 
	'strTrainingAndEducation = 'Training and Education'
	'
	'After the replacement the string would be :
	'
	'A link to the <a href="#overlay" onclick="ibmCommon.Overlays.show('overlay', this);return false;">%TELink</a> notice.
	'
	strTELink = replaceSubString(docLocaleProfile.lc_CTEBA_Amenity_6(0), strTrainingAndEducation, strTrainingAndEducationLink)
	'Now do a second replacement to replave %TELink with the link words
	'
	'After the second replacement the string would be:
	'
	'A link To the <a href="#overlay" onclick="ibmCommon.Overlays.show('overlay', this);return false;">Training And Education</a> notice.
	'
	strTELink = replaceSubString(strTELink, |%TELink|, strTrainingAndEducation)
	
	'Now build the amenity text
	strHTML = strHTML & |<div id="id-amenity-| & strFormattedAttendeeType & |" style="display:none">|
	strHTML = strHTML & |<span id="id-amenity-| & strFormattedAttendeeType & |-value" style="display:none">| & Trim$(strUnformattedCurrency) & |</span>|	
	strHTML = strHTML & |<span id="id-amenity-| & strFormattedAttendeeType & |-value-formatted" style="display:none">| & Trim$(strFormattedCurrency) & |</span>|		
	strHTML = strHTML & |<p>| 
	strHTML = strHTML & docLocaleProfile.lc_CTEBA_Amenity_1(0) 
	strHTML = strHTML & | |
	strHTML = strHTML & replaceSubString(docLocaleProfile.lc_CTEBA_Amenity_2(0), |%AmenityValue|, Trim$(strFormattedCurrency)) & |<br /><br />|
	strHTML = strHTML & docLocaleProfile.lc_CTEBA_Amenity_3(0) & |<br /><br />|
	strHTML = strHTML & strGetAmenityTypeTranslations(docLocaleProfile, docEventProfile.GetItemValue(strAmenityTypesFieldName))
	strHTML = strHTML & docLocaleProfile.lc_CTEBA_Amenity_4(0) & |<br /><br />|	
	strHTML = strHTML & docLocaleProfile.lc_CTEBA_Amenity_5(0) & |<br /><br />|
	'Updated by TV 4/28/2011 to allow Amenity_7 to be blank
	Dim strAmenity7 As String
	strAmenity7 = docLocaleProfile.lc_CTEBA_Amenity_7(0)
	If (strAmenity7 <> ||) Then
		strHTML = strHTML & strTELink & |<br /><br />|		
		strHTML = strHTML & strAmenity7 & |<br />|
	Else
		strHTML = strHTML & strTELink & |<br />|
	End If
	strHTML = strHTML & |</p>|
	strHTML = strHTML & |</div>|	
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished. Returning [| & strHTML & |]|)
	
	'Store the text
	strBuildAmenityDiv = strHTML & Chr$(13)
	
	Exit Function
	
lblError:
	
	strHTML = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:getRegistrationProfile:5:8
%REM
	Function getRegistrationProfile
	Description: Comments for Function
%END REM
Function getRegistrationProfile(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
	
	Const STR_MODULE_NAME = |getRegistrationProfile|
	
	'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView
	Dim key As String
	
	'Build a key to look up the registration profile document for this event
	key =  docEventProfile.ep_id(0) + strLocale
	
	Set view = g_dbCurr.GetView("vLookupRegistrationProfilesByIDLocale")
	Set getRegistrationProfile = view.GetDocumentByKey(key, True )
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableFourColumns_Radio:6:8
%REM
	Sub CreateTableFourColumns_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableFourColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 4) labels
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		str_HTML = str_HTML & Chr(13) & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t4s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "4" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:strGetEmailType:1:8
Function strGetEmailType(intEmailType As Integer) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a type of email return the name corresponding to the type.
	'
     'Parameters
     '-----------------------
	'intEmailType			The type of email (See (Declarations) for values)
     '     
     'Return Values
     '-----------------------
     'The name of the email.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetEmailType|
	
	Dim strType As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	strType = ||
	
	Select Case intEmailType
		
	Case INT_EMAIL_CONFIRMATION:
		
		strType = |Confirmation|
		
	Case INT_EMAIL_REMINDER:
		
		strType = |Reminder|
		
	Case INT_EMAIL_CANCELLATION:
		
		strType = |Event Cancellation|
		
	Case INT_EMAIL_THANK_YOU:
		
		strType = |Follow up|
		
	Case INT_EMAIL_INVITATION:
		
		strType = |Invitation|
		
	Case INT_EMAIL_POSTEVENT_ALLREG:
			
		strType = |Post Event (All Registrations)|
		
	Case INT_EMAIL_POSTEVENT_ATTENDED:
			
		strType = |Post Event (Attended)|
		
	Case INT_EMAIL_POSTEVENT_NOSHOW:
		
		strType = |Post Event (No Show)|
			
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown email type [| & Cstr(intEmailType) & |] was supplied to the function.|	
		
	End Select
	
lblExit:
	
	strGetEmailType = strType
	
	Exit Function 
	
lblError:
	
	strType = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgIsDeleteAllowed:1:8
Function flgIsDeleteAllowed(doc As NotesDocument, intReasonCode As Integer) As Integer
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return True if the supplied document can be safely deleted.
     '
     'Parameters
     '-----------------------
     'doc						The document to check.
	'intReasonCode		The reason (if any) that the document may not be deleted.
	'							See (Declarations) section for possible values.
	'
     'Return Values
     '-----------------------
     'True if the document may be deleted, intReasonCode is set to INT_OK_TO_DELETE
	'False otherwise, intReasonCode is updated to indicate the reason that the document
	'may not be deleted.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsDeleteAllowed|
	
	Dim flgOKToDelete As Integer
	Dim intReason As Integer
	Dim strKey As String
	Dim varLookup As Variant 
	Dim strDocType As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Assume not OK to delete until proved otherwise
	flgOKToDelete = False
	intReason = INT_UNKNOWN_REASON
	
	'If deletion checking has been turned off in the Database Profile, then allow any type of document to be deleted
	If Cstr(g_docDbProfile.dp_EnableDeletionChecking(0)) = "No" Then
		Call Debug(STR_MODULE_NAME & |: Deletion checking is DISABLED.|) 
		flgOKToDelete = True
		intReason = INT_OK_TO_DELETE
		Goto lblExit
	End If
	
	'Do the check
	strDocType = Cstr(doc.DocType(0))
	
	Select Case strDocType
		
	Case STR_DOCTYPE_EMAIL_TEMPLATE:
		
		strKey = Cstr(doc.et_UNID(0))
		
		Call Debug(STR_MODULE_NAME & |: Checking | & strDocType & | document with key [| & strKey & |].|) 
		
		'Only people in the [Admin], [Developer] or [CanisterAdmin] roles can delete these documents
		If Not (flgHasRole(|[Admin]|) Or flgHasRole(|[Developer]|) Or flgHasRole(|[CanisterAdmin]|)) Then
			flgOKToDelete = False
			intReason = INT_NOT_IN_REQUIRED_ROLE
			Goto lblExit
		End If
		
		'Don't allow deletion of an e-mail template if it is used by any events
		varLookup = Evaluate (|@IsError(@DbLookup("":"NoCache";"":"";"vLookupEmailTemplateUsage";"| & strKey & |";2))|, doc)
		If (varLookup(0) = 0) Then
			Call Debug(STR_MODULE_NAME & |: The e-mail template is still used by at least one event.|) 						
			flgOKToDelete = False
			intReason = INT_STILL_IN_USE
			Goto lblExit
		End If
		
		flgOKToDelete = True
		intReason = INT_OK_TO_DELETE		
		
	Case STR_DOCTYPE_EVENT_PROFILE:
		
		strKey = Cstr(doc.ep_id(0))
		
		Call Debug(STR_MODULE_NAME & |: Checking | & strDocType & | event profile with id [| & strKey & |].|) 
		
		'Only people in the [Admin], [Developer] or [CanisterAdmin] roles can delete these documents
		If Not (flgHasRole(|[Admin]|) Or flgHasRole(|[Developer]|) Or flgHasRole(|[CanisterAdmin]|)) Then
			flgOKToDelete = False
			intReason = INT_NOT_IN_REQUIRED_ROLE
			Goto lblExit
		End If
		
		flgOKToDelete = True
		intReason = INT_OK_TO_DELETE		
		
	'Other types of document can be deleted 
	Case Else
		
		flgOKToDelete = True
		intReason = INT_OK_TO_DELETE		
		
	End Select
	
lblExit:
	
	'Set the return value
	If (flgOKToDelete) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Document with UNID [| & doc.UniversalID & |] can be deleted.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Document deletion is NOT allowed for the document with UNID [| & doc.UniversalID & |].  Reason Code [| & Cstr(intReason)  & |]|)
	End If
	
	'Set the return values	
	intReasonCode = intReason
	flgIsDeleteAllowed = flgOKToDelete
	
	Exit Function
	
lblError:
	
	flgOKToDelete = False
	intReason = INT_UNKNOWN_REASON	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)		
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:replaceSubString:1:8
Function replaceSubString(sourceStr As String, fromStr As String, toString As String) As String
	replaceSubString = Join(Split(sourceStr,fromStr),toString)
End Function

'++LotusScript Development Environment:2:1:flgIsEmailEnabled:1:8
Function flgIsEmailEnabled(docEventProfile As NotesDocument, intEMailType As Integer) As Boolean
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'Given an Event Profile and a type of e-mail, return True if that type of e-mail
	'is enabled in the Event Profile.
	'
    'Parameters
    '-----------------------
	'docEventProfile			The event profile.
	'intEmailType				The type of email (See (Declarations) for values)
    '     
    'Return Values
    '-----------------------
    'True if the specified type of e-mail is enabled.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsEmailEnabled|
	
	Dim flgIsEnabled As Boolean
	Dim strEventKey As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return code
	flgIsEnabled = False
	
	'Find the event key
	strEventKey = Cstr(docEventProfile.ep_id(0))
	
	Call Debug(STR_MODULE_NAME & |: Started.  Event key [| & strEventKey & |]  Email type [| & Cstr(intEmailType) & |]|)
	
	Select Case intEmailType
		
	Case INT_EMAIL_CONFIRMATION:
		
		If (Cstr(docEventProfile.ep_EnableConfirmationEmails(0)) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Confirmation e-mails are enabled for this event.|)
			flgIsEnabled = True
		End If
		
	Case INT_EMAIL_REMINDER:
		
		If (Cstr(docEventProfile.ep_EnableReminderEmails(0)) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Reminder e-mails are enabled for this event.|)			
			flgIsEnabled = True
		End If
		
	Case INT_EMAIL_CANCELLATION:
		
		If (Cstr(docEventProfile.ep_EnableCancellationEmails(0)) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Cancellation e-mails are enabled for this event.|)			
			flgIsEnabled = True
		End If
		
	Case INT_EMAIL_POSTEVENT_ALLREG:

		If (Cstr(docEventProfile.ep_EnablePostEventEmails(0)) = |Yes| And docEventProfile.ep_UsePostEventAllReg(0) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Post event e-mails (All Registrations) are enabled for this event.|)			
			flgIsEnabled = True
		End If
		
	Case INT_EMAIL_POSTEVENT_ATTENDED:
			
		If (Cstr(docEventProfile.ep_EnablePostEventEmails(0)) = |Yes| And docEventProfile.ep_UsePostEventAttended(0) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Post event e-mails (Attended) are enabled for this event.|)			
			flgIsEnabled = True
		End If
	
	Case INT_EMAIL_POSTEVENT_NOSHOW:
			
		If (Cstr(docEventProfile.ep_EnablePostEventEmails(0)) = |Yes| And docEventProfile.ep_UsePostEventNoShow(0) = |Yes|) Then
			Call Debug(STR_MODULE_NAME & |: Finished.  Post event e-mails (Attended) are enabled for this event.|)			
			flgIsEnabled = True
		End If
		
	Case INT_EMAIL_INVITATION:
		
		Call Debug(STR_MODULE_NAME & |: Finished.  Invitation e-mails are enabled for this event.|)			
		flgIsEnabled = True
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown email type [| & Cstr(intEmailType) & |] was supplied to the function.|	
		
	End Select
	
lblExit:
	
	'Set the return value
	flgIsEmailEnabled = flgIsEnabled
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	flgIsEnabled = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:parseRoleField:1:8
Function parseRoleField(roleRecs) As String
%REM
2009.06.17, rws

Used to facilitate exporting the en_role field found on the Notes Enrollment\Attendee Information | person subform from the Export Enrollments process.

Called/Used in ExportToExcel and ExportToODF

In most cases, a multivalue field would be exported as Text and show both the value / name pair.  value1=name1; value2=name2

For en_role, we want to create a string of role "Names" delimited in this case by a "; "   i.e.  name1; name2 

%END REM
	On Error Goto lblError
	Const STR_MODULE_NAME = |parseRoleField|
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	If (roleRecs = "") Then Goto lblExit
	
	Dim i As Integer
	Dim roleRecsArray As Variant
	Dim valueName As Variant
	Dim strResult As String
	
	roleRecsArray = Split(roleRecs, ";")
	
	For i = 0 To Ubound(roleRecsArray)
		valueName = Split(roleRecsArray(i), "=")
		If(Ubound(valueName) <> 1) Then Goto lblExit
		strResult = strResult + valueName(1) 
		If ( i <> Ubound(roleRecsArray)  ) Then
			strResult = strResult + "; "
		End If
	Next
	parseRoleField = strResult
	
lblExit:
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	Exit Function
	
lblError:
	
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	Goto lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetCTEBA_Fields:1:8
Sub GetCTEBA_Fields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	' 2011.02.08, rws, CTEBA Fields requested by TV
	Const STR_MODULE_NAME = |GetCTEBA_Fields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |ci|, |en_amenity_cc|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_amenity_value|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_goe|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_goetype|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_goetypeother|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_payment_method|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_payment_status|, arrExportFields())
	'Call GetExportField(docCurr, |ci|, |en_required_to_pay|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_lobbyist|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_lobbyisttype|, arrExportFields())
	Call GetExportField(docCurr, |ci|, |en_invoice_number|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
End Sub

'++LotusScript Development Environment:2:2:GetMIQuestionLocalization:1:8
Sub GetMIQuestionLocalization(intCurrQuestion, docEventProfile As NotesDocument, docMIQuestionSetLookup As NotesDocument, docCurr As NotesDocument, strScript As String)
     '------------------------------------------------------------------------------------------------------
     'Description 
     '------------------
     'Update the current document (docCurr) with the locale specific marketing intelligence
	'questions from the MI Question Set Lookup document (docMIQuestionSetLookup) based
	'on the settings in the event profile (docEventProfile).  Also update the supplied script so that
	'the MI questions can be validated.
     '
     'Parameters
     '-----------------------
	'IntCurrQuestion							The MI question number to process
	'docEventProfile							The event profile
	'docMIQuestionSetLookup			The MI Question Set Lookup document from the reference database
	'docCurr									The document to be updated
	'strScript									The script to be updated
	'
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetMIQuestionLocalization|
	
	Dim strCurrQuestion As String
	Dim strIncludeFieldName As String
	Dim strRequireFieldName As String
	Dim strIncludeThisQuestion As String
	Dim strRequireThisQuestion As String
	Dim strText As String
	Dim strType As String
	Dim varValues As Variant
	
     'Trap errors
	On Error Goto lblError
	
	strCurrQuestion = |Q| & Cstr(intCurrQuestion)
	
	Call Debug(STR_MODULE_NAME & |: Processing MI question [| & strCurrQuestion & |].|) 
	
	'Build field names based on the question number
	strIncludeFieldName = |ep_MI_Include_| & strCurrQuestion
	strRequireFieldName = |ep_MI_Require_| & strCurrQuestion	
	
	'Set the field that identifies whether this MI question is included
	strIncludeThisQuestion = Cstr(docEventProfile.GetItemValue(strIncludeFieldName)(0))
	
	Call docCurr.ReplaceItemValue(strIncludeFieldName, strIncludeThisQuestion)
	
	If (strIncludeThisQuestion = "Yes") Then
		Call Debug(STR_MODULE_NAME & |: Question is included.|) 
		
		strRequireThisQuestion = Cstr(docEventProfile.GetItemValue(strRequireFieldName)(0))
		
		Call docCurr.ReplaceItemValue(strRequireFieldName, strRequireThisQuestion)
		
		If (strRequireThisQuestion = "Yes") Then
			Call Debug(STR_MODULE_NAME & |: Question is required.|) 
			Call docCurr.ReplaceItemValue(|req_MI_| & strCurrQuestion, "*")
		Else
			Call Debug(STR_MODULE_NAME & |: Question is NOT required.|) 
		End If
		
		strText = Cstr(docMIQuestionSetLookup.GetItemValue(strCurrQuestion & |_text|)(0))
		Call Debug(STR_MODULE_NAME & |: Question text is [| & strText & |].|) 		
		Call docCurr.ReplaceItemValue(|label_MI_| & strCurrQuestion, strText)
		strScript = strScript & |labels['label_MI_| & strCurrQuestion & |']="| & strText & |";|
		
		strType = Cstr(docMIQuestionSetLookup.GetItemValue(strCurrQuestion & |_type|)(0))
		Call Debug(STR_MODULE_NAME & |: Question type is [| & strType & |].|) 		
		Call docCurr.ReplaceItemValue(|type_MI_| & strCurrQuestion, strType)
		
		varValues = docMIQuestionSetLookup.GetItemValue(strCurrQuestion & |_values|)
		Call Debug(STR_MODULE_NAME & |: Answer list is:|)		
		Forall varValue In varValues
			Call Debug(STR_MODULE_NAME & |: [| & Cstr(varValue) & |].|) 	
		End Forall
		Call docCurr.ReplaceItemValue(|values_MI_| & strCurrQuestion, varValues)
		
	Else
		Call Debug(STR_MODULE_NAME & |: Question is NOT included.|) 
	End If
	
lblExit: 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableSevenColumns_Radio:6:8
%REM
	Sub CreateTableSevenColumns_Radio
	Description: Version 2.0. Radio buttons.
%END REM
Sub CreateTableSevenColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_FieldName6(1 To 1) As String
	Redim str_FieldName7(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6 & 7 (Track 6 & 7)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_FieldName6(1 To fCtr)
			Redim Preserve str_FieldName7(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_FieldName6(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName7(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-7 (Track 6-7)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		str_FieldName = str_FieldName6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		str_FieldName = str_FieldName7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:AddAgendaConfiguration:1:8
Sub AddAgendaConfiguration(strLocale As String) 
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Create a new agenda configuration for the supplied locale.
	'
     'Parameters
     '-----------------------
	'strLocale				The locale for the agenda.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AddAgendaConfiguration|	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Dim ws As New NotesUIWorkspace
	Dim uidoc As NotesUIDocument	
	Dim docEventProfile As NotesDocument		
	Dim view As NotesView	
	Dim strKey As String
	Dim docAgendaContent As NotesDocument	
	Dim intReply As Integer
	
	Set uidoc = ws.CurrentDocument
	Call uidoc.Save
	Set docEventProfile = uidoc.Document		
	
	Set view = g_dbCurr.GetView( "vLookupAgendasByIDLocale" )
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docAgendaContent = view.GetDocumentByKey( strKey , True )
	
	If docAgendaContent Is Nothing Then
		
		intReply = intAskQuestion(|Would you like to start with an existing agenda?|)
		
		If (intReply = IDYES) Then
			'Create an agenda by starting with values in an existing agenda
			Set docAgendaContent = docCopyAgenda(docEventProfile, strLocale)		
		Else
			'Create a new blank agenda
			Set docAgendaContent = docCreateAgenda(docEventProfile, strLocale)
		End If
		
	End If
	
	If Not docAgendaContent Is Nothing Then
		Call ws.EditDocument(True, docAgendaContent)				
	End If
	
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	'Don't log NotesUIDocument: Save cancelled errors
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)	
	If Err() <> 4411 Then
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
	End If
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:SelectEmail:1:8
Sub SelectEmail(doc As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
    '------------------------------------------------------------------------------------------------------
    'Description 
    '------------------
    'Show a dialog box that allows a user to select an email template.
    '
    'Parameters
    '-----------------------
	'doc					The event profile.
	'uidoc					The event profile opened in the UI.
	'intEmailType			The type of email (See (Declarations) for values)
	'strLocale				The locale for the email.
	'strID					The ID used to find the fields in the form to update.
	'
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |SelectEmail|
	
	Dim s As New NotesSession
	Dim ws As NotesUIWorkspace
	Dim strOK As String
	Dim strTitle As String
	Dim strDesc As String
	Dim strFormattedTitle As String
	Dim strUNID As String
	Dim strType As String, strTypeDefault As String
	Dim strPrefix As String
	Dim strDefaultFieldName As String
	Dim strTitleFieldName As String
	Dim strUNIDFieldName As String
	Dim strDialogTitle As String
	Dim strLocaleName As String
	
     'Trap errors
	On Error Goto lblError
	
	'Get the type of email
	strType = strGetEmailType(intEmailType)
	
	'Find which field in the event profile is used to store the UNID for this email.
	strPrefix = strGetEmailPrefix(intEmailType)
	strUNIDFieldName = strPrefix & |UNID_| & strID
	
	'Reset the environment variables used to store the selected email template details 
	Call s.SetEnvironmentVar(|AS_OK|, ||)
	Call s.SetEnvironmentVar(|AS_TITLE|, ||)
	Call s.SetEnvironmentVar(|AS_DESC|, ||)
	Call s.SetEnvironmentVar(|AS_UNID|, ||)
	
	Set ws = New NotesUIWorkspace
	
	'Display the dialog
	Dim docDialog As New NotesDocument(g_dbCurr)
	
	Select Case strType
		Case "Post Event (All Registrations)"
			docDialog.EmailType = "Posteventallreg"
			strTypeDefault = |PostEventAR|
		Case "Post Event (Attended)"
			docDialog.EmailType = "Posteventattended"
			strTypeDefault = |PostEventAT|
		Case "Post Event (No Show)"
			docDialog.EmailType = "Posteventnoshow"
			strTypeDefault = |PostEventNS|
		Case Else
			docDialog.EmailType = strType	
			strTypeDefault = strType
	End Select
	
	docDialog.Locale = strLocale
	docDialog.ep_id = doc.ep_id
	docDialog.eventname = doc.eventname
	
	strLocaleName = strGetLocaleName(strLocale)
	
	strDialogTitle = |Select | & strLocaleName & | | & strType & | E-mail|
	
	Call ws.DialogBox(|dlgSelectEmailTemplate|, True, True, True , , , , strDialogTitle, docDialog, True, True)
	
	strOK = s.GetEnvironmentString(|AS_OK|)
	
	If (strOK = |Yes|) Then
		strTitle = s.GetEnvironmentString(|AS_TITLE|)
		strDesc = s.GetEnvironmentString(|AS_DESC|)
		strUNID = s.GetEnvironmentString(|AS_UNID|)
		
		If (strDesc = ||) Then
			strFormattedTitle = strTitle
		Else
			strFormattedTitle = strTitle & | (| & strDesc & |)|
		End If
		
		If (strType = |Event Cancellation|) Then
			strDefaultFieldName = |ep_UseDefaultCancellation_| & strID
		Elseif (strType = |Post Event|) Then
			strDefaultFieldName = |ep_UseDefaultPostEvent_| & strID
		Else
			strDefaultFieldName = |ep_UseDefault| & strTypeDefault & |_| & strID
		End If
		
		strTitleFieldName = strPrefix & |Title_| & strID
		strUNIDFieldName = strPrefix & |UNID_| & strID
		
		Call doc.ReplaceItemValue(strDefaultFieldName, |No|)
		Call doc.ReplaceItemValue(strTitleFieldName, strFormattedTitle)
		Call doc.ReplaceItemValue(strUNIDFieldName, strUNID)
		
		Call uidoc.Refresh
	End If
	
lblExit: 
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableNineColumnsVer1_2:6:8
%REM
	Sub CreateTableNineColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableNineColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Redim str_Fields9(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-9 (Track 6-9)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			Redim Preserve str_Fields9(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			str_Fields9(fCtr) = |en_d| & str_d & |t9s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-9 (Track 6-9)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields9(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:GetBadgeFields:1:8
Sub GetBadgeFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetBadgeFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |bi|, |badgenamefirst|  , arrExportFields())
	Call GetExportField(docCurr, |bi|, |badgenamemiddle| , arrExportFields())
	Call GetExportField(docCurr, |bi|, |badgenamelast|   , arrExportFields())
	Call GetExportField(docCurr, |bi|, |badgecompanyname|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:getIsImportOnly:5:8
%REM
	Function getIsImportOnly
	Description: Returns true if the current canister is an import only version 
%END REM
Public Function getIsImportOnly As Boolean
	Dim tmpSession As New NotesSession
	Const IMPORT_ONLY_VIEW = "vAdminImportProfile"
	
	Dim tmpView As NotesView
	Set tmpView = tmpSession.Currentdatabase.Getview(IMPORT_ONLY_VIEW)
	getIsImportOnly = Not (tmpView Is Nothing)
End Function

'++LotusScript Development Environment:2:2:CloseWebsite:1:8
Sub CloseWebsite(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Mark the event profile to indictae that the associated web site is closed.
     '
     'Parameters
     '-----------------------	
	'docEventProfile 		The event profile
	'uidocEventProfile		The event profile open in the UI	
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CloseWebsite|
	
	Dim intReply As Integer
	Dim strMsg As String
	Dim dtNow As New NotesDateTime("")	
	
	'Trap errors
	On Error Goto lblError
	
	intReply = intAskQuestion(|Would you like to close the event web site?|)
	
	If (intReply = IDYES) Then
		
		docEventProfile.kw_RegistrationStatus = |Closed|
		'Set the date/time used to timestamp the event profile
		dtNow.SetNow
		Set docEventProfile.ep_DateWebsiteClosed = dtNow
		docEventProfile.ep_WebsiteClosedBy = g_strUserName
		Call UpdateAudit(docEventProfile, g_strCommonUserName, |Website closed.|)
		Call docEventProfile.Save(True, False)
		Call uidocEventProfile.Save		
		
		strMsg = |The event web site is now closed.|
		
		If (g_flgIsPreview) Then
			strMsg = strMsg & |  Please allow approximately half an hour for the change to be available on the ibm.com web site.|
		End If
		
		Print strMsg
		
		Call Debug(STR_MODULE_NAME & |: Event web site for event with ID [| & docEventProfile.ep_id(0) & |] closed.|)
		
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:2:GetEmergencyFields:1:8
Sub GetEmergencyFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetEmergencyFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |ec|, |emergcontact|, arrExportFields())
	Call GetExportField(docCurr, |ec|, |emergdayphone|, arrExportFields())
	Call GetExportField(docCurr, |ec|, |emergnightphone|, arrExportFields())
	Call GetExportField(docCurr, |ec|, |emergrelation|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:flgIsDuplicateInvitation:1:8
Function flgIsDuplicateInvitation(docInvitation As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an invitation document, check whether an invitation already exists 
	'for the person based on the e-mail and last name in the supplied invitation.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsDuplicateInvitation|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupInvitationsByEventID|
	
	Dim flgIsDuplicate As Boolean
	Dim view As NotesView	
	Dim docExistingInvitation As NotesDocument
	Dim strarrKey(2) As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code (Assume not a duplicate until proved otherwise)
	flgIsDuplicate = False
	
	strarrKey(0) = docInvitation.ep_id(0)
	strarrKey(1) = Lcase(Trim(docInvitation.en_email(0)))
	strarrKey(2) = Lcase(Trim(docInvitation.en_last(0)))
	
	Call Debug(STR_MODULE_NAME & |: Checking Event ID [| & strarrKey(0) & |] E-mail address [| & strarrKey(1) & |] Last name [| & strarrKey(2) & |].|)
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docExistingInvitation= view.GetDocumentByKey(strarrKey , True)
	
	'Check to see if  an invitation already exists
	If docInvitation.IsNewNote And Not (docExistingInvitation Is Nothing) Then
		flgIsDuplicate = True
	End If
	
lblExit:
	
	flgIsDuplicateInvitation = flgIsDuplicate
	
	If (flgIsDuplicate) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Existing invitation found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  New invitation.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgIsDuplicate = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:LoadLocaleDefaults:1:8
Sub LoadLocaleDefaults(doc As NotesDocument, strLocale As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a locale and a document, find the locale profile in the reference database
	'for the supplied locale and copy values from it into the supplied document.
	'
     'Parameters
     '-----------------------
	'doc 					The document to copy the fields to.	
	'strLocale			The locale
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |LoadLocaleDefaults|
	
	Dim docLocaleProfile As NotesDocument
	Dim strLocaleName As String
	Dim intReply As Integer	
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Locale: [| & strLocale & |].|)
	
	strLocaleName = strGetLocaleName(strLocale)
	
	intReply = intAskQuestion(|This action will set the information in this document to the default values for | & strLocaleName & |.  Any existing information will be overwritten with the default values.| & Chr$(13) & Chr$(13) & |Do you want to continue?|)
	If (intReply <> IDYES) Then
		Goto lblExit
	End If
	
	Print |Loading defaults...|
	
	'Find the locale profile in the reference database
	Set docLocaleProfile = docGetLocaleProfile(strLocale)
	
	'Now copy all default values
	Call CopyFromDocument(docLocaleProfile, |lc_ConfirmationMsg|, doc, |ls_ConfirmationMsg|)
	Call CopyFromDocument(docLocaleProfile, |lc_DuplicateMsg|, doc, |ls_DuplicateMsg|)
	Call CopyFromDocument(docLocaleProfile, |lc_ScreeningMsg|, doc, |ls_ScreeningMsg|)
	Call CopyFromDocument(docLocaleProfile, |lc_RegistrationClosedMsg|, doc, |ls_RegistrationClosedMsg|)
	Call CopyFromDocument(docLocaleProfile, |lc_RegistrationNotYetOpenMsg|, doc, |ls_RegistrationNotYetOpenMsg|)	
	Call CopyFromDocument(docLocaleProfile, |lc_OptionalQuestionsTitle|, doc, |ls_OptionalQuestionsTitle|)
	Call CopyFromDocument(docLocaleProfile, |lc_OptionalQuestionsMessage|, doc, |ls_OptionalQuestionsMessage|)
	Call CopyFromDocument(docLocaleProfile, |lc_BadgeInformation|, doc, |ls_BadgeInformation|)
	Call CopyFromDocument(docLocaleProfile, |lc_BadgeMessage|, doc, |ls_BadgeMessage|)
	Call CopyFromDocument(docLocaleProfile, |lc_BadgeQuestion|, doc, |ls_BadgeQuestion|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactTitle|, doc, |ls_EmergencyContactTitle|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactMessage|, doc, |ls_EmergencyContactMessage|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactName|, doc, |ls_EmergencyContactName|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactDayPhone|, doc, |ls_EmergencyContactDayPhone|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactEveningPhone|, doc, |ls_EmergencyContactEveningPhone|)
	Call CopyFromDocument(docLocaleProfile, |lc_EmergencyContactRelationship|, doc, |ls_EmergencyContactRelationship|)	
	
	'Invitations messages
	Call CopyFromDocument(docLocaleProfile, |lc_AcceptInvitationMsg|, doc, |ls_AcceptInvitationMsg|)	
	Call CopyFromDocument(docLocaleProfile, |lc_AlreadyAcceptedMsg|, doc, |ls_AlreadyAcceptedMsg|)	
	Call CopyFromDocument(docLocaleProfile, |lc_DeclineInvitationMsg|, doc, |ls_DeclineInvitationMsg|)	
	Call CopyFromDocument(docLocaleProfile, |lc_ConfirmDeclineMsg|, doc, |ls_ConfirmDeclineMsg|)	
	Call CopyFromDocument(docLocaleProfile, |lc_AlreadyDeclinedMsg|, doc, |ls_AlreadyDeclinedMsg|)		
	Call CopyFromDocument(docLocaleProfile, |lc_NoInvitationFoundMsg|, doc, |ls_NoInvitationFoundMsg|)		
	
	Call CopyFromDocument(docLocaleProfile, |lc_News|, doc, |ls_NewsLinkText|)
	Call CopyFromDocument(docLocaleProfile, |lc_RelatedLinkHeader|, doc, |ls_RelatedLinkHeader|)
	Call CopyFromDocument(docLocaleProfile, |lc_HomePageCountryHeader|, doc, |ls_HomePageCountryHeader|)   
	Call CopyFromDocument(docLocaleProfile, |lc_HomePageCityHeader|, doc, |ls_HomePageCityHeader|)   
	Call CopyFromDocument(docLocaleProfile, |lc_HomePageRegisterHeader|, doc, |ls_HomePageRegisterHeader|)   
	Call CopyFromDocument(docLocaleProfile, |lc_HomePageDateHeader|, doc, |ls_HomePageDateHeader|)   
	Call CopyFromDocument(docLocaleProfile, |lc_HomePageNoEventMsg|, doc, |ls_HomePageNoEventMsg|)   	
	
	Call doc.Save(True, False)
	
	Print |Defaults loaded.|
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:DeleteDocument:1:8
Sub DeleteDocument(strDocType As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a type of document, attempt to delete documents of that type.
	'
     'Parameters
     '-----------------------
     'strDocType				The type of document to delete.
	'
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |DeleteDocument|
	
	Call Debug(STR_MODULE_NAME & |: Started.  DocType = [| & strDocType & |].|)
	
	'Trap errors
	On Error Goto lblError
	
	Select Case strDocType
		
	Case STR_DOCTYPE_EMAIL_TEMPLATE:
		Call DeleteEmailTemplate()
		
	Case STR_DOCTYPE_EVENT_PROFILE:
		Call DeleteEvent()
		
	Case STR_DOCTYPE_INVITATION:
		Call DeleteInvitation()
		
	Case Else
		Error ERR_SYSTEM_ERROR, |An unknown document type [| & strDocType & |] was supplied to the function.|	
		
	End Select
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:dbGetAttendeeRepositoryDb:1:8
Function dbGetAttendeeRepositoryDb() As NotesDatabase
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Return a handle to the Attendee Repository database.  The location of the
	'database is defined in the Database Profile.
     '
     'Parameters
     '----------------
     'None.
	'
     'Return Values
     '-------------------
     'A handle to the database if the database could be found and opened successfully,
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |dbGetAttendeeRepositoryDb|
	
	Dim s As New NotesSession	
	Dim dbAttendeeRepository As New NotesDatabase("", "")
	Dim strAttendeeRepositoryServer As String
	Dim strAttendeeRepositoryFilename As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
	'Get a handle to the Attendee Repository database
	strAttendeeRepositoryServer = Cstr(g_docDbProfile.dp_ARServer(0))
	Call Debug(STR_MODULE_NAME & |: Attendee Repository server is [| & strAttendeeRepositoryServer & |].|)	
	
	strAttendeeRepositoryFilename = Cstr(g_docDbProfile.dp_ARFilename(0))
	Call Debug(STR_MODULE_NAME & |: Attendee Repository filename is [| & strAttendeeRepositoryFilename & |].|)
	
	On Error Resume Next	
	
	Set dbAttendeeRepository = s.GetDatabase(strAttendeeRepositoryServer, strAttendeeRepositoryFilename, False)
	
	On Error Goto lblError	
	
	If (dbAttendeeRepository  Is Nothing) Then
		Call dbAttendeeRepository.Open(strAttendeeRepositoryServer, strAttendeeRepositoryFilename)
		If dbAttendeeRepository.IsOpen Then
			Call Debug(STR_MODULE_NAME & |: Attendee Repository database is available.|)
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find Attendee Repository database.|)		
		End If	
	Else
		Call Debug(STR_MODULE_NAME & |: Attendee Repository database is available.|)
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set dbGetAttendeeRepositoryDb = dbAttendeeRepository
	
	Exit Function
	
lblError:
	
	Set dbAttendeeRepository = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetExportField:1:8
Sub GetExportField(docCurr As NotesDocument, strPrefix As String, strFieldName As String, arrExportFields() As ExportField)
	
	Const STR_MODULE_NAME = |GetAllFields|
	
	Dim intCurrIndex As Integer
	Dim strLabelFieldName As String
	Dim strExportFieldName As String	
	
     'Trap errors
	On Error Goto lblError
	
	intCurrIndex = Ubound(arrExportFields)
	
	strLabelFieldName = strPrefix & |_la_| & strFieldName
	strExportFieldName = strPrefix & |_in_| & strFieldName & |_exp|
	
	If docCurr.GetItemValue(strExportFieldName)(0) <> "" Then
		' if en_role, mark as multivalue for branching and note the arrExportFields() array index
		If (strExportFieldName = "ai_in_role_exp") Then  
			arrExportFields(intCurrIndex).strType = |check|	
			g_en_roleIndex = intCurrIndex
		End If
		
		arrExportFields(intCurrIndex).strExport =  docCurr.GetItemValue(strExportFieldName)(0)		
		arrExportFields(intCurrIndex).strLabel =  docCurr.GetItemValue(strLabelFieldName)(0)
		'Mark the field as a multi-value field based on its field name.  Those that begin 'en_c' are multi-value fields.
		If (Instr(arrExportFields(intCurrIndex).strExport, |en_c|) = 1) Then
			arrExportFields(intCurrIndex).strType = |check|
		Elseif (Instr(arrExportFields(intCurrIndex).strLabel, |Sessions Day 1|) = 1) Then
			arrExportFields(intCurrIndex).strType = |formula|
		Elseif (Instr(arrExportFields(intCurrIndex).strLabel, |Sessions Day 2|) = 1) Then
			arrExportFields(intCurrIndex).strType = |formula|
		Elseif (Instr(arrExportFields(intCurrIndex).strLabel, |Sessions Day 3|) = 1) Then
			arrExportFields(intCurrIndex).strType = |formula|
		Elseif (Instr(arrExportFields(intCurrIndex).strLabel, |Sessions Day 4|) = 1) Then
			arrExportFields(intCurrIndex).strType = |formula|
		Elseif (Instr(arrExportFields(intCurrIndex).strLabel, |Date registered|) = 1) Then
			arrExportFields(intCurrIndex).strType = |formula|
		End If
		Call Debug(STR_MODULE_NAME & |: Export field name [| & strExportFieldName & |] value [| & arrExportFields(intCurrIndex).strExport & |]| )
		Call Debug(STR_MODULE_NAME & |: Label field name [| & strLabelFieldName & |] value [| & arrExportFields(intCurrIndex).strLabel & |]| )
		Redim Preserve arrExportFields(intCurrIndex + 1)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:SetQTag:5:8
%REM
	Sub QTags
	Description: Comments for Sub
%END REM
Sub SetQTag(strQTagField As String, strQTagValue As String)
	
	Const STR_MODULE_NAME = |AGENT: Set QTag|
	
	Dim ws As New NotesUIWorkspace
	Dim s As New NotesSession	
	Dim uiView As NotesUIView
	Dim doc As NotesDocument	
	Dim col As NotesDocumentCollection
	Dim dbCurrent As NotesDatabase
	Dim docEventProfile As NotesDocument
	Dim strMsg As String, strEventID As String, strMsg2 As String
	
	'strMsg = |This functionality can only be used if session data is being collected for this event.|
	strMsg = |The attendance has been marked complete for this event. Field values cannot be changed|
	strMsg2 = |You must select registrations from the same event|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Call Debug(STR_MODULE_NAME & |: QTag Field: | & strQTagField & |  QTag Value: | & strQTagValue & |.|)	
	'Trap errors
	On Error GoTo lblError	
	
	Set uiView = ws.CurrentView
	Set dbCurrent = s.Currentdatabase
	Set col = dbCurrent.Unprocesseddocuments
	
	If col.Count = 0 Then
		Call ShowInfoMsg(|You must select at least one registration to set the | & strQTagField & | field.|)
		GoTo lblExit
	End If
	
	Set doc = col.GetFirstDocument
	strEventID = doc.ep_id(0)	
	While Not ( doc Is Nothing )
		
		If strEventID <> doc.ep_id(0) Then
			Call ShowInfoMsg(strMsg2)
			GoTo lblExit
		End If
		
		strEventID = doc.ep_id(0)
		Set doc = col.GetNextDocument(doc)
	Wend
	
	Set doc = col.GetFirstDocument
	Set docEventProfile = docGetEventProfileByEventID(doc.ep_id(0))
	If Not docEventProfile Is Nothing Then
		If docEventProfile.HasItem(|EP_ATTENDANCEUPDATESTATUS|) Then				
			If docEventProfile.EP_ATTENDANCEUPDATESTATUS(0) = "Completed" Then
				Call ShowInfoMsg(strMsg)
				GoTo lblExit
			End If
		End If
		
		Call col.Stampall( strQTagField, strQTagValue )
	
	Else

	End If

lblExit:
	
	Call uiView.DeselectAll
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub


'++LotusScript Development Environment:2:2:CreateTableFourColumnsSpanVer1_2:6:8
%REM
	Sub CreateTableFourColumnsSpanVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableFourColumnsSpanVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 4) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
			str_HTML = str_HTML & Chr(13) & |</div>|
		End If
		
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:strGetTemplateFieldByLocale:1:8
Function strGetTemplateFieldByLocale(strLocale As String, strFieldName As String) As String
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event  a locale, check whether a template field formula exists for the locale.
	'If one does, return a string with the formula
     '
     'Parameters
     '----------------
   'strLocale						The locale to check.
	'
     'Return Value
     '-------------------
     'If a field name exist for that Locale then it returns the string formula for the field
	'Otherwise retun empty string.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetTemplateFieldByLocale|
	
	Dim docEmailtemplateField As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Dim view As NotesView	
	Set view = g_dbReference.GetView(|vLookupMergeFieldsByNameAndLocale|)	
	' Try with combination of both Locale + field name whihc over-rides default of no Locale	
	Dim strKey As String
	strKey = strLocale + strFieldName
	Call Debug(STR_MODULE_NAME & |:  Lookup key : | & strKey)
	Set docEmailtemplateField = view.GetDocumentByKey(strKey , True)
	'If failled try the field only
	If docEmailtemplateField Is Nothing Then
		Set docEmailtemplateField = view.GetDocumentByKey(strFieldName , True)
	End If
	
lblExit:
	If docEmailtemplateField Is Nothing Then
		'Failled again, the field does not exist so return empty string
		strGetTemplateFieldByLocale = ""		
	Else	' got a hit so return the formula
		strGetTemplateFieldByLocale = docEmailtemplateField.mf_Formula(0)
	End If
	
	
	Exit Function
	
lblError:
	
	Set docEmailtemplateField = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
	
End Function

'++LotusScript Development Environment:2:1:docCreateRegTracksForDay:1:8
Function docCreateRegTracksForDay(str_Day As String, strLocale As String, docEventProfile As NotesDocument) As NotesDocument
	Const STR_MODULE_NAME = |docCreateRegTracksForDay|
	
	Dim docRegTracksProfile As NotesDocument
	Dim strLocaleName As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	strLocaleName = strGetLocaleName(strLocale)
	
	Print |Creating | & strLocaleName & | registration tracks profile for the '| & docEventProfile.eventname(0) & |' event...|
	
	Set docRegTracksProfile = g_dbCurr.CreateDocument
	
	docRegTracksProfile.form = "fRegTrack"
	docRegTracksProfile.ep_id = docEventProfile.ep_id(0)
	docRegTracksProfile.ep_UNID = docEventProfile.UniversalID
	docRegTracksProfile.ep_EventTitle = docEventProfile.eventname(0)
	docRegTracksProfile.Locale = strLocale
	docRegTracksProfile.LocaleName = strLocaleName
	docRegTracksProfile.Day = str_Day
	
	Call docRegTracksProfile.ComputeWithForm(True, True)
	
	Print |Registration Tracks profile created for day | & str_Day & |.|
	
lblExit:
	
	Set docCreateRegTracksForDay = docRegTracksProfile
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docCreateRegTracksForDay = Nothing
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgIsDuplicateEnrollment:1:8
Function flgIsDuplicateEnrollment(docEnrollment As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an enrollment document, check whether an enrollment already exists 
	'for the person submitting the enrollment based on the e-mail and last name in
	'the supplied enrollment document.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsDuplicateEnrollment|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupRegistrationsByEventID_Confirmed|
	
	Dim flgIsDuplicate As Boolean
	Dim view As NotesView	
	Dim docExistingEnrollment As NotesDocument
	Dim strarrKey(2) As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code (Assume not a duplicate until proved otherwise)
	flgIsDuplicate = False
	
	strarrKey(0) = docEnrollment.ep_id(0)
	strarrKey(1) = Lcase(Trim(docEnrollment.en_email(0)))
	strarrKey(2) = Lcase(Trim(docEnrollment.en_last(0)))
	
	Call Debug(STR_MODULE_NAME & |: Checking Event ID [| & strarrKey(0) & |] E-mail address [| & strarrKey(1) & |] Last name [| & strarrKey(2) & |].|)
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docExistingEnrollment = view.GetDocumentByKey(strarrKey , True)
	
	'Check to see if this enrollment doc already exists
	If docEnrollment.IsNewNote And Not (docExistingEnrollment Is Nothing) Then
		flgIsDuplicate = True
	End If
	
lblExit:
	
	flgIsDuplicateEnrollment = flgIsDuplicate
	
	If (flgIsDuplicate) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Existing enrollment found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  New enrollment.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgIsDuplicate = False	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strFormatAsCurrency:1:8
Function strFormatAsCurrency(dblValueToConvert As Double, strCurrencySymbol As String, docLocaleProfile As NotesDocument) As String
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a value to format, the locale of the page being displayed and the two letter
	'country code corresponding to the currency, format the value as a currency.
	'
	'For example:
	'	Given fr_FR as the page locale and $ as the currency symbol,
	'	1000 would be formatted as 1 000,00 $
	'
	'	Given en_US as the page locale and $ as the Currency symbol,
	'	1000 would be formatted as $1,000.00
	'
	'	Given en_US as the page locale and € as the Currency symbol,
	'	1000 would be formatted as €1,000.00
	'
	'Parameters
	'-----------------------
	'dblValueToFormat					The value to format.
	'strCurrencySymbol 				The currency symbol for the currency being formatted..
	'docLocaleProfile						The locale profile for the locale that the page is being formatted for.	
	'     
	'Return Values
	'-----------------------
	'The formatted currency.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strFormatAsCurrency|
	
	Dim strThousandsSeparator As String
	Dim strDecimalSeparator As String	
	Dim strCurrencySymbolPosition As String
	Dim strIncludeSpaceBetweenSymbolAndValue As String
	Dim strShowDecimalPlaces As String
	Dim strValueToConvert As String
	Dim strIntegerPart As String
	Dim strDecimalPart As String
	Dim intLength As Integer
	Dim intCurrGroupNumber As Integer
	Dim intCurrChar As Integer
	Dim strCurrGroup As String
	Dim strCurrChar As String
	Dim strResult As String

	'Trap errors
	On Error Goto lblError

	'Initialize the retrun value
	strResult = ||
	
	'Only positive numbers are supported
	If (dblValueToConvert < 0) Then
		Error ERR_SYSTEM_ERROR, |Formatting negative currency values is not supported.|	
	End If
	
	'Get the currency formatting information from the locale profile
	
	'Get the thousands separator
	strThousandsSeparator = docLocaleProfile.lc_ThousandsSeparator(0)
	
	'Get the decimal separator
	strDecimalSeparator = docLocaleProfile.lc_DecimalSeparator(0)
	
	'Get the position of the currency symbol
	strCurrencySymbolPosition = docLocaleProfile.lc_SymbolPosition(0)

	'Get whether to include a space between the symbol and the value
	strIncludeSpaceBetweenSymbolAndValue = docLocaleProfile.lc_SpaceBetweenSymbolAndValue(0)
	
	'Get whether to include the decimal places in the amount
	strShowDecimalPlaces = docLocaleProfile.lc_ShowDecimalPlaces(0)	
	
	'Convert the number into a know format with two decimal places
	strValueToConvert = Format(dblValueToConvert, |#0.00|)
	
	'Get the parts to the left and right of the decimal place
	strIntegerPart = StrLeft$(strValueToConvert,|.|)	
	strDecimalPart = Strright(strValueToConvert, |.|)
		
	intLength = Len(strIntegerPart)

	intCurrGroupNumber = Int(intLength / 3) + 1
	
	For intCurrChar = intLength To 1 Step - 1
		If (intCurrChar Mod 3) = 0 Then
			intCurrGroupNumber = intCurrGroupNumber - 1
			strCurrGroup = ||
		End If	
		'Add the thousand separator when necessary
		If (strCurrGroup = || And (intCurrChar <> intLength)) Then
			strResult = strResult & strThousandsSeparator
		End If
		strCurrChar = Mid$(strIntegerPart, (intLength - intCurrChar + 1), 1)
		strCurrGroup = strCurrGroup & strCurrChar
		strResult = strResult & strCurrChar
	Next
	
	'If including decimal places, add those
	If (strShowDecimalPlaces = |Y|) Then
		strResult = strResult & strDecimalSeparator & strDecimalPart 		
	End If

	'If currency symbol position is before the amount
	If (strCurrencySymbolPosition = |B|) Then
		'If space between currency symbol and amount then
		If (strIncludeSpaceBetweenSymbolAndValue = |Y|) Then
			'Prepend the currency symbol and a space
			strResult = strCurrencySymbol & | | & strResult
		Else
			'Otherwise just prepend the currency symbol
			strResult = strCurrencySymbol & strResult
		End If
	Else	
		'Otherwise, the symbol is after the value
		'If space between currency symbol and amount then
		If (strIncludeSpaceBetweenSymbolAndValue = |Y|) Then		
			'Append a space and the currency symbol
			strResult = strResult & | | & strCurrencySymbol
		Else
			'Otherwise append the currency symbol
			strResult = strResult & strCurrencySymbol
		End If
	End If
	
lblExit:
	
	strFormatAsCurrency = strResult
	
	Call Debug(STR_MODULE_NAME & |: Finished.  Converted [| & strValueToConvert & |] to  [| & strResult & |].|)
	
	Exit Function
	
lblError:
	
	strResult = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgSendEmailDeprecated:1:8
Function flgSendEmailDeprecated(docEventProfile As NotesDocument, doc As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator, flgSaveAfterSend As Boolean) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, and enrollment or invitation document, an e-mail template and a merge
	'generator, use the information from the enrollment or invitation document to send an email using 
	'the supplied template.  Optionally save the enrollment or invitation document after sending the 
	'e-mail based on the supplied flgSaveAfterSend flag.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile.
	'doc								An enrollment or invitation document.
	'docEmailTemplate		The email template to use.
	'myMerger						The merge generator to use.
	'flgSaveAfterSend			Whether to save the enrollment or invitation document after sending.
     '     
     'Return Values
     '-----------------------
     'True if sent OK, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgSendEmail|
	
	Dim flgOK As Boolean
	Dim strLocale As String
	Dim strEventKey As String
	Dim itemCopyTo As NotesItem	
	Dim itemBlindCopyTo As NotesItem
	Dim docEmail As NotesDocument
	Dim strEmailType As String
	Dim varEmailAddresses As Variant
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	flgOK = False
	
	'If the locale of the merge generator is not the supplied locale, reload the merge fields with the correct set
	'for the locale of the enrollment or invitation document
	If (doc.DocType(0) = |Invitation|) Then
		strLocale = Cstr(doc.in_Locale(0))
	Else
		strLocale = Cstr(doc.Locale(0))
	End If
	
	If (strLocale <> myMerger.currLocale) Then
		'Instantiate the reference database
		Set g_DbReference = dbGetReferenceDb()
		
		'Set the locale of the merge generator
		myMerger.currLocale = strLocale
		
		'Load the merge field list from reference database and current database
		Call myMerger.LoadFieldListFromReferenceDb(g_dbCurr, g_DbReference)
	End If
	
	'Find the event key
	strEventKey = Cstr(docEventProfile.ep_id(0))
	
	Set itemCopyTo = docEmailTemplate.GetFirstItem("et_CopyTo")
	Set itemBlindCopyTo = docEmailTemplate.GetFirstItem("et_BlindCopyTo")
	
	myMerger.FromAddress = Cstr(docEventProfile.emailadmin(0))
	'myMerger.templateBody = Cstr(docEmailTemplate.et_Text(0))
	'myMerger.templateSubject = Cstr(docEmailTemplate.et_Subject(0))
	
	If (Cstr(g_docDbProfile.dp_EmailMode(0)) = |Test|) Then
		varEmailAddresses = g_docDbProfile.dp_TestModeEmailAddress
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Test].  Sending e-mail to test mode e-mail addresses:|)		
		Forall varEmailAddress In varEmailAddresses
			Call Debug(STR_MODULE_NAME & |: | & Cstr(varEmailAddress))	
		End Forall
		'Blank out the copy to and blind copy to items in test mode
		itemCopyTo.Values = ""
		itemBlindCopyTo.Values = ""
	Else
		varEmailAddresses = Cstr(doc.en_email(0))		
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Production].  Sending e-mail to e-mail address [| & Cstr(varEmailAddresses) & |].|)					
	End If
	
	'Create the email
	Set docEmail = myMerger.getEMailFromDocument(doc, varEmailAddresses, itemCopyTo.values, itemBlindCopyTo.values, Cstr(docEmailTemplate.et_Format(0)))
	
	If (docEmail Is Nothing) Then 
		
		'Now try sending from the current database
		myMerger.isCreatedOnServer = False
		
		'Create the email
		Set docEmail = myMerger.getEMailFromDocument(doc, varEmailAddresses, itemCopyTo.values, itemBlindCopyTo.values, Cstr(docEmailTemplate.et_Format(0)))
		
		If (docEmail Is Nothing) Then 
			Error ERR_SYSTEM_ERROR, |Unable to create e-mail.|
		Else
			Call docEmail.Send(False)
		End If
		
	Else
		If (myMerger.isCreatedOnServer) Then
			Call docEmail.Save(True, False )	
		Else
			Call docEmail.Send(False)
		End If
		
	End If	
	
	Call Debug(STR_MODULE_NAME & |: E-mail sent.|)	
	
	strEmailType = Cstr(docEmailTemplate.et_Type(0))
	
	Select Case strEmailType
		
	Case |Confirmation|:
		doc.en_DateConfirmationEmailSent = Now()
		
	Case |Reminder|:
		doc.en_DateReminderEmailSent = Now()
		
	Case |Followup|:
		doc.en_DateFollowupEmailSent = Now()
		
	Case |Event Cancellation|:
		doc.en_DateCancellationEmailSent = Now()
		
	Case |Invitation|:
		doc.in_DateInvitationEmailSent = Now()
		
		'For invitations, change the invitation status to 'Invited' and add a timestamp
		doc.in_Status = |Invited|
		doc.in_DateInvited = Now()
		
	Case |Other|:
		doc.en_DateOtherEmailSent = Now()
		
	Case Else
		Error ERR_SYSTEM_ERROR, |An unknown e-mail type [| & strEmailType & |] was supplied to the function.|	
		
	End Select
	
	If (flgSaveAfterSend) Then
		Call doc.Save(True, False)
	End If
	
	'E-mail has been sent
	flgOK = True
	
lblExit:
	
	flgSendEmailDeprecated = flgOK
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:LoadLandingPageDefaults:1:8
Sub LoadLandingPageDefaults(doc As NotesDocument, strLocale As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a locale and a document, find the locale settings document in this database
	'for the supplied locale and copy values from it into the supplied document.
	'
     'Parameters
     '-----------------------
	'doc 					The document to copy the fields to.	
	'strLocale			The locale
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |LoadLandingPageDefaults|
	
	Dim docLocaleSettings As NotesDocument
	Dim strLocaleName As String
	Dim intReply As Integer
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Locale: [| & strLocale & |].|)
	
	strLocaleName = strGetLocaleName(strLocale)
	
	intReply = intAskQuestion(|This action will set the left navigation options to the default values for | & strLocaleName & |.  Any existing left navigation options will be overwritten with the default values.| & Chr$(13) & Chr$(13) & |Do you want to continue?|)
	If (intReply <> IDYES) Then
		Goto lblExit
	End If
	
	Print |Loading defaults...|
	
	'Find the locale settings in this database
	Set docLocaleSettings = docGetLocaleSettings(strLocale)
	
	'Now copy all default values
	Call CopyFromDocument(docLocaleSettings, |ls_TopLinkText|, doc, |lp_TopLinkText|)
	Call CopyFromDocument(docLocaleSettings, |ls_TopLinkURL|, doc, |lp_TopLinkURL|)	
	Call CopyFromDocument(docLocaleSettings, |ls_NewsLinkText|, doc, |lp_NewsLinkText|)
	Call CopyFromDocument(docLocaleSettings, |ls_NewsLinkURL|, doc, |lp_NewsLinkURL|)		
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHeader|, doc, |lp_RelatedLinkHeader|)	
	Call CopyFromDocument(docLocaleSettings, |ls_CountRelatedLinksChoice|, doc, |lp_CountRelatedLinksChoice|)	
	Call CopyFromDocument(docLocaleSettings, |ls_CountRelatedLinks|, doc, |lp_CountRelatedLinks|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkText_1|, doc, |lp_RelatedLinkText_1|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkURL_1|, doc, |lp_RelatedLinkURL_1|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHtml_1|, doc, |lp_RelatedLinkHtml_1|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkText_2|, doc, |lp_RelatedLinkText_2|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkURL_2|, doc, |lp_RelatedLinkURL_2|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHtml_2|, doc, |lp_RelatedLinkHtml_2|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkText_3|, doc, |lp_RelatedLinkText_3|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkURL_3|, doc, |lp_RelatedLinkURL_3|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHtml_3|, doc, |lp_RelatedLinkHtml_3|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkText_4|, doc, |lp_RelatedLinkText_4|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkURL_4|, doc, |lp_RelatedLinkURL_4|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHtml_4|, doc, |lp_RelatedLinkHtml_4|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkText_5|, doc, |lp_RelatedLinkText_5|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkURL_5|, doc, |lp_RelatedLinkURL_5|)	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLinkHtml_5|, doc, |lp_RelatedLinkHtml_5|)	
	
	Call CopyFromDocument(docLocaleSettings, |ls_RelatedLink_List|, doc, |lp_RelatedLink_List|)	
	
	Call doc.Save(True, False)
	
	Print |Defaults loaded.|
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableOneColumn_Radio:6:8
%REM
	Sub CreateTableOneColumn
	Description: Version 2.0.
%END REM
Sub CreateTableOneColumn_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	If str_s = "1" Then
		'str_HTML = str_HTML & |
		'<h2>| & str_Day & | | & str_d & | | & str_tLabel & |</h2>
		'<div class="ibm-container-body">| & Chr(13)
		str_HTML = str_HTML & |
<h2>| & str_Day & | | & str_d & |</h2>
<div class="ibm-container-body ibm-one-column">|
		If str_tLabel <> || Then
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>
<div class="ibm-columns"><div class="ibm-col-6-6"><div class="ibm-alternate-rule"><hr /></div></div></div>| & Chr(13)	
		End If
	Else
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-one-column">|
		If str_tLabel <> || Then
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>
<div class="ibm-columns"><div class="ibm-col-6-6"><div class="ibm-alternate-rule"><hr /></div></div></div>| & Chr(13)
		End If
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t| & str_t & |s| & str_s & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13) & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableTenColumnsVer1_2:6:8
%REM
	Sub CreateTableTenColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableTenColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Redim str_Fields9(1 To 1) As String
	Redim str_Fields10(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpanVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumnsVer1_2(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-10 (Track 6-10)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			Redim Preserve str_Fields9(1 To fCtr)
			Redim Preserve str_Fields10(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			str_Fields9(fCtr) = |en_d| & str_d & |t9s| & Cstr(s) & |tc|
			str_Fields10(fCtr) = |en_d| & str_d & |t10s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-10 (Track 6-10)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields9(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields10(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableTenColumns_Radio:6:8
%REM
	Sub CreateTableTenColumns_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableTenColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields6(1 To 1) As String
	Redim str_Fields7(1 To 1) As String
	Redim str_Fields8(1 To 1) As String
	Redim str_Fields9(1 To 1) As String
	Redim str_Fields10(1 To 1) As String
	Redim str_FieldName6(1 To 1) As String
	Redim str_FieldName7(1 To 1) As String
	Redim str_FieldName8(1 To 1) As String
	Redim str_FieldName9(1 To 1) As String
	Redim str_FieldName10(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-5 (Tracks 1-5)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableFiveColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableFiveColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 6-10 (Track 6-10)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields6(1 To fCtr)
			Redim Preserve str_Fields7(1 To fCtr)
			Redim Preserve str_Fields8(1 To fCtr)
			Redim Preserve str_Fields9(1 To fCtr)
			Redim Preserve str_Fields10(1 To fCtr)
			Redim Preserve str_FieldName6(1 To fCtr)
			Redim Preserve str_FieldName7(1 To fCtr)
			Redim Preserve str_FieldName8(1 To fCtr)
			Redim Preserve str_FieldName9(1 To fCtr)
			Redim Preserve str_FieldName10(1 To fCtr)
			str_Fields6(fCtr) = |en_d| & str_d & |t6s| & Cstr(s) & |tc|
			str_Fields7(fCtr) = |en_d| & str_d & |t7s| & Cstr(s) & |tc|
			str_Fields8(fCtr) = |en_d| & str_d & |t8s| & Cstr(s) & |tc|
			str_Fields9(fCtr) = |en_d| & str_d & |t9s| & Cstr(s) & |tc|
			str_Fields10(fCtr) = |en_d| & str_d & |t10s| & Cstr(s) & |tc|
			str_FieldName6(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName7(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName8(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName9(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			str_FieldName10(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 6-10 (Track 6-10)
	For s = 1 To (sCtr - 1)
		str_t = "6"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 3) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 4) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 5 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields6(s)
		str_FieldName = str_FieldName6(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields7(s)
		str_FieldName = str_FieldName7(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields8(s)
		str_FieldName = str_FieldName8(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields9(s)
		str_FieldName = str_FieldName9(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields10(s)
		str_FieldName = str_FieldName10(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:LoadMIQuestion:1:8
Sub LoadMIQuestion(intCurrQuestion As Integer, docEventProfile As NotesDocument, docMIQuestionSetLookup As NotesDocument, docDialog As NotesDocument)
	
	Const STR_MODULE_NAME = |LoadMIQuestion|
	
	Dim strCurrQuestion As String
	Dim strIncludeFieldName As String
	Dim strIncludeThisQuestion As String
	Dim strText As String
	Dim strType As String
	Dim strAnswerFieldName As String
	
     'Trap errors
	On Error Goto lblError
	
	strCurrQuestion = |Q| & Cstr(intCurrQuestion)
	
	Call Debug(STR_MODULE_NAME & |: Processing MI question [| & strCurrQuestion & |].|) 
	
	'Build field names based on the question number
	strIncludeFieldName = |ep_MI_Include_| & strCurrQuestion
	
	'Set the field that identifies whether this MI question is included
	strIncludeThisQuestion = Cstr(docEventProfile.GetItemValue(strIncludeFieldName)(0))
	
	Call docDialog.ReplaceItemValue(strIncludeFieldName, strIncludeThisQuestion)
	
	If (strIncludeThisQuestion = "Yes") Then
		Call Debug(STR_MODULE_NAME & |: Question is included.|) 
		
		strText = Cstr(docMIQuestionSetLookup.GetItemValue(strCurrQuestion & |_text|)(0))
		Call Debug(STR_MODULE_NAME & |: Question text is [| & strText & |].|) 		
		Call docDialog.ReplaceItemValue(|mi_la_| & strCurrQuestion, strText)
		
		'Based on the question type, calculate the name of the field used to store the answer to this question
		strType = Cstr(docMIQuestionSetLookup.GetItemValue(strCurrQuestion & |_type|)(0))
		Call Debug(STR_MODULE_NAME & |: Question type is [| & strType & |].|) 		
		
		Select Case strType
		Case |check|:
			strAnswerFieldName = |en_cicoption|
		Case |dialog|:
			strAnswerFieldName = |en_cidoption|	
		Case |radio|:
			strAnswerFieldName = |en_ciroption|
		Case |text|:	
			strAnswerFieldName = |en_citoption|
		Case Else
			Error ERR_SYSTEM_ERROR, |An unknown field type [| & strType & |] was found for question [| & Cstr(intCurrQuestion) & |].|	
		End Select
		
		strAnswerFieldName = strAnswerFieldName & Cstr(intCurrQuestion)
		
		Call Debug(STR_MODULE_NAME & |: Answer field name is [| & strAnswerFieldName & |].|) 		
		Call docDialog.ReplaceItemValue(|mi_fieldname_| & strCurrQuestion, strAnswerFieldName)
		
		'Set the default value
		Call docDialog.ReplaceItemValue(|mi_in_| & strCurrQuestion & |_exp|, strAnswerFieldName)
		
	Else
		Call Debug(STR_MODULE_NAME & |: Question is NOT included.|) 
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:GetEventFields:1:8
Sub GetEventFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetEventFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |ei|, |ConfName|, arrExportFields())
	Call GetExportField(docCurr, |ei|, |confstartdate|, arrExportFields())
	Call GetExportField(docCurr, |ei|, |confcity|, arrExportFields())
	Call GetExportField(docCurr, |ei|, |en_dateRegistered|, arrExportFields()) ' Date stamp when this person registered
	Call GetExportField(docCurr, |ei|, |WTacticCode|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ExportEnrollments:1:8
Sub ExportEnrollments(docEventProfile As NotesDocument, collDocsToExport As NotesDocumentCollection)
	
	Const STR_MODULE_NAME = |ExportToExcel|
	
	Dim ws As New NotesUIWorkspace	
	Dim varExportFilename As Variant
	Dim strExportFilename As String
	Dim docEnrollment As NotesDocument
	Dim docDialog As NotesDocument
	Dim strEventID As String
	Dim arrExportFields() As ExportField
	Dim flgOK As Boolean
	Dim strTitle As String
	Dim intExportFormat As Integer
	Dim strDefaultFileName As String
	Dim strCharset As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	Set docDialog = g_dbCurr.CreateDocument
	docDialog.Form = "dlgExportSelectedFields"
	
	'Assume that all selected documents are for the same event
	Set docEnrollment = collDocsToExport.GetFirstDocument()
	strEventID = docEnrollment.ep_ID(0)	
	strTitle = docEnrollment.confname(0) + " - City: " + docEnrollment.confcity(0) + " - Date: " + docEnrollment.confstartdate(0)
	
	Set docEventProfile = docGetEventProfileByEventID(strEventID)
	
	'Load the dailog box used to select which fields to export
	Call LoadExportDialog(docEventProfile, docDialog)
	
	flgOK = ws.DialogBox("dlgExportSelectedFields", True, True, False, False, False, False, "Export enrollments for " & strTitle, docDialog, True, False, False)
	
	If flgOK Then
		
		intExportFormat = Cint(docDialog.ExportFormat(0))
		
		Select Case intExportFormat
		Case INT_EXPORT_XLS:
			strDefaultFileName = |AS Export.xls|
		Case INT_EXPORT_CSV:
			strDefaultFileName = |AS Export.csv|
		Case INT_EXPORT_ODF:
			strDefaultFileName = |AS Export.ods|
		Case Else
			Error ERR_SYSTEM_ERROR, |An unknown export format [| & Cstr(intExportFormat) & |] was supplied to the function.|	
		End Select
		
		varExportFilename = ws.SaveFileDialog(False , |Save Exported Enrollments As| ,  ,  , strDefaultFileName)
		
		If Not Isempty(varExportFilename) Then
			
			strExportFilename = varExportFilename(0)
			
			Call GetAllFields(docEventProfile, docDialog, arrExportFields())
			
			Select Case intExportFormat
			Case INT_EXPORT_XLS:
				Call ExportToExcel(strExportFilename,collDocsToExport, strTitle, arrExportFields())
			Case INT_EXPORT_CSV:
				strCharset = "UTF-8"
				Call ExportToCSV(strExportFilename,collDocsToExport, strTitle, arrExportFields(), strCharset)
			Case INT_EXPORT_ODF:
				Call ExportToODF(strExportFilename,collDocsToExport, strTitle, arrExportFields())
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown export format [| & Cstr(intExportFormat) & |] was supplied to the function.|	
			End Select
			
		End If	
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:2:ExportToExcel:1:8
Sub ExportToExcel(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField)
	
	Const STR_MODULE_NAME = |ExportToExcel|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	Dim xlApp As Variant
	Dim xlSheet As Variant
	Dim intCurrRow As Integer	
	Dim intCurrCol As Integer
	Dim intCurrIndex As Integer
	Dim intMaxIndex As Integer
	Dim intLastCol As Integer
	Dim intCurrDoc As Integer
	Dim intTotalDocs As Integer
	Dim varResult As Variant
	Dim strResult As String
	Dim docCurr As NotesDocument
	Dim strColumnTitle As String
	Dim str_ColumnWidths As String
	
	intMaxIndex = Ubound(arrExportFields)
	intLastCol = intMaxIndex + 1
	
	'Instantiate Excel
	Set xlApp = CreateObject("Excel.Application")
	
	Call Debug(STR_MODULE_NAME & |: Exporting to Excel version [| & xlApp.Version & |] running on [| & xlApp.OperatingSystem & |].|)
	
	'Check Excel version and scrub filename extension
	If Cint(Left(xlApp.Version, Instr(1, xlApp.Version, ".")-1)) >= 12 Then
		If Instr(1, strExportFilename, ".") > 0 Then
			strExportFilename = Left(strExportFilename, Instr(1, strExportFilename, ".")-1) + ".xlsx"
		Else
			strExportFilename = strExportFilename + ".xlsx"
		End If
	Else
		If Instr(1, strExportFilename, ".") > 0 Then
			strExportFilename = Left(strExportFilename, Instr(1, strExportFilename, ".")-1) + ".xls"
		Else
			strExportFilename = strExportFilename + ".xls"
		End If
	End If
	
	xlApp.StatusBar = "Creating worksheet..."
	xlApp.Visible = True
	xlApp.Workbooks.Add
	xlApp.ReferenceStyle = 2
	Set xlsheet = xlApp.Workbooks(1).Worksheets(1)
	xlSheet.Name = "Export from Attendee Solutions"
	
	'Add the column titles to row 3 of the worksheet
	xlApp.StatusBar = "Creating column headings..."
	
	intCurrRow = 3
	intCurrCol = 1
	
	Forall varExportField In arrExportFields()
		strColumnTitle = varExportField.strLabel
		xlSheet.Cells(intCurrRow, intCurrCol).Value = "'" + strColumnTitle
		intCurrCol = intCurrCol + 1
	End Forall
	
	intTotalDocs = collDocuments.Count
	
	Set docCurr = collDocuments.GetFirstDocument()
	
	Do While Not docCurr Is Nothing
		
		intCurrDoc = intCurrDoc + 1
		
		Call Debug(STR_MODULE_NAME & |: Exporting document | & Cstr(intCurrDoc) & | of | & Cstr(intTotalDocs) & |...|)
		
		xlApp.StatusBar = |Processing document | & Cstr(intCurrDoc) & | of | & Cstr(intTotalDocs) & |...| 
		
		intCurrRow = intCurrRow + 1
		intCurrCol = 1
		
		For intCurrIndex = 0 To intMaxIndex 
			
			On Error Goto lblErrorNextField
			
			'Only export if the field is in the document
			'If this is checkbox (multi-value) field use the Text() method to get all values
			%REM
			If arrExportFields(intCurrIndex).strType = |check| Then
				strResult = ""
				If (docCurr.HasItem(arrExportFields(intCurrIndex).strExport)) Then
					strResult = docCurr.GetFirstItem(arrExportFields(intCurrIndex).strExport).Text
				End If
				If(intCurrIndex = g_en_roleIndex And strResult <> "")Then
					strResult = parseRoleField(strResult)
				End If
			Else
				varResult = Evaluate(arrExportFields(intCurrIndex).strExport, docCurr)
				strResult = Cstr(varResult(0))
			End If
			%END REM
			
			If (docCurr.HasItem(arrExportFields(intCurrIndex).strExport)) Then
				'If this is checkbox (multi-value) field use the Text() method to get all values
				If arrExportFields(intCurrIndex).strType = |check| Then
					strResult = docCurr.GetFirstItem(arrExportFields(intCurrIndex).strExport).Text
				Else
					varResult = Evaluate(arrExportFields(intCurrIndex).strExport, docCurr)
					strResult = Cstr(varResult(0))
				End If
			Elseif (arrExportFields(intCurrIndex).strType = |formula|) Then
				varResult = Evaluate(arrExportFields(intCurrIndex).strExport, docCurr)
				strResult = Cstr(varResult(0))
			Else
				strResult = ||
			End If
			
lblNextField:
			
			On Error Goto lblError
			
			'TODO: What about language versions?
			If strResult  = "Select" Or strResult  = "Select one" Then
				xlsheet.Cells(intCurrRow, intCurrCol).Value = ""
			Else
				xlsheet.Cells(intCurrRow, intCurrCol).Value = "'" + strResult
			End If
			
			'Set column widths for later use
			%REM
			If intCurrRow = 4 Then
				If arrExportFields(intCurrIndex).strLabel = "Sessions" Then
					If str_ColumnWidths = "" Then
						str_ColumnWidths = str_ColumnWidths + "90"
					Else
						str_ColumnWidths = str_ColumnWidths + ";90"
					End If
				Else
					If str_ColumnWidths = "" Then
						str_ColumnWidths = str_ColumnWidths + ""
					Else
						str_ColumnWidths = str_ColumnWidths + ";"
					End If
				End If
			End If
			%END REM
			
			intCurrCol = intCurrCol + 1
			
		Next 
		
		Set docCurr = collDocuments.GetNextDocument(docCurr) 
		
	Loop
	
	xlApp.Range(xlsheet.Cells(1,1), xlsheet.Cells(intCurrRow, intLastCol)).Select
	xlApp.Selection.Font.Name = "Arial"
	xlApp.Selection.Font.Size = 9
	xlApp.Selection.Columns.AutoFit
	'xlApp.Selection.Columns("AB").ColumnWidth = 60
	'xlApp.Selection.Rows.RowHeight = 80
	xlApp.Selection.NumberFormat = "@"
	
	'Add the title in row 1, column 1
	xlSheet.Cells(1,1).Value = strTitle
	xlApp.Rows("1:1").Select
	xlApp.Selection.Font.Bold = True
	xlApp.Selection.Font.Underline = True
	xlApp.Selection.MergeCells = True
	xlApp.ReferenceStyle = 1
	xlApp.Range("A1").Select
	xlApp.StatusBar = "Export complete."
	xlapp.ActiveWorkbook.SaveAs strExportFilename
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	'Error 213 is a Microsoft Excel error
	If Err() = 213 Then
		'SaveAs method of Workbook class failed
		'Likely means that the user cancelled the save of the exported workbook, so don't log it as an error
		If (Instr(Error(), |SaveAs method of Workbook class failed|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User chose to not save the exported file.|)					
			Resume Next
		End If
	End If	
	
	'Error 207 is an OLE automation error
	If Err() = 207 Then
		'Automation object error
		'Likely means that the user closed Excel during the export, so don't log it as an error
		If (Instr(Error(), |Automation object error|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User closed Excel during the export.|)					
			Resume Next
		End If
	End If	
	
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	If (Not docCurr Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document being exported has UNID [| & docCurr.UniversalID & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Document being exported is Nothing|)
	End If
	
	If (intCurrIndex <= Ubound(arrExportFields)) Then
		Call Debug(STR_MODULE_NAME & |: Array index is [| & Cstr(intCurrIndex) & |]|)
		Call Debug(STR_MODULE_NAME & |: Field being exported is [| & arrExportFields(intCurrIndex).strExport & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Array index is out of bounds.|)
	End If	
	
	Resume lblExit
	
lblErrorNextField:
	
	strResult = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	'Error 91 we can ignore
	If Err() = 91 Then
		Resume Next		
	End If	
	
	'Error 213 is a Microsoft Excel error
	If Err() = 213 Then
		'SaveAs method of Workbook class failed
		'Likely means that the user cancelled the save of the exported workbook, so don't log it as an error
		If (Instr(Error(), |SaveAs method of Workbook class failed|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User chose to not save the exported file.|)			
			Resume Next
		End If
	End If	
	
	'Error 207 is an OLE automation error
	If Err() = 207 Then
		'Automation object error
		'Likely means that the user closed Excel during the export, so don't log it as an error
		If (Instr(Error(), |Automation object error|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User closed Excel during the export.|)		
			Resume Next
		End If
	End If	
	
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	If (Not docCurr Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document being exported has UNID [| & docCurr.UniversalID & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Document being exported is Nothing|)		
	End If
	
	If (intCurrIndex <= Ubound(arrExportFields)) Then
		Call Debug(STR_MODULE_NAME & |: Array index is [| & Cstr(intCurrIndex) & |]|)
		Call Debug(STR_MODULE_NAME & |: Field being exported is [| & arrExportFields(intCurrIndex).strExport & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Array index is out of bounds.|)		
	End If
	
	Resume lblNextField
	
End Sub

'++LotusScript Development Environment:2:1:docAppendReport:1:8
Function docAppendReport(docCombinedReport As NotesDocument, docReport As NotesDocument) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a comined report and a report, append the contents of the report to the
	'combined report.
	
     'Parameters
     '-----------------------
	'docCombinedReport				The combined report
	'docReport							The report to append
     '     
     'Return Values
     '-----------------------
     'docAppendReport is set to the combined report or Nothing if an error occurred.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docAppendReport|
	
	Dim docNewReport As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Set docNewReport = g_dbCurr.CreateDocument
	
lblExit:
	
	'TODO: Have this do something!
	Set docAppendReport = docNewReport
	
	If (docNewReport Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  Unable to append report.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  Report appended.|)
	End If
	
	Exit Function
	
lblError:
	
	Set docNewReport = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:AddSponsorsConfiguration:1:8
Sub AddSponsorsConfiguration(strLocale As String) 
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Create a new sponsors configuration for the supplied locale.
	'
     'Parameters
     '-----------------------
	'strLocale				The locale for the sponsors configuration.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |AddSponsorsConfiguration|	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Dim ws As New NotesUIWorkspace
	Dim uidoc As NotesUIDocument
	Dim docEventProfile As notesdocument
	Dim view As NotesView
	Dim strKey As String
	Dim docSponsorContent As NotesDocument	
	Dim intReply As Integer
	
	Set uidoc = ws.CurrentDocument
	Call uidoc.Save	
	Set docEventProfile = uidoc.Document		
	
	Set view = g_dbCurr.GetView("vLookupSponsorsByIDLocale")
	
	strKey = docEventProfile.ep_id(0) & strLocale
	
	Set docSponsorContent = view.GetDocumentByKey( strKey , True )
	
	If docSponsorContent Is Nothing Then
		
		intReply = intAskQuestion(|Would you like to copy a sponsors page from an existing event?|)
		
		If (intReply = IDYES) Then
			'Create a sponsors page by starting with values in an existing sponsors page
			Set docSponsorContent = docCopySponsorsPage(docEventProfile, strLocale)
		Else
			'Create a new blank sponsors page
			Set docSponsorContent = docCreateSponsorsPage(docEventProfile, strLocale)
		End If	
		
	End If
	
	'Now edit the sponsor doc in the UI
	If Not docSponsorContent Is Nothing Then
		Call ws.EditDocument(True, docSponsorContent)		
	End If
	
lblExit:	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	'Don't log NotesUIDocument: Save cancelled errors
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)	
	If Err() <> 4411 Then
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	End If
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:StoreMiQuestion20:1:8
Sub StoreMiQuestion20(docAREventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an Attendee Repository event profile, update the needed information
	'in the Attendee Repository event profile.
	'
     'Parameters
     '----------------
	'docAREventProfile						The Attendee Repository event profile to be updated.
	'
     'Return Values
     '-------------------
     'None..
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |StoreMIQuestion20|
	
	Dim strLabel As String
	Dim strFormula As String
	
     'Trap errors
	On Error Goto lblError
	
	strLabel = |What is your primary role(s) in your organization? (please select up to 3)|
	
	'strFormula = |@Left(en_role| & |; "=")|
	'@ReplaceSubstring(@Implode(FIELDNAME);" ";";")
	strFormula = |@ReplaceSubstring(@Implode(@Left(en_role| & |; "="));" ";";")|
	
	'Now set the appropriate field values in the Attendee Repository event profile
	Call CopyToAREventProfile(docAREventProfile, |eplma_label20|, strLabel)
	Call CopyToAREventProfile(docAREventProfile, |epma_question20|, strFormula)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docGetRoleMapping:1:8
Function docGetRoleMapping(strBrand As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a brand name, try to find the Marketing Role mapping document in the
	'reference database for that brand.
     '
     'Parameters
     '----------------
     'strBrand				The brand name (as defined in ES)
	'
     'Return Values
     '-------------------
     'If a mapping document is found, it is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetRoleMapping|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupRoleMappings|
	
	Dim view As NotesView
	Dim docRoleMapping As NotesDocument
	Dim strKey As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether there is a role mapping for brand [| & strBrand & |].|) 
	
	'Find the lookup view
	Set g_dbReference = dbGetReferenceDb()
	
	Set view = g_dbReference.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	strKey = strBrand
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] in reference database for document with key [| & strKey & |].|) 
	
	Set docRoleMapping = view.GetDocumentByKey(strKey, True)
	
	If (Not docRoleMapping Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return value
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetRoleMapping = docRoleMapping
	
	Exit Function
	
lblError:
	
	Set docRoleMapping = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:getLocalization:1:8
Function getLocalization(strLocale As String , strFormName As String , docCurr As NotesDocument) 
	
	Const STR_MODULE_NAME = |getLocalization|
	
	Dim docLocaleProfile As NotesDocument
	Dim docEventProfile As NotesDocument
	Dim docMIQuestionSetLookup As NotesDocument	
	Dim intCurrQuestion As Integer
	Dim itemFieldValues As NotesItem
	Dim strScript As String
	Dim strEventID As String
	Dim strQuestionSetID As String
	Dim strBrand As String
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Page [| & strFormName & |]|)
	
	Call Debug(STR_MODULE_NAME & |: Locale [| & strLocale & |]|)
	
	'Get the event ID
	strEventID = Cstr(docCurr.ep_ID(0))
	
	Call Debug(STR_MODULE_NAME & |: Event ID [| & strEventID & |]|)
	
	'Get the locale profile from the reference database
	Set docLocaleProfile = docGetLocaleProfile(strLocale)
	
	'Find the associated event profile (we don't need to for the events page as it is not event specific)
	If strFormName <> "events" Then
		Set docEventProfile = docGetEventProfileByEventID(Cstr(docCurr.ep_ID(0)))
		'Create a JS array to collect the field labels for validation.
		strScript = "var labels= new Array();"
	End If
	
	'###########  TITLE  ###########
	
	docCurr.lc_EncodingType  = docLocaleProfile.lc_EncodingType(0)
	
	'Artifacts Title and left nav label values from "General translations" in Ref DB.
	'All page title are used in the left nav so we pass them 
	docCurr.lc_Events           = docLocaleProfile.lc_Events(0)
	docCurr.lc_AgendaPageTitle  = docLocaleProfile.lc_AgendaPageTitle(0)
	docCurr.lc_RegPageTitle     = docLocaleProfile.lc_RegPageTitle(0)
	docCurr.lc_SpeakerPageTitle = docLocaleProfile.lc_SpeakerPageTitle(0)
	docCurr.lc_SponsorPageTitle = docLocaleProfile.lc_SponsorPageTitle(0)	
	docCurr.lc_AcceptPageTitle  = docLocaleProfile.lc_AcceptPageTitle(0)
	docCurr.lc_DeclinePageTitle = docLocaleProfile.lc_DeclinePageTitle(0)
	docCurr.lc_Continue_Alt     = docLocaleProfile.lc_Continue_Alt(0)
	strOther = docLocaleProfile.lc_Other(0)
	' The type fo Privacy statement use:Original. OPt-in or Opt-out
	docCurr.lc_OptInOutType     = docLocaleProfile.lc_OptInOutType(0)
	
	'########### AGENDA FORM SPECIFIC  ###########
	If strFormName = "agenda" Or strFormName = "v16_agenda" Then
		docCurr.lc_RegisterNow = docLocaleProfile.lc_RegisterNow(0)
	End If
	
	'###########  ENROLLALL FORM SPECIFIC  ###########
	If strFormName = "enrollall" Or strFormName = "wienrollall" Or strFormName = "v16_enrollall" Or strFormName = "v16_wienrollall" Then
		
		'Store the required field message in JS array for use in validation
		strScript = strScript + |labels['lc_ValidationMsg']="| + docLocaleProfile.lc_ValidationMsg(0) + |";|
		
		'###########  PERSON  ###########
		
		'Attendee information / Section Title			
		docCurr.label_AttendeeInformation = docLocaleProfile.lc_AttendeeInformation(0)				
		docCurr.dspl_PageTitle = docLocaleProfile.lc_RegPageTitle(0)
		docCurr.lc_ProcessingMsg = docLocaleProfile.lc_ProcessingMsg(0)
		docCurr.lc_Submit = docLocaleProfile.lc_Submit(0)
		docCurr.lc_Submit_Alt = docLocaleProfile.lc_Submit_Alt(0)
		
		'Attendee type
		Dim lc_AttendeeType As String
		lc_AttendeeType = docLocaleProfile.lc_AttendeeType(0)
		strScript = strScript + |labels['en_attendeetype']="| + lc_AttendeeType + |";|
		docCurr.label_attendeetype = lc_AttendeeType
		
		'Get the value for Attendee type drop down field
		Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_AttendeeTypeValues")
		Call docCurr.ReplaceItemValue("lc_AttendeeTypeValues",itemFieldValues.Values)
		Call docCurr.ReplaceItemValue("lc_Select",docLocaleProfile.lc_Select(0))			
		
		'Salutation / Prefix
		Dim lc_Prefix As String
		lc_Prefix = docLocaleProfile.lc_Prefix(0)
		strScript = strScript + |labels['en_prefix']="| + lc_Prefix + |";|
		docCurr.label_prefix = lc_Prefix
		
		'Get the value for Attendee prefix/salutation drop down field
		Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_PrefixValues")
		Call docCurr.ReplaceItemValue("lc_PrefixValues",itemFieldValues.Values)
		
		'Salutation / Prefix
		Dim lc_PersonTitle As String
		lc_PersonTitle = docLocaleProfile.lc_PersonTitle(0)
		strScript = strScript + |labels['en_persontitle']="| + lc_PersonTitle + |";|
		docCurr.label_persontitle = lc_PersonTitle
		
		'Get the value for person title drop down field
		Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_PersonTitleValues")
		Call docCurr.ReplaceItemValue("lc_PersonTitleValues",itemFieldValues.Values)
		
		'First name
		Dim lc_FirstName As String
		lc_FirstName = docLocaleProfile.lc_FirstName(0)
		strScript = strScript + |labels['en_first']="| + lc_FirstName + |";|
		docCurr.label_first = lc_FirstName
		
		'Middle initial
		Dim lc_MiddleInitial As String
		lc_MiddleInitial = docLocaleProfile.lc_MiddleInitial(0)
		strScript = strScript + |labels['en_middle']="| + lc_MiddleInitial + |";|
		docCurr.label_middle = lc_MiddleInitial
		
		'Last name
		Dim lc_LastName As String
		lc_LastName = docLocaleProfile.lc_LastName(0)
		strScript = strScript + |labels['en_last']="| + lc_LastName + |";|
		docCurr.label_last = lc_LastName			
		
		'Pronunciation
		Dim lc_Pronunciation As String
		lc_Pronunciation = docLocaleProfile.lc_Pronunciation(0)
		strScript = strScript + |labels['en_pronunciation']="| + lc_Pronunciation + |";|
		docCurr.label_pronunciation = lc_Pronunciation			
		
		'Job title
		Dim lc_JobTitle As String
		lc_JobTitle = docLocaleProfile.lc_JobTitle(0)
		strScript = strScript + |labels['en_title']="| + lc_JobTitle + |";|
		docCurr.label_title = lc_JobTitle	
		
		'E-mail address
		Dim lc_EmailAddress As String
		lc_EmailAddress = docLocaleProfile.lc_EmailAddress(0)
		strScript = strScript + |labels['en_email']="| + lc_EmailAddress + |";|
		docCurr.label_email = lc_EmailAddress	
		
		'Business phone
		Dim lc_Phone As String
		lc_Phone = docLocaleProfile.lc_Phone(0)
		strScript = strScript + |labels['en_phone']="| + lc_Phone + |";|
		docCurr.label_phone = lc_Phone
		
		'Fax			
		strScript = strScript + |labels['en_fax']="| + docLocaleProfile.lc_Fax(0) + |";|
		docCurr.label_fax = docLocaleProfile.lc_Fax(0)
		
		'Role 
		Dim lc_Role As String
		lc_Role = docLocaleProfile.lc_Role(0)
		strScript = strScript + |labels['en_role']="| + lc_Role + |";|
		docCurr.label_role = lc_Role
		
		'GOE question
		Dim lc_GOE As String		 
		
		If (docLocaleProfile.HasItem(|lc_GOE_self_ID_label|)) Then
			lc_GOE = docLocaleProfile.lc_GOE_self_ID_label(0)
			strScript = strScript + |labels['en_goe']="| + lc_GOE + |";|
			docCurr.label_goe = lc_GOE
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_self_ID_label field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_GOE_Label_With_Link_v17|)) Then
			docCurr.label_goe_with_link = docLocaleProfile.lc_GOE_Label_With_Link_v17(0)
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_Label_With_Link_v17 field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_GOE_self_ID_answers|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_GOE_self_ID_answers")			
			Call docCurr.ReplaceItemValue("lc_GOEValues",itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_self_ID_answers field in locale profile.|)			
		End If
		
		'GOE type question
		If (docLocaleProfile.HasItem(|lc_GOE_type_label|)) Then
			Dim lc_GOEType As String
			lc_GOEType = docLocaleProfile.lc_GOE_type_label(0)
			strScript = strScript + |labels['en_goetype']="| +  lc_GOE + | | + lc_GOEType + |";|
			docCurr.label_goetype = lc_GOEType
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_type_label field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_GOE_type_answers|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_GOE_type_answers")			
			Call docCurr.ReplaceItemValue("lc_GOETypeValues",itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_type_answers field in locale profile.|)			
		End If		
		
		'GOE type other question
		If (docLocaleProfile.HasItem(|lc_GOE_type_other_label|)) Then
			Dim lc_GOETypeOther As String
			lc_GOETypeOther = docLocaleProfile.lc_GOE_type_other_label(0)
			strScript = strScript + |labels['en_goetypeother']="| + lc_GOETypeOther + |";|
			docCurr.label_goetypeother = lc_GOETypeOther
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_type_other_label field in locale profile.|)
		End If	
		
		'Lobbyist question 
		Dim lc_Lobbyist As String
		
		If (docLocaleProfile.HasItem(|lc_Lobbyist_label|)) Then
			lc_Lobbyist = docLocaleProfile.lc_Lobbyist_label(0)
			strScript = strScript + |labels['en_lobbyist']="| + lc_Lobbyist + |";|
			docCurr.label_lobbyist = lc_Lobbyist
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_Lobbyist_label field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_Lobbyist_answers|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_Lobbyist_answers")			
			Call docCurr.ReplaceItemValue("lc_LobbyistValues",itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_Lobbyist_answers field in locale profile.|)			
		End If		
		
		'Lobbyist type question
		If (docLocaleProfile.HasItem(|lc_Lobbyist_type_label|)) Then
			Dim lc_LobbyistType As String
			lc_LobbyistType = docLocaleProfile.lc_Lobbyist_type_label(0)
			strScript = strScript + |labels['en_lobbyisttype']="| + lc_Lobbyist + | | + lc_LobbyistType + |";| 
			docCurr.label_lobbyisttype = lc_LobbyistType
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_Lobbyist_type_label field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_Lobbyist_type_answers|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_Lobbyist_type_answers")			
			Call docCurr.ReplaceItemValue("lc_LobbyistTypeValues",itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_Lobbyist_type_answers field in locale profile.|)			
		End If			
		
		'Get the label for the Payment Options section
		docCurr.label_PaymentOptions = docLocaleProfile.lc_PaymentOptions(0)	
		
		'GOE payment options question
		If (docLocaleProfile.HasItem(|lc_CTEBA_PM_Options|)) Then
			Dim lc_CTEBA_PM_Options As String
			lc_CTEBA_PM_Options = docLocaleProfile.lc_CTEBA_PM_Options(0)
			strScript = strScript + |labels['en_goe_payment_method']="| + lc_CTEBA_PM_Options + |";|
			docCurr.label_goe_payment_method = lc_CTEBA_PM_Options
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_PM_Options field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_GOE_Payment_Methods|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem("lc_GOE_Payment_Methods")			
			Call docCurr.ReplaceItemValue("lc_GOEPaymentValues", itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_Payment_Methods field in locale profile.|)			
		End If			
		
		'Required to pay question
		If (docLocaleProfile.HasItem(|lc_CTEBA_PM_ReqPay|)) Then
			Dim lc_CTEBA_PM_ReqPay As String
			lc_CTEBA_PM_ReqPay = docLocaleProfile.lc_CTEBA_PM_ReqPay(0)
			strScript = strScript + |labels['en_required_to_pay']="| + lc_CTEBA_PM_ReqPay + |";|
			docCurr.label_required_to_pay = lc_CTEBA_PM_ReqPay
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_PM_Options field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_PM_ReqPay_Answers|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem("lc_CTEBA_PM_ReqPay_Answers")			
			Call docCurr.ReplaceItemValue("lc_RequiredToPayValues", itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_PM_ReqPay_Answers field in locale profile.|)			
		End If			
		
		'Non GOE payment options question
		If (docLocaleProfile.HasItem(|lc_CTEBA_PM_Options|)) Then
			Dim lc_CTEBA_PM_NonGOE As String
			lc_CTEBA_PM_NonGOE = docLocaleProfile.lc_CTEBA_PM_Options(0)
			strScript = strScript + |labels['en_non_goe_payment_method']="| + lc_CTEBA_PM_NonGOE + |";|
			docCurr.label_non_goe_payment_method = lc_CTEBA_PM_NonGOE
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_PM_Options field in locale profile.|)
		End If
		
		If (docLocaleProfile.HasItem(|lc_Non_GOE_Payment_Methods|)) Then		
			Set itemFieldValues = docLocaleProfile.GetFirstItem("lc_Non_GOE_Payment_Methods")			
			Call docCurr.ReplaceItemValue("lc_NonGOEPaymentValues", itemFieldValues.Values)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_Non_GOE_Payment_Methods field in locale profile.|)			
		End If			
		
		'Payment info
		If (docLocaleProfile.HasItem(|lc_CTEBA_PM_Alt_2|)) Then
			Dim lc_CTEBA_PM_Alt_2 As String
			lc_CTEBA_PM_Alt_2 = docLocaleProfile.lc_CTEBA_PM_Alt_2(0)
			docCurr.goe_payment_info = lc_CTEBA_PM_Alt_2
			docCurr.non_goe_payment_info = lc_CTEBA_PM_Alt_2			
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_PM_Alt_2 field in locale profile.|)
		End If		
		
		'Training and Education overlay
		docCurr.lc_Close = docLocaleProfile.lc_Close(0)	
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_1|)) Then
			docCurr.lc_CTEBA_TE_1 = docLocaleProfile.lc_CTEBA_TE_1(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_1 field in locale profile.|)
		End If					
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_2|)) Then
			docCurr.lc_CTEBA_TE_2 = docLocaleProfile.lc_CTEBA_TE_2(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_2 field in locale profile.|)
		End If					
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_3|)) Then
			docCurr.lc_CTEBA_TE_3 = docLocaleProfile.lc_CTEBA_TE_3(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_3 field in locale profile.|)
		End If					
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_4|)) Then
			docCurr.lc_CTEBA_TE_4 = docLocaleProfile.lc_CTEBA_TE_4(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_4 field in locale profile.|)
		End If					
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_5|)) Then
			docCurr.lc_CTEBA_TE_5 = docLocaleProfile.lc_CTEBA_TE_5(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_5 field in locale profile.|)
		End If					
		
		If (docLocaleProfile.HasItem(|lc_CTEBA_TE_6|)) Then
			docCurr.lc_CTEBA_TE_6 = docLocaleProfile.lc_CTEBA_TE_6(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_CTEBA_TE_6 field in locale profile.|)
		End If			
		
		'GOE Definition overlay
		docCurr.lc_Close2 = docLocaleProfile.lc_Close(0)	
		
		If (docLocaleProfile.HasItem(|lc_GOE_Title|)) Then
			docCurr.lc_GOE_Title = docLocaleProfile.lc_GOE_Title(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_Title field in locale profile.|)
		End If				
		
		If (docLocaleProfile.HasItem(|lc_GOE_description|)) Then
			docCurr.lc_GOE_description = docLocaleProfile.lc_GOE_description(0)	
		Else
			Call Debug(STR_MODULE_NAME & |: Unable to find lc_GOE_description field in locale profile.|)
		End If
		
		'###########  COMPANY  ###########
		
		'Attendee information / Section Title
		docCurr.label_CompanyInformation = docLocaleProfile.lc_CompanyInformation(0)
		
		'CompanyName
		strScript = strScript + |labels['en_companyname']="| + docLocaleProfile.lc_CompanyName(0) + |";|
		docCurr.label_companyname = docLocaleProfile.lc_CompanyName(0)
		
		'Address1
		strScript = strScript + |labels['en_mailstreet1']="| + docLocaleProfile.lc_Address1(0) + |";|
		docCurr.label_mailstreet1 = docLocaleProfile.lc_Address1(0)
		
		'Address2
		strScript = strScript + |labels['en_mailstreet2']="| + docLocaleProfile.lc_Address2(0) + |";|
		docCurr.label_mailstreet2 = docLocaleProfile.lc_Address2(0)
		
		'Address3
		strScript = strScript + |labels['en_mailstreet3']="| + docLocaleProfile.lc_Address3(0) + |";|
		docCurr.label_mailstreet3 = docLocaleProfile.lc_Address3(0)
		
		'City
		strScript = strScript + |labels['en_city']="| + docLocaleProfile.lc_City(0) + |";|
		docCurr.label_city = docLocaleProfile.lc_City(0)
		
		'State
		strScript = strScript + |labels['en_state']="| + docLocaleProfile.lc_State(0) + |";|
		docCurr.label_state = docLocaleProfile.lc_State(0)
		
		'Zip
		strScript = strScript + |labels['en_zip']="| + docLocaleProfile.lc_Zipcode(0) + |";|
		docCurr.label_zip = docLocaleProfile.lc_Zipcode(0)
		
		'Country
		strScript = strScript + |labels['en_country']="| + docLocaleProfile.lc_Country(0) + |";|
		docCurr.label_country = docLocaleProfile.lc_Country(0)
		
		'Get the values for company country drop down field
		'If using the new web service for Notice and Choice we need to use the country list with ISO code in the back separated by a tildy "~"
		Dim strNC_Type As String
		Dim strDB_NC_Type As String
		
		strNC_Type    = docLocaleProfile.lc_OptInOutType(0) ' Flag from Reference DB Locale profile doc
		strDB_NC_Type = g_docDbProfile.lc_OptInOutType(0)   ' Flag from each Canister's own DB Profile document
		If strDB_NC_Type = "WebService" Then '  For now only canister flag   'strNC_Type = "WebService" And 
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_CountryValuesWithISO")
		Else
			Set itemFieldValues = docLocaleProfile.GetFirstItem( "lc_CountryValues")			
		End If		
		
		Call docCurr.ReplaceItemValue("lc_CountryValues",itemFieldValues.Values)
		
		'###########  MI QUESTIONS  ###########
		
		docCurr.label_MI_Questions = docLocaleProfile.lc_AdditionalInformation(0)
		
		'Check whether an MI question set has been chosen
		strQuestionSetID = Cstr(docEventProfile.MIQuestionSet(0))
		
		Set docMIQuestionSetLookup = docGetMIQuestionSetLookup(strQuestionSetID, strLocale)
		
		'If one has then, check in the event profile whether each question is included and if
		'it is set the values for that question
		If (Not docMIQuestionSetLookup Is Nothing) Then
			For intCurrQuestion = 1 To 10
				Call GetMIQuestionLocalization(intCurrQuestion, docEventProfile, docMIQuestionSetLookup, docCurr, strScript)
			Next
		End If		
		
		'###########  Marketing based role question  ########### 
		
		'Get the ES intended Audience - NEW MARKETING ROLES
		Dim strIntendedAudience As String
		'strIntendedAudience = Cstr(docEventProfile.attpri(0)) ' ATTendancePRImary from ES Brief
		'Call GetMarketingRoles(strLocale, strIntendedAudience , docCurr, strScript)
		
		'Get the ES brand
		strBrand = Cstr(docEventProfile.es_brand(0))
		Call GetMarketingRoles(strLocale, strBrand, docCurr, strScript)
		
		'Update the dynamically generated JS with an array that enables us to translate
		'a language specific attendee type into its English equivalent
		Call GetAttendeeTypeTranslations(docLocaleProfile, strScript)	
		
		'###########  PRIVACY  ###########
		
		docCurr.dspl_PrivacyBackoutA      = docLocaleProfile.lc_PrivacyBackoutA(0)
		docCurr.dspl_PrivacyDataB         = docLocaleProfile.lc_PrivacyDataB(0)
		docCurr.dspl_PrivacyNoticeC       = docLocaleProfile.lc_PrivacyNoticeC(0)
		docCurr.label_PrivacyOptinD       = docLocaleProfile.lc_PrivacyOptinD(0)
		docCurr.dspl_PrivacyRestrictUseE  = docLocaleProfile.lc_PrivacyRestrictUseE(0)
		docCurr.label_PrivacyRestrictUseF = docLocaleProfile.lc_PrivacyRestrictUseF(0)
		docCurr.dspl_PrivacySendG         = docLocaleProfile.lc_PrivacySendG(0)
		
		'### NEW PRIVACY ###
		docCurr.dspl_OptInStatement = docLocaleProfile.lc_OptInStatement(0)
		
		docCurr.label_OIEMAIL             = docLocaleProfile.lc_OIEMAIL(0)
		docCurr.label_OITELE              = docLocaleProfile.lc_OITELE(0)
		docCurr.label_OIPOSTAL            = docLocaleProfile.lc_OIPOSTAL(0)
		
		docCurr.label_OOEMAIL             = docLocaleProfile.lc_OOEMAIL(0)
		docCurr.label_OOTELE              = docLocaleProfile.lc_OOTELE(0)
		docCurr.label_OOPOSTAL            = docLocaleProfile.lc_OOPOSTAL(0)
		
	End If		
	
	'########### ACCEPT INVITATION FORM SPECIFIC  ###########	
	If strFormName = "accept" Or strFormName = "v16_accept" Then
		
		docCurr.lc_InvitationPrompt = docLocaleProfile.lc_InvitationPrompt(0)
		docCurr.label_InvitationID = docLocaleProfile.lc_InvitationID(0)	
		docCurr.lc_InvitationEmailPrompt = docLocaleProfile.lc_InvitationEmailPrompt(0)
		docCurr.label_InvitationEmail = docLocaleProfile.lc_InvitationEmail(0)	
		
		'Store the required field message in JS array for use in validation
		strScript = strScript & |labels['lc_InvalidInvitationIDMsg']="| + docLocaleProfile.lc_InvalidInvitationIDMsg(0) + |";|
		strScript = strScript & |labels['lc_InvalidInvitationEmailMsg']="| + docLocaleProfile.lc_InvalidInvitationEmailMsg(0) + |";|
		
	End If
	
	'########### DECLINE INVITATION FORM SPECIFIC  ###########	
	If strFormName = "decline"  Or strFormName = "v16_decline" Or strFormName = "confirmdecline" Or strFormName = "v16_confirmdecline" Then
		
		docCurr.lc_InvitationPrompt = docLocaleProfile.lc_InvitationPrompt(0)		
		docCurr.label_InvitationID = docLocaleProfile.lc_InvitationID(0)	
		docCurr.lc_InvitationEmailPrompt = docLocaleProfile.lc_InvitationEmailPrompt(0)		
		docCurr.label_InvitationEmail = docLocaleProfile.lc_InvitationEmail(0)			
		
		'Store the required field message in JS array for use in validation
		strScript = strScript & |labels['lc_InvalidInvitationIDMsg']="| + docLocaleProfile.lc_InvalidInvitationIDMsg(0) + |";|
		strScript = strScript & |labels['lc_InvalidInvitationEmailMsg']="| + docLocaleProfile.lc_InvalidInvitationEmailMsg(0) + |";|
		
	End If
	
	'########### INVITATION ALREADY ACCEPTED FORM SPECIFIC  ###########		
	If strFormName = "alreadyaccepted" Or strFormName = "v16_alreadyaccepted" Then
		
		docCurr.lc_AcceptPageTitle = docLocaleProfile.lc_AcceptPageTitle(0)
		
	End If
	
	'########### POPUP  ###########		
	If strFormName = "popupexternal" Or strFormName = "v16_popupexternal" Then
		
		docCurr.lc_LeavingIBMTitle = docLocaleProfile.lc_LeavingIBMTitle(0)		
		docCurr.lc_LeavingIBMText = docLocaleProfile.lc_LeavingIBMText(0)
		docCurr.lc_Continue_Alt = docLocaleProfile.lc_Continue_Alt(0)
		docCurr.lc_Close = docLocaleProfile.lc_Close(0)
		
	End If
	
	'Get the footer settings for all forms
	Call GetFooterSettings(docLocaleProfile, docCurr)
	
	'Save JS array	of translations to the top of the form 
	'before each subform gets a chance to grab its own translation labels
	docCurr.CustomJSHeader = strScript
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: |    & Err() & |: | & Error() & | in line | & Erl & | Locale | & strLocale)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl & | Locale | & strLocale)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:DeleteEmailTemplate:1:8
Sub DeleteEmailTemplate()
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Delete all of the E-mail Template documents that are selected in the current view.
	'
	'NOTE:	This routine is designed to be called from the 'Delete E-mail Template' action.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |DeleteEmailTemplate|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCurrDoc As Integer
	Dim intCountSelected As Integer
	Dim intCount As Integer
	Dim intCountDeleted As Integer
	Dim intCountNotDeleted As Integer
	Dim flgOKToDelete As Integer
	Dim intReason As Integer
	Dim strMsg As String
	Dim intReply As Integer
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	intCount = 0
	
	'Find out how many documents are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the e-mail template(s) to delete.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			intCountSelected = Cint(coll.Count)			
			
			intReply = intAskQuestion(|Do you want to delete the selected e-mail template?|)
			
			If (intReply <> IDYES) Then
				Goto lblExit
			End If	
		End If
		
	Case 1:
		intReply = intAskQuestion(|Do you want to delete the selected e-mail template?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If
		
	Case Else
		intReply = intAskQuestion(|Do you want to delete the | & Cstr(intCountSelected) & | selected e-mail templates?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If		
		
	End Select
	
	If (Not coll Is Nothing) Then
		
		Print |Started.|
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(coll.Count) & | e-mail template(s)...|)
		
		For intCurrDoc = 1 To intCountSelected
			
			Set docCurr = coll.GetNthDocument(intCurrDoc)		
			
			intCount = intCount + 1
			
			flgOKToDelete = flgIsDeleteAllowed(docCurr, intReason)
			
			If (Not flgOKToDelete) Then
				
				strMsg = |You cannot delete the e-mail template '| & Cstr(docCurr.et_Name(0)) & |' | & Cstr(docCurr.et_LocaleName(0)) & | because |
				
				Select Case intReason
					
				Case INT_NOT_IN_REQUIRED_ROLE:
					strMsg = strMsg & |you are not in any of the roles that are allowed to delete e-mail templates.|
					
				Case INT_STILL_IN_USE:
					strMsg = strMsg & |it is still used by at least one event.|
					
				Case Else
					strMsg = strMsg & |of an unknown reason.|
					
				End Select
				
				Call ShowErrorMsg(strMsg)
				
				intCountNotDeleted = intCountNotDeleted + 1
				
			Else
				
				Call docCurr.Remove(True)
				
				intCountDeleted = intCountDeleted + 1
				
			End If
			
		Next
		
		Call uiviewCurr.DeselectAll 
		Call ws.ViewRefresh
		
		strMsg = Cstr(intCount) & | e-mail template|
		If (intCount <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & | processed.  | & Cstr(intCountDeleted) & | e-mail template|
		If (intCountDeleted <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & | successfully deleted.  | 
		If (intCountNotDeleted > 0) Then
			strMsg = strMsg & Cstr(intCountNotDeleted) & | e-mail template|
			If (intCountNotDeleted <> 1)	 Then
				strMsg = strMsg & |s|
			End If
			strMsg = strMsg & | not deleted.| 
		End If		
		
		Print |Finished.  | & strMsg
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No e-mail templates were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docGetInviteeDocument:1:8
Function docGetInviteeDocument(strKey As String)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a key consisting of the event ID and an e-mail address, check whether
	'an invitee document exists in the Invitee Tool database for the specified key.
	'If one does, return a handle to it, otherwise return Nothing.
	'
	'Parameters
	'----------------
	'strKey					The key to check.
	'
	'Return Value
	'-------------------
	'If an invitee document exists for the key, it is returned.
	'Otherwise Nothing is returned.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetInviteeDocument|
	
	Const STR_LOOKUP_VIEW_ALIAS = |luallbyrefidemail|
	
	Dim view As NotesView
	Dim docInvitee As NotesDocument
	
	'Trap errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether invitee document exists for key [| & strKey & |]|) 
	
	'Find the Invitee Tool database
	Set g_dbInviteeTool = dbGetInviteeToolDb()	
	
	'Find the lookup view
	Set view = g_dbInviteeTool.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strKey & |].|) 
	
	Set docInvitee = view.GetDocumentByKey(strKey, True)
	
	If (Not docInvitee Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set docGetInviteeDocument = docInvitee
	
	Exit Function
	
lblError:
	
	Set docInvitee = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:docGetEventProfileByEventID:1:8
Function docGetEventProfileByEventID(strEventID As String) As NotesDocument
	 '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID, check whether an event profile exists in this database
	'for the specified event ID.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'strEventID					The event ID to check.
	'
     'Return Values
     '-------------------
     'If an event profile exists for the event ID the event profile is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetEventProfileByEventID|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEventsByKey|
	
	Dim view As NotesView
	Dim docEventProfile As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether event profile exists for event ID [| & strEventID & |]|) 
	
	'Find the lookup view
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS) 
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strEventID & |].|) 
	
	Set docEventProfile = view.GetDocumentByKey(strEventID, True)
	
	If (Not docEventProfile Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished. |) 
	
	Set docGetEventProfileByEventID = docEventProfile
	
	Exit Function
	
lblError:
	
	Set docEventProfile = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:GetTacticList:1:8
Sub GetTacticList(docESEventBrief As NotesDocument, docEventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'The new version of Event Solution stores tactics in separate documents.
	'
	'This routine obtains and formats a list of tactics from the supplied Event Solution Brief and any
	'associated tactic documents.
	'
	'The list of tactics is formatted as follows:
	'
	'	<Tactic Code> - <Country Code> - <TacticName>
	'
    'Parameters
    '-----------------------
    'docESEventBrief		The Event Solution brief
	'docEventProfie			The GRP event profile to update.
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetTacticList|
	
	Dim strEventID As String
	Dim strTactic As String
	Dim item As NotesItem
	Dim varTacticList As Variant
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
    'Trap errors
	On Error Goto lblError
	
	'TV 5/21/09
	'			Because of a change in EST the lookup view (lookupsTacticGRP) can no longer supply the country code and tactic
	'			name for global calendar.  It can only supply the tactic code.  The tactic list can now be obtained from the 
	'			tactics_credited_multi field in the ES event brief.
	'			So the way that the GRP event
	'			profile allows the user to select the tactic code and store this information has to change.
	'			To allow backward compatibility with existing event profiles any new or updated GRP event profiles will have a new field
	'			ep_UpdatedTacticList that stores ONLY the tactic code.
	'			If the new field is present, the GRP event profile can determine what format to expect.
	'			i.e. If ep_UpdatedTacticList is present it will contain a list of tactic codes
	'				108AU56M
	'				108AU23T
	'				108AU28T
	'			and these should be shown to the user to select from.
	'			If ep_UpdatedTacticList is not present, the original format stored in ep_TacticList should be used.
	'				108AU56M - NA - Some event name
	'				108AU23T - NA - Some event name - Hot followup
	'				108AU28T - NA - Some event name - Warm followup
	'		
	
	If (docESEventBrief.HasItem(|tactics_credited_multi|)) Then
		
		varTacticList = docESEventBrief.tactics_credited_multi
		
		'Update the GRP event profile with the new format tactic list
		Set item = docEventProfile.ReplaceItemValue(|ep_UpdatedTacticList|, varTacticList)
		
		'Remove duplicates
		varTacticList = Evaluate(|@Trim(@Unique(ep_UpdatedTacticList));|, docEventProfile)
		
		Forall varCurrTactic In varTacticList
			strTactic = Cstr(varCurrTactic)
			Call Debug(STR_MODULE_NAME & |: Storing tactic [| & strTactic & |].|)						
		End Forall
		
		Set item = docEventProfile.ReplaceItemValue(|ep_UpdatedTacticList|, varTacticList)
		
	Else
		
		'Get the event ID from the ES brief
		strEventID = docESEventBrief.referenceid(0)
		
		Error ERR_SYSTEM_ERROR, |No tactics are associated with event ID [| & strEventID & |].|	
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:GetAllFields:1:8
Sub GetAllFields(docEventProfile As NotesDocument, docCurr As NotesDocument, arrExportFields() As ExportField)
	
	Const STR_MODULE_NAME = |GetAllFields|
	
	Dim strDefaultLocale As String
	Dim docRegistrationProfile As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	'Get the registration profile for the default locale for the event
	strDefaultLocale = Cstr(docEventProfile.ep_DefaultLocale(0))
	
	Call Debug(STR_MODULE_NAME & |: Default locale for event is [| & strDefaultLocale & |].|)
	
	Set docRegistrationProfile = docGetRegProfileByBriefIDAndLocale(docEventProfile, strDefaultLocale)
	
	'Initialize the array used to store information about the fields to be exported 
	Redim arrExportFields(0)
	
	Call GetAttendeeFields(docCurr, arrExportFields())
	
	Call GetCompanyFields(docCurr, arrExportFields())
	
	'If the event profile indicates that there are any MI questions, process them
	If (docEventProfile.MIQuestionSet(0) <> "") Then
		Call GetMIQuestionFields(docCurr, arrExportFields())
	End If
	
	'If the registration profile indicates that the emergency contact section is included, process the section
	If (docRegistrationProfile.rp_IncludeEmergencyContactInfo(0) = "Yes") Then	
		Call GetEmergencyFields(docCurr, arrExportFields())
	End If
	
	'If the registration profile indicates that the badge information section is included, process the section
	If (docRegistrationProfile.rp_IncludeBadgeSection(0) = "Yes") Then
		Call GetBadgeFields(docCurr, arrExportFields())
	End If
	
	'If the registration profile indicates that there are any optional questions, process them
	If (Cint(docRegistrationProfile.rp_OptionalQuestions_Number(0)) > 0) Then
		Call GetOptionalQuestionFields(docCurr, arrExportFields())
	End If
	
	Call GetOptInOptOutFields(docCurr, arrExportFields())
	
	Call GetEventFields(docCurr, arrExportFields())
	
	' Session data
	Call GetExportField(docCurr, |si|, |sessions1|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions2|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions3|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions4|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions5|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions6|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions7|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions8|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions9|, arrExportFields())
	Call GetExportField(docCurr, |si|, |sessions10|, arrExportFields())
	
	' get "other" fields/columns that will be in the spreadsheet regardless of what the user selects
	Call GetExportField(docCurr, |other|, |en_siebelkey|, arrExportFields())
	
	'Remove the final element of the array as it will always be blank
	If (Ubound(arrExportFields) > 0) Then
		Redim Preserve arrExportFields(Ubound(arrExportFields) - 1)
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CopyEmailTemplate:1:8
Sub CopyEmailTemplate()
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Copy an existing e-mail template.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyEmailTemplate|
	
	Dim ws As New NotesUIWorkspace	
	Dim docEmailTemplate As NotesDocument
	Dim docNew As NotesDocument
	Dim dc As NotesDocumentCollection
	Dim item As NotesItem
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	Set dc = g_dbCurr.UnprocessedDocuments
	
	If (dc.count = 0) Then
		
		Call ShowInfoMsg(|Please select an e-mail template to copy.|)
		
	Else
		
		Set docEmailTemplate = dc.GetFirstDocument
		
		Set docNew = g_dbCurr.CreateDocument
		
		docNew.Form = "fEmailTemplate"
		
		docNew.et_Locale = docEmailTemplate.et_Locale(0)		
		docNew.et_Category = docEmailTemplate.et_Category(0)
		docNew.et_Type = docEmailTemplate.et_Type(0)
		docNew.et_Usage = docEmailTemplate.et_Usage(0)
		docNew.et_Name = docEmailTemplate.et_Name(0)			
		docNew.et_Desc = docEmailTemplate.et_Desc(0)	
		docNew.et_CopyTo = docEmailTemplate.et_CopyTo(0)
		docNew.et_BlindCopyTo = docEmailTemplate.et_BlindCopyTo(0)
		docNew.et_Subject = docEmailTemplate.et_Subject(0)
		docNew.et_Text = docEmailTemplate.et_Text(0)
		
		'Copy is default  field
		docNew.et_IsDefault = docEmailTemplate.et_IsDefault(0)
		
		'Copy admin fields
		docNew.et_IsAdmin = docEmailTemplate.et_IsAdmin(0)
		docNew.et_AdminTask = docEmailTemplate.et_AdminTask(0)
		docNew.et_From = docEmailTemplate.et_From(0)
		
		'Copy security settings
		docNew.et_SecurityType = docEmailTemplate.et_SecurityType(0)
		docNew.et_Editors = docEmailTemplate.et_Editors(0)		
		
		Call ws.EditDocument(True, docNew)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableThreeColumns_Radio:6:8
%REM
	Sub CreateTableThreeColumns_New
	Description: Version 2.0.
%END REM
Sub CreateTableThreeColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 3) labels
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>| & Chr(13)
		str_HTML = str_HTML & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |<div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:DeleteInvitation:1:8
Sub DeleteInvitation()
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Mark all of the invitations that are selected in the current view for deletion.
	'
     'Parameters
     '-----------------------
     'None.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |DeleteInvitation|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCurrDoc As Integer
	Dim intCountSelected As Integer
	Dim intCount As Integer
	Dim intCountDeleted As Integer
	Dim intCountNotDeleted As Integer
	Dim flgOKToDelete As Integer
	Dim intReason As Integer
	Dim strMsg As String
	Dim intReply As Integer
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	intCount = 0
	
	'Find out how many documents are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the invitation(s) to delete.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			intCountSelected = Cint(coll.Count)			
			
			intReply = intAskQuestion(|Do you want to delete the selected invitation?|)
			
			If (intReply <> IDYES) Then
				Goto lblExit
			End If	
		End If
		
	Case 1:
		intReply = intAskQuestion(|Do you want to delete the selected invitation?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If
		
	Case Else
		intReply = intAskQuestion(|Do you want to delete the | & Cstr(intCountSelected) & | selected invitations?|)
		
		If (intReply <> IDYES) Then
			Goto lblExit
		End If		
		
	End Select
	
	If (Not coll Is Nothing) Then
		
		Print |Started.|
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(coll.Count) & | invitation(s)...|)
		
		For intCurrDoc = 1 To intCountSelected
			
			Set docCurr = coll.GetNthDocument(intCurrDoc)		
			
			intCount = intCount + 1
			
			flgOKToDelete = flgIsDeleteAllowed(docCurr, intReason)
			
			If (Not flgOKToDelete) Then
				
				strMsg = |You cannot delete the invitation for '| & Cstr(docCurr.en_first(0)) & | | & Cstr(docCurr.en_last(0)) & |' because |
				
				Select Case intReason
					
				Case INT_NOT_IN_REQUIRED_ROLE:
					strMsg = strMsg & |you are not in any of the roles that are allowed to delete invitations.|
					
				Case Else
					strMsg = strMsg & |of an unknown reason.|
					
				End Select
				
				Call ShowErrorMsg(strMsg)
				
				intCountNotDeleted = intCountNotDeleted + 1
				
				Exit For
				
			Else
				
				docCurr.ToBeDeleted = |Yes|
				
				Call docCurr.Save(True, False)
				
				intCountDeleted = intCountDeleted + 1
				
			End If
			
		Next
		
		Call uiviewCurr.DeselectAll 
		Call ws.ViewRefresh
		
		strMsg = Cstr(intCount) & | invitation|
		If (intCount <> 1)	 Then
			strMsg = strMsg & |s were|
		Else
			strMsg = strMsg & | was|	
		End If
		strMsg = strMsg & | processed.  | & Cstr(intCountDeleted) & | invitation|
		If (intCountDeleted <> 1)	 Then
			strMsg = strMsg & |s were|
		Else
			strMsg = strMsg & | was|	
		End If
		strMsg = strMsg & | successfully deleted.  | 
		If (intCountNotDeleted > 0) Then
			strMsg = strMsg & Cstr(intCountNotDeleted) & | invitation|
			If (intCountNotDeleted <> 1)	 Then
				strMsg = strMsg & |s were|
			Else
				strMsg = strMsg & | was|	
			End If
			strMsg = strMsg & | not deleted.| 
		End If		
		
		Print |Finished.  | & strMsg
		
		Call ShowInfoMsg(strMsg)
	Else
		
		Call Debug(STR_MODULE_NAME & |: No invitations were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ReactivateEvent:1:8
Sub ReactivateEvent()
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'Check that the currently selected document is an event profile and that its
	'status is either 'Inactive' or 'Cancelled'.  Prompt  to continue and re-activate the event.
	'If you choose to re-activate the event, the event profile status is changed to 'Active' 
	'and the web site status is changed to 'Open'.  The status of the 	'event documents
	'(Registration profile, agenda etc) is updated to 'Active' and the
	'ep_Status field of any registrations is also updated to 'Active'.
	'
	'NOTE:	This routine is designed to be called from the 'Reactivate Event' action.
	'
    'Parameters
    '-----------------------
    'None.
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |ReactivateEvent|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim intCountSelected As Integer
	Dim strMsg As String
	Dim intReply As Integer
	Dim docEventProfile As NotesDocument
	Dim flgOK As Boolean
	Dim dtNow As New NotesDateTime("")
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
    'Trap errors
	On Error Goto lblError
	
	'Set the date/time used to timestamp the update
	dtNow.SetNow
	
	'Find out how many event profiles are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the Event information document for the event you want to reactivate.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			Set docEventProfile = coll.GetFirstDocument
			If (docEventProfile.DocType(0) <> |Event Profile|) Then
				Call ShowInfoMsg(|Please select the Event information document for the event you want to reactivate.|)
				Goto lblExit
			Else
				intReply = intAskQuestion(|Do you want to reactivate the selected event and reopen its website?|)
				If (intReply <> IDYES) Then
					Goto lblExit
				End If	
			End If
		End If
		
	Case 1:
		Set docEventProfile = coll.GetFirstDocument
		If (docEventProfile.DocType(0) <> |Event Profile|) Then
			Call ShowInfoMsg(|Please select the Event information document for the event you want to reactivate.|)
			Goto lblExit
		Else
			intReply = intAskQuestion(|Do you want to reactivate the selected event and reopen its website?|)
			If (intReply <> IDYES) Then
				Goto lblExit
			End If
		End If
		
	Case Else
		Call ShowInfoMsg(|Please select the Event information document for the event you want to reactivate.  Select one document only.|)		
		Goto lblExit	
		
	End Select
	
	'Check the current status of the event
	If (docEventProfile.Status(0) = |Cancelled| Or docEventProfile.Status(0) = |Inactive|) Then
		'Change the status of the event
		docEventProfile.Status = |Active|
		
		'Re-open the web site
		docEventProfile.kw_RegistrationStatus = |Open|
		
		'Add a timestamp to indicate when the update occurred
		Set docEventProfile.ep_DateReactivated = dtNow	
		docEventProfile.ep_ReactivatedBy = g_strUserName
		Call UpdateAudit(docEventProfile, g_strCommonUserName, |Reactivated.|)
		
		Call docEventProfile.Save(True, False)
		
		'Update the event in the home database
		'Call UpdateHomeDb(docEventProfile, INT_ADD)
		
		'Change the status of the event related documents
		flgOK = flgUpdateEventDocuments(docEventProfile, True)
		
		'If unable to update event related documents, flag an error and process the next event
		If (Not flgOK) Then
			Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update event related documents for event with ID [| & docEventProfile.ep_id(0) & |].|	
		End If
		
		'Change the status of the registrations
		flgOK = flgUpdateRegistrationDocuments(docEventProfile, True)
		
		'If unable to update regs, flag an error 
		If (Not flgOK) Then
			Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update registrations for event with ID [| & docEventProfile.ep_id(0) & |].|	
		End If
		
		Call ShowInfoMsg(|The event has been reactivated and its website has been reopened.|)
		
		Print |The event has been reactivated and its website has been reopened.|
		
		Call uiviewCurr.DeselectAll 
		Call ws.ViewRefresh		
	Else
		'Show a message because the event is in a status that cannot be re-activated
		Call ShowInfoMsg(|This event cannot be reactivated because its current status is '| & docEventProfile.Status(0) & |'.|)
		Goto lblExit
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ChangeResponseStatus:1:8
Sub ChangeResponseStatus(strNewStatus As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Change the response status all of the invitations that are selected in
	'the current view.
	'
     'Parameters
     '-----------------------
     'strNewStatus		The response status.  One of:
	'								Accepted
	'								Declined
	'								No response
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |ChangeResponseStatus|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCurrDoc As Integer
	Dim intCountSelected As Integer
	Dim intCountUpdated As Integer
	Dim intCountNotUpdated As Integer
	Dim strMsg As String
	Dim intReply As Integer
	Dim dtNow As New NotesDateTime("")
	Dim strCurrStatus As String
	Dim intCountAccepted As Integer
	Dim intCountDeclined As Integer
	Dim intCountNoResponse As Integer
	Dim intCountRemaining As Integer
	Dim intCountRegistrations As Integer
	Dim flgHasAssociatedRegistration As Boolean
	Dim intCountAssociatedRegistrations As Integer
	Dim strEventID As String
	Dim strCurrEventID As String
	Dim flgInvitationsFromMoreThanOneEvent As Boolean
	Dim strRegistrationsMsg As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Find out how many documents are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the invitation(s) to update.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			intCountSelected = Cint(coll.Count)			
		End If
		
	End Select
	
	'Check the current response status of the selected invitations and show a message to indicate to the user what they are about to do
	If (Not coll Is Nothing) Then
		
		Print |Checking response status of selected invitations...|
		
		Call Debug(STR_MODULE_NAME & |: Checking response status of | & Cstr(coll.Count) & | invitation(s)...|)
		
		For intCurrDoc = 1 To intCountSelected
			
			Set docCurr = coll.GetNthDocument(intCurrDoc)		
			
			strCurrStatus = docCurr.in_RSVPStatus(0)
			
			Select Case strCurrStatus
			Case |Accepted|:
				intCountAccepted = intCountAccepted + 1
			Case |Declined|:
				intCountDeclined = intCountDeclined + 1			
			Case |No response|:
				intCountNoResponse = intCountNoResponse + 1
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown response status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
			End Select
			
			'Count the number of invitations that have an associated registration
			If (Cstr(docCurr.en_UNID(0)) <> ||) Then
				intCountRegistrations = intCountRegistrations + 1
			End If
			
			'Check that all of the selected invitations are for the same event
			strCurrEventID = Cstr(docCurr.ep_id(0))
			
			If (intCurrDoc = 1) Then
				strEventID = strCurrEventID
			End If
			
			If (strCurrEventID <> strEventID) Then
				flgInvitationsFromMoreThanOneEvent = True
			End If
			
		Next
		
		Call Debug(STR_MODULE_NAME & |: | & intCountSelected & | invitation(s) selected. | & intCountAccepted & | 'Accepted'. | & intCountDeclined & | 'Declined'.| & intCountNoResponse & | 'No response'. | & intCountRegistrations & | registration(s) are associated with these invitations.|)
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No invitations were found.|)
		
	End If
	
	If (flgInvitationsFromMoreThanOneEvent) Then
		Call ShowInfoMsg(|The selected invitations are for more than one event.  Please select invitations for one event only.|)
		Goto lblExit			
	End If
	
	'Build a message that explains whether there are any associated registrations and how they are affected
	If (intCountRegistrations > 0) Then
		strRegistrationsMsg = Chr$(13) & Chr$(13) & Cstr(intCountRegistrations) & | registration record|
		If (intCountRegistrations <> 1)	 Then
			strRegistrationsMsg = strRegistrationsMsg & |s are|
		Else
			strRegistrationsMsg = strRegistrationsMsg & | is|
		End If
		strRegistrationsMsg = strRegistrationsMsg & | associated with the selected invitation|
		If (intCountUpdated <> 1)	 Then
			strRegistrationsMsg = strRegistrationsMsg & |s|
		End If
		strRegistrationsMsg = strRegistrationsMsg & |.| & Chr$(13) & Chr$(13) & |Note: Any changes that you make to an invitation are not automatically made to the associated registration record.|
	End If
	
	Select Case strNewStatus
		
	'If the user is changing the status to 'Accepted', check whether any of the selected invitations are already marked as 'Accepted' and inform
	'the user that these invitations will not be updated.				
	Case |Accepted|:
		
		Select Case intCountSelected
			
		Case 1:
			
			Select Case intCountAccepted
			Case 1:
				Call ShowInfoMsg(|The response status of the selected invitation is already 'Accepted'.|)
				Goto lblExit
			Case Else
				strMsg = |Do you want to change the response status of the selected invitation to 'Accepted'?|
			End Select
			
		Case Else
			
			intCountRemaining = intCountDeclined + intCountNoResponse
			
			Select Case intCountAccepted
			Case 0:
				strMsg = |Do you want to change the response status of the | & Cstr(intCountSelected) & | selected invitations to 'Accepted'?|
			'Some of the selected invitations are already in 'Accepted' status	
			Case Else
				strMsg = |The response status of | & Cstr(intCountAccepted) & | of the selected invitations is already 'Accepted' so |
				If (intCountAccepted = 1) Then
					strMsg = strMsg & |it does|
				Else
					strMsg = strMsg & |these invitations do|
				End If
				strMsg = strMsg & | not need to be updated.| & Chr$(13) & Chr$(13)
				If (intCountRemaining = 1) Then	
					strMsg = strMsg & |Do you want to change the response status of the one remaining selected invitation to 'Accepted'?|
				Else
					strMsg = strMsg & |Do you want to change the response status of the remaining | & Cstr(intCountRemaining) & | selected invitations to 'Accepted'?|
				End If
			End Select			
			
		End Select
		
	'If the user is changing the status to 'Declined', check whether any of the selected invitations are already marked as 'Declined' and
	'inform the user that these invitations will not be updated.  
	Case |Declined|:
		
		Select Case intCountSelected
			
		Case 1:
			
			Select Case intCountDeclined
			Case 1:
				Call ShowInfoMsg(|The response status of the selected invitation is already 'Declined'.|)
				Goto lblExit
			Case Else
				strMsg = |Do you want to change the response status of the selected invitation to 'Declined'?|
			End Select
			
		Case Else
			
			intCountRemaining = intCountAccepted + intCountNoResponse
			
			Select Case intCountDeclined
			Case 0:
				strMsg = |Do you want to change the response status of the | & Cstr(intCountSelected) & | selected invitations to 'Declined'?|
			'Some of the selected invitations are already in 'Declined' status	
			Case Else
				strMsg = |The response status of | & Cstr(intCountDeclined) & | of the selected invitations is already 'Declined' so |
				If (intCountDeclined = 1) Then
					strMsg = strMsg & |it does|
				Else
					strMsg = strMsg & |these invitations do|
				End If
				strMsg = strMsg & | not need to be updated.| & Chr$(13) & Chr$(13)
				If (intCountRemaining = 1) Then	
					strMsg = strMsg & |Do you want to change the response status of the one remaining selected invitation to 'Declined'?|
				Else
					strMsg = strMsg & |Do you want to change the response status of the remaining | & Cstr(intCountRemaining) & | selected invitations to 'Declined'?|
				End If
			End Select			
			
		End Select
		
	'If the user is changing the status to 'No response', check whether any of the selected invitations are already marked as 'No response' and
	'inform the user that these invitations will not be updated.  
	Case |No response|:
		
		Select Case intCountSelected
			
		Case 1:
			
			Select Case intCountNoResponse
			Case 1:
				Call ShowInfoMsg(|The response status of the selected invitation is already 'No response'.|)
				Goto lblExit
			Case Else
				strMsg = |Do you want to change the response status of the selected invitation to 'No response'?|
			End Select
			
		Case Else
			
			intCountRemaining = intCountAccepted + intCountDeclined
			
			Select Case intCountNoResponse
			Case 0:
				strMsg = |Do you want to change the response status of the | & Cstr(intCountSelected) & | selected invitations to 'No response'?|
			'Some of the selected invitations are already in 'No response' status	
			Case Else
				strMsg = |The response status of | & Cstr(intCountNoResponse) & | of the selected invitations is already 'No response' so |
				If (intCountNoResponse = 1) Then
					strMsg = strMsg & |it does|
				Else
					strMsg = strMsg & |these invitations do|
				End If
				strMsg = strMsg & | not need to be updated.| & Chr$(13) & Chr$(13)
				If (intCountRemaining = 1) Then	
					strMsg = strMsg & |Do you want to change the response status of the one remaining selected invitation to 'No response'?|
				Else
					strMsg = strMsg & |Do you want to change the response status of the remaining | & Cstr(intCountRemaining) & | selected invitations to 'No response'?|
				End If
			End Select			
		End Select
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown response status [| & strNewStatus & |] was supplied to the function.|	
		
	End Select
	
	intReply = intAskQuestion(strMsg & strRegistrationsMsg)
	If (intReply <> IDYES) Then
		Goto lblExit
	End If	
	
	Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(intCountSelected) & | invitation(s)...|)
	
	Print |Updating | & Cstr(intCountSelected) & | invitation(s)...|
	
	'Set the date/time used to timestamp the invitations
	dtNow.SetNow
	
	For intCurrDoc = 1 To intCountSelected
		
		Print |Processing invitation | & Cstr(intCurrDoc) & | of | & Cstr(intCountSelected) & |...|
		
		Set docCurr = coll.GetNthDocument(intCurrDoc)		
		
		strCurrStatus = docCurr.in_RSVPStatus(0)
		
		'Check whether the invitation has an associated registration
		If (Cstr(docCurr.en_UNID(0)) <> ||) Then
			flgHasAssociatedRegistration = True
		Else
			flgHasAssociatedRegistration = False
		End If
		
		Select Case strNewStatus
			
		Case |Accepted|:
			
			Select Case strCurrStatus
				
			Case |Accepted|:
				
				'No need to do anything, response status is already 'Accepted'
				intCountNotUpdated = intCountNotUpdated + 1
				
			Case |Declined|:
				
				'Change response status to 'Accepted' and add a timestamp
				docCurr.in_RSVPStatus = strNewStatus
				Set docCurr.in_DateResponseReceived = dtNow
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)				
				'Save the new status value
				Call docCurr.Save(True, False)				
				intCountUpdated = intCountUpdated + 1		
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If
				
			Case |No response|:
				
				'Change response status to 'Accepted' and add a timestamp
				docCurr.in_RSVPStatus = strNewStatus
				Set docCurr.in_DateResponseReceived = dtNow
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)						
				'Save the new status value
				Call docCurr.Save(True, False)				
				intCountUpdated = intCountUpdated + 1	
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If				
				
			Case Else
				
				Error ERR_SYSTEM_ERROR, |An unknown response status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
				
			End Select
			
		Case |Declined|:
			
			Select Case strCurrStatus
				
			Case |Accepted|:
				
				'Change response status to 'Declined' and add a timestamp.
				docCurr.in_RSVPStatus = strNewStatus
				Set docCurr.in_DateResponseReceived = dtNow
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)						
				'Save the new status value
				Call docCurr.Save(True, False)
				intCountUpdated = intCountUpdated + 1				
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If
				
			Case |Declined|:
				
				'No need to do anything, response status is already 'Declined'
				intCountNotUpdated = intCountNotUpdated + 1				
				
			Case |No response|:
				
				'Change response status to 'Declined' and add a timestamp.
				docCurr.in_RSVPStatus = strNewStatus
				Set docCurr.in_DateResponseReceived = dtNow
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)						
				'Save the new status value
				Call docCurr.Save(True, False)				
				intCountUpdated = intCountUpdated + 1	
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If
				
			Case Else
				
				Error ERR_SYSTEM_ERROR, |An unknown response status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
				
			End Select
			
		Case |No response|:
			
			Select Case strCurrStatus
				
			Case |Accepted|:
				
				'Change response status to 'No response' and remove the timestamp.
				docCurr.in_RSVPStatus = strNewStatus
				docCurr.in_DateResponseReceived = ||
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)						
				'Save the new status value
				Call docCurr.Save(True, False)
				intCountUpdated = intCountUpdated + 1				
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If
				
			Case |Declined|:
				
				'Change response status to 'No response' and remove the timestamp.
				docCurr.in_RSVPStatus = strNewStatus
				docCurr.in_DateResponseReceived = ||
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Response status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)						
				'Save the new status value
				Call docCurr.Save(True, False)
				intCountUpdated = intCountUpdated + 1					
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If
				
			Case |No response|:
				
				'No need to do anything, response status is already 'No response'
				intCountNotUpdated = intCountNotUpdated + 1	
				
			Case Else
				
				Error ERR_SYSTEM_ERROR, |An unknown response status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
				
			End Select
			
		Case Else
			
			Error ERR_SYSTEM_ERROR, |An unknown invitation status [| & strNewStatus & |] was supplied to the function.|		
			
		End Select
		
	Next
	
	Call uiviewCurr.DeselectAll 
	Call ws.ViewRefresh
	
	strMsg = Cstr(intCountSelected) & | invitation|
	If (intCountSelected <> 1)	 Then
		strMsg = strMsg & |s were|
	Else
		strMsg = strMsg & | was|
	End If
	strMsg = strMsg & | processed. | & Cstr(intCountUpdated) & | invitation|
	If (intCountUpdated <> 1)	 Then
		strMsg = strMsg & |s were|
	Else
		strMsg = strMsg & | was|
	End If
	strMsg = strMsg & | updated.  | 
	If (intCountNotUpdated > 0) Then
		strMsg = strMsg & Cstr(intCountNotUpdated) & | invitation|
		If (intCountNotUpdated <> 1)	 Then
			strMsg = strMsg & |s were|
		Else
			strMsg = strMsg & | was|
		End If
		strMsg = strMsg & | not updated.| 
	End If		
	
	Print |Finished.  | & strMsg
	
	If (intCountAssociatedRegistrations > 0) Then
		strMsg = strMsg & Chr$(13) & Chr$(13) & Cstr(intCountAssociatedRegistrations) & | registration record|
		If (intCountAssociatedRegistrations <> 1)	 Then
			strMsg = strMsg & |s are|
		Else
			strMsg = strMsg & | is|
		End If
		strMsg = strMsg & | associated with the updated invitation|
		If (intCountUpdated <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & |.| & Chr$(13) & Chr$(13) & |Note: Any changes that you make to an invitation are not automatically made to the associated registration record.|
	End If
	
	Call ShowInfoMsg(strMsg)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docCopyAgenda:1:8
Function docCopyAgenda(docEventProfile As NotesDocument, strLocale As String) As NotesDocument
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Allow the user to choose an agenda to copy, then make a copy of
	'that agenda for the supplied locale.
     '
     'Parameters
     '-----------------------
	'docEventProfile				The event profile that the agenda will be associated with.
	'strLocale						The locale of the agenda to create.
     '     
     'Return Values
     '-----------------------
     'The newly created agenda or Nothing if an error occurs.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docCopyAgenda|
	
	Dim ws As New NotesUIWorkspace
	Dim colAgendas As NotesDocumentCollection
	Dim docAgenda As NotesDocument
	Dim docNewAgenda As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	Set colAgendas = ws.PickListCollection(PICKLIST_CUSTOM, False, g_dbCurr.Server, g_dbCurr.FilePath, "vDialogSelectAgenda", "Select an agenda", "Please select an agenda to copy from.")
	
	If (colAgendas.Count > 0) Then
		
		Set docAgenda = colAgendas.GetFirstDocument()
		
		Print |Copying the | & docAgenda.LocaleName(0) & | agenda from the '| & docAgenda.eventname(0) & |' event...|
		
		'Create a new agenda and with values from the event profile
		Set docNewAgenda = docCreateAgenda(docEventProfile, strLocale)
		
		'Copy additional values from the agenda we are copying from
		
		'NOTE : Do NOT copy abstract or location information from the original agenda
		
		docNewAgenda.showgraphic = docAgenda.showgraphic(0)			
		docNewAgenda.includeabs = docAgenda.includeabs(0)	
		docNewAgenda.includeloc = docAgenda.includeloc(0)
		
		docNewAgenda.includeagenda = docAgenda.includeagenda(0)
		docNewAgenda.age_format = docAgenda.age_format(0)
		docNewAgenda.age_sectiontitle = docAgenda.age_sectiontitle(0)
		docNewAgenda.age_info = docAgenda.age_info(0)
		docNewAgenda.age_colone = docAgenda.age_colone(0)
		docNewAgenda.age_coltwo = docAgenda.age_coltwo(0)
		docNewAgenda.age_rows = docAgenda.age_rows(0)
		
		docNewAgenda.includeagendasponsorship = docAgenda.includeagendasponsorship(0)
		docNewAgenda.age_sponsorship_title = docAgenda.age_sponsorship_title(0)
		docNewAgenda.age_sponsorship = docAgenda.age_sponsorship(0)		
		
		Call docNewAgenda.ComputeWithForm(True, True)
		
		Print |Agenda copied.|
		
		Call Debug(STR_MODULE_NAME & |: Agenda copied for event with ID [| & Cstr(docEventProfile.ep_id(0)) & |].|)
		
	End If
	
lblExit:
	
	Set docCopyAgenda = docNewAgenda	
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docNewAgenda = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgIsEventMultiLingual:1:8
Function flgIsEventMultiLingual(docEventProfile)As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, return True if the event is configured for more than
	'one locale.
	'
     'Parameters
     '-----------------------
	'docEventProfile			The event profile.
     '     
     'Return Values
     '-----------------------
     'True if the event is configured for more than one locale.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgIsEventMultiLingual|
	
	Dim flgIsMultiLingual As Boolean
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return code
	flgIsMultiLingual = False
	
	If (Cstr(docEventProfile.ep_IsMultiLingual(0)) ="Yes") Then
		flgIsMultiLingual = True
	Else
		flgIsMultiLingual = False
	End If
	
lblExit:
	
	'Set the return value
	flgIsEventMultiLingual = flgIsMultiLingual
	
	Exit Function
	
lblError:
	
	flgIsMultiLingual = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:PublishEvent:1:8
Sub PublishEvent(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Given an event profile, publish its associated web pages to the web.
    '
	'The updated logic for CTEBA is:
	'
	'If CTEBA is not enabled for Japan AST, no change to process, Publish.
	'
	'Call flgGetCTEBAFields() to get the latest CTEBA information from the event brief.
	'
	'If the cteba_status field is not in the event profile, or it is in the event profile but is blank, no change to process, Publish.
	'
	'If the cteba_status field is one of:
	'
	'Compliant - no amenities
	'Compliant - under clip
	'Approved
	'Approved with conditions
	'Not applicable
	'
	'no change to process, Publish.
	'
	'For any other cteba_status value a message is shown:
	'
	'The CTEBA status in the event brief for this event is '<cteba_status>'.
	'
	'Your event cannot be Published until the CTEBA status is one of the following:
	'
	'Compliant - no amenities
	'Compliant - under clip
	'Approved
	'Approved with conditions
	'Not applicable
	'
	'Please complete the CTEBA approval process in the event solution brief.
    
	'
    'Parameters
    '-----------------------
	'docEventProfile			The event profile backend document
	'uidocEventProfile			The event profile document open in the UI
	'	
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PublishEvent|
	
	Dim ws As New NotesUIWorkspace
	Dim strEventID As String
	Dim flgOK As Boolean
	Dim intCountLocales As Integer
	Dim intCurrLocale As Integer
	Dim intCountRows As Integer
	Dim intCountColumns As Integer
	Dim strFieldName As String
	Dim strLocaleFieldName As String
	Dim strURLFieldName As String
	Dim strCurrLocaleName As String
	Dim strCurrURL As String
	Dim strInfoMsg As String
	Dim strRecipients As String
	Dim intCountRecipients As Integer
	Dim item As NotesItem
	Dim docEmail As NotesDocument
	Dim rtitem As NotesRichTextItem
	Dim nameCurr As NotesName
	Dim varSendToAddresses As Variant
	Dim varCopyToAddresses As Variant
	Dim dtNow As New NotesDateTime("")
	Dim docESEventBrief As NotesDocument
	Dim strMsg As String
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Set the date/time used to timestamp the event profile
	dtNow.SetNow
	
	'Get the event ID from the event profile
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	%REM
	'Get the CTEBA information if necessary
	If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes|) Then

		Call Debug(STR_MODULE_NAME & |: CTEBA is enabled.|)
		
		'First find the event brief, so that we can get the latest CTEBA information		
		Set docESEventBrief = docGetESEventBrief(strEventID)
		
		If (docESEventBrief Is Nothing) Then
			Call ShowErrorMsg(|Your event cannot be submitted for QA because the event brief for this event could not be found in the Event Solution database.|)
			Error ERR_SYSTEM_ERROR, |Unable to find event brief in Event Solution for event ID [| & strEventID & |].|
		End If
		
		'Call flgGetCTEBAFields() to get the latest CTEBA information from the event brief.
		flgOK = flgGetCTEBAFields(docEventProfile, docESEventBrief)
		
		If (Not flgOK) Then
			Call ShowErrorMsg(|Your event cannot be Published because the event brief in the Event Solution database does not contain all of the required CTEBA information.| & Chr$(13) & Chr$(13) & |Please check the event solution brief.|)
			Error ERR_SYSTEM_ERROR, |Unable to find all of the required CTEBA information in the event brief in Event Solution for event ID [| & strEventID & |].|			
		End If
		
		'Save the document
		Call docEventProfile.Save(True, False)
		
		'If the cteba_status field is not in the event profile, or it is in the event profile but is blank, no change to process, send to QA.		
		If (Not docEventProfile.HasItem(|cteba_status|)) Then
			'Continue
		Else
			Dim strCTEBAStatus As String
			strCTEBAStatus = docEventProfile.cteba_status(0)
			Call Debug(STR_MODULE_NAME & |: CTEBA status [| & strCTEBAStatus & |].|)			
			If (strCTEBAStatus = ||) Then
				'Continue
			Else
				'Check the CTEBA status to make sure that the event can be sent to QA
				Select Case strCTEBAStatus
				Case |Compliant - no amenities|:
					'Continue
				Case |Compliant - under clip|:
					'Continue					
				Case |Approved|:
					'Continue						
				Case |Compliant - no GOE/no CPICC|:
					'Continue									
				Case Else
					strMsg = ||
					strMsg = strMsg & |The CTEBA status in the event brief for this event is '| & strCTEBAStatus & |'.| & Chr$(13) & Chr$(13) 
					strMsg = strMsg & |Your event cannot be Published until the CTEBA status is one of the following:| & Chr$(13) & Chr$(13)
					strMsg = strMsg & |Compliant - no amenities| & Chr$(13)
					strMsg = strMsg & |Compliant - under clip| & Chr$(13)
					strMsg = strMsg & |Compliant - no GOE/no CPICC| & Chr$(13)
					strMsg = strMsg & |Approved| & Chr$(13)
					strMsg = strMsg & |Approved with conditions| & Chr$(13)
					strMsg = strMsg & |Not applicable| & Chr$(13) & Chr$(13)					
					strMsg = strMsg & |Please complete the CTEBA approval process in the event solution brief.|					
					Call ShowInfoMsg(strMsg)
					GoTo lblExit
			End Select
			End If
		End If
		
	End If
	%END REM
	
	'First we update this event configuration status and save it 
	Call docEventProfile.ReplaceItemValue("status", "Active")
	Call docEventProfile.ReplaceItemValue("published","Y")
	Set docEventProfile.ep_DatePublished = dtNow
	Call docEventProfile.ReplaceItemValue("ep_PublishedBy", g_strUserName)
	Call UpdateAudit(docEventProfile, g_strCommonUserName, |Published.|)
	If (docEventProfile.kw_RegistrationStatus(0) = "Open") Then
		Set docEventProfile.ep_DateWebsiteOpened = dtNow
		docEventProfile.ep_WebsiteOpenedBy = g_strUserName		
		Call UpdateAudit(docEventProfile, g_strCommonUserName, |Website opened.|)
	End If
%REM
	'Setup amenity table on CTEBA tab
	Call setupAmenityDetails(docEventProfile)
%END REM
	Call docEventProfile.Save(True, False)
	
	'Update the UI
	Call uidocEventProfile.RefreshHideFormulas
	
	'Send a notification
	Set docEmail = New NotesDocument(g_dbCurr)
	Set rtitem = New NotesRichTextItem(docEmail, "Body")
	
	Select Case docEventProfile.ep_WebSiteType(0)
	Case |N|:
		docEmail.Subject = |Event published: | & docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
	Case |U|:
		docEmail.Subject = |Unlisted event published: | & docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|		
	Case Else
		docEmail.Subject = |Event web site published: | & docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
	End Select
	
	Call rtitem.AppendText("The following event has been approved and is now live: " + docEventProfile.eventname(0) + ": " )
	Call rtitem.AppendDocLink(docEventProfile, g_docDbProfile.dp_SystemName(0))
	
	'Set the Server Hint for the doclink to the current server
	Dim rti As NotesRichTextItem
	Dim rtnav As NotesRichTextNavigator
	Dim rtlink As NotesRichTextDocLink
	
	Set rti = docEmail.GetFirstItem("Body")
	Set rtnav = rti.CreateNavigator
	Set rtlink = rtnav.GetFirstElement(RTELEM_TYPE_DOCLINK)
	If Not rtlink Is Nothing Then
		rtlink.ServerHint = g_dbCurr.Server
	End If
	
	Call rtitem.addNewLine(2)
	
	Select Case docEventProfile.ep_WebSiteType(0)
	Case |N|:
		Call rtitem.AppendText("No web pages have been generated for this event because you specified the 'No web site' option in the event profile.")
		Call rtitem.addNewLine(2)
	Case Else
		If (docEventProfile.ep_WebSiteType(0) = |U|) Then
			Call rtitem.AppendText("NOTE: The production URL for this event will not be listed on any AS generated landing pages because you specified the 'Unlisted' option in the event profile.")
			Call rtitem.addNewLine(2)
		End If
		
		Call rtitem.AppendText("Please use the table below to identify the production URL for distribution.")
		Call rtitem.addNewLine(2)
		
		'Count the number of locales with information
		For intCurrLocale = 1 To 5
			strFieldName = |ep_IsAvailable_L| & Cstr(intCurrLocale)
		'If the locale if available, get information about it
			If (Cint(docEventProfile.GetItemValue(strFieldName)(0)) = 1) Then
				intCountLocales = intCountLocales + 1
			End If
		Next
		
		'Build a table of URLs
		intCountRows = intCountLocales + 1
		intCountColumns = 2
		Call rtitem.AppendTable(intCountRows, intCountColumns)
		
		Set rtnav = rtitem.CreateNavigator
		
		'Add titles to the table
		Call rtnav.FindFirstElement(RTELEM_TYPE_TABLECELL)
		Call rtitem.BeginInsert(rtnav)
		Call rtitem.AppendText(|Language|)
		Call rtitem.EndInsert
		Call rtnav.FindNextElement(RTELEM_TYPE_TABLECELL)
		Call rtitem.BeginInsert(rtnav)
		Call rtitem.AppendText(|URL|)
		Call rtitem.EndInsert	
		
		'Now add the information to the table
		Call rtnav.FindNextElement(RTELEM_TYPE_TABLECELL)	
		For intCurrLocale = 1 To 5
			strFieldName = |ep_IsAvailable_L| & Cstr(intCurrLocale)
		'If the locale if available, add it to the table
			If (Cint(docEventProfile.GetItemValue(strFieldName)(0)) = 1) Then
				strLocaleFieldName = |ep_LocaleName_L| & Cstr(intCurrLocale)		
				strURLFieldName = |ep_DefaultURL_L| & Cstr(intCurrLocale)
				strCurrLocaleName = docEventProfile.GetItemValue(strLocaleFieldName)(0)
				strCurrURL = docEventProfile.GetItemValue(strURLFieldName)(0)		
				Call rtitem.BeginInsert(rtnav)
				Call rtitem.AppendText(strCurrLocaleName)
				Call rtitem.EndInsert
				Call rtnav.FindNextElement(RTELEM_TYPE_TABLECELL)
				Call rtitem.BeginInsert(rtnav)
				Call rtitem.AppendText(strCurrURL)
				Call rtitem.EndInsert
				Call rtnav.FindNextElement(RTELEM_TYPE_TABLECELL)					
			End If
		Next
		
		Call rtitem.addNewLine(2)
		Call rtitem.AppendText("Please make sure that the internal test and QA URLs, (those ending in &mode=preview), are not published.")
		Call rtitem.addNewLine(2)
	End Select
	
	Call rtitem.AppendText("Now that your registration site is live,  please return to Event Solution Tool and indicate YES to posting on the public calendar, if applicable, on the Messages tab of your event brief.")
	Call rtitem.addNewLine(2)
	
	'Standard closing for the e-mail
	Call rtitem.AppendText("Thank you.")
	Call rtitem.addNewLine(2)
	Call rtitem.AppendText("The Attendee Solutions Team")
	
	'Send e-mail
	varSendToAddresses = Evaluate(|@Trim(@Unique(offeringQuestionsName));|, docEventProfile)
	varCopyToAddresses = Evaluate(|@Trim(@Unique(ep_AdditionalNotificationEmails));|, docEventProfile)
	
	If (g_strEmailMode = |Production|) Then
		
		docEmail.CopyTo = varCopyToAddresses
		Call docEmail.Send(False, varSendToAddresses)
		
		'Build list of recipients into abbreviated format for display
		strRecipients = ||				
		Forall varAddress In varSendToAddresses
			Set nameCurr = New NotesName(Cstr(varAddress))
			strRecipients = strRecipients & Cstr(nameCurr.Abbreviated) & Chr$(13)			
			intCountRecipients = intCountRecipients + 1
		End Forall
		Forall varAddress In varCopyToAddresses
			Set nameCurr = New NotesName(Cstr(varAddress))
			strRecipients = strRecipients & Cstr(nameCurr.Abbreviated) & Chr$(13)			
			intCountRecipients = intCountRecipients + 1
		End Forall
		
	Else
		
		Call rtitem.AddNewline(2)		
		Call rtitem.AppendText(|This is a test e-mail.  Please ignore.|)
		Call rtitem.AddNewline(2)
		Call rtitem.AppendText(|In production mode the recipient(s) would have been:|)
		Call rtitem.AddNewline(2)
		Forall varAddress In varSendToAddresses
			Set nameCurr = New NotesName(Cstr(varAddress))
			Call rtitem.AppendText(Cstr(nameCurr.Abbreviated))
		End Forall
		Call rtitem.AddNewline(2)
		'If there are any Copy to addresses, show them too
		If (varCopyToAddresses(0) <> ||) Then
			Call rtitem.AppendText(|and the e-mail would have been copied to:|)
			Call rtitem.AddNewline(2)
			Forall varAddress In varCopyToAddresses
				Set nameCurr = New NotesName(Cstr(varAddress))
				Call rtitem.AppendText(Cstr(nameCurr.Abbreviated))
			End Forall
		End If
		
		docEmail.Subject = |TEST MODE: | & Cstr(docEmail.Subject(0))
		Call docEmail.Send(False, g_docDbProfile.dp_TestModeEmailAddress)
		
		'Build list of names for confirmation message
		Set item = g_docDbProfile.GetFirstItem("dp_TestModeEmailAddress")		
		
		strRecipients = ||		
		Forall varName In item.Values
			strRecipients = strRecipients & Cstr(varName) & Chr$(13)			
			intCountRecipients = intCountRecipients + 1
		End Forall		
		
	End If
	
	'Attempt to update all related event documents
	flgOK = flgUpdateEventDocuments(docEventProfile, True)
	
	If (Not flgOK) Then
		On Error Goto lblErrorContinue
		Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update event related documents for event with ID [| & strEventID & |].|	
	End If
	
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Skipping update of Event Solution Brief during Event Solution migration.|)
	
	'Attempt to update the web address in the corrsponding ES brief
	flgOK = flgUpdateESBriefWebAddress(docEventProfile, True)
	
	If (Not flgOK) Then
		On Error Goto lblErrorContinue
		Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update the Event Solution Brief for event with ID [| & strEventID & |].|	
	End If
	
	On Error Goto lblError
	
	If (intCountRecipients > 1) Then
		strInfoMsg = strInfoMsg & |The event web site has been published and a notification e-mail has been sent to: | & Chr$(13) & Chr$(13) & strRecipients
	Else
		strInfoMsg = strInfoMsg & |The event web site has been published and a notification e-mail has been sent to | & strRecipients & |.|
	End If
	
	Call ShowInfoMsg(strInfoMsg)
	Call Debug(STR_MODULE_NAME & |: Event published.|)
	Call uidocEventProfile.Save		
	Call uidocEventProfile.Close
	
	'Refresh the view that the document was opened from so that the status change is visible in the view
	Call ws.ViewRefresh
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call ShowErrorMsg(Err() & |: | & Error() & | in line | & Erl)		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
lblErrorContinue:
	
	Call ShowErrorMsg(Err() & |: | & Error() & | in line | & Erl)		
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume Next
	
End Sub

'++LotusScript Development Environment:2:2:SendTestEMail:1:8
Sub SendTestEMail(docEventProfile As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a type of email, and a locale, allow the user to edit an e-mail of that type
	'for the locale.
	'
	'NOTE: This function is designed to be called from an open UI document.
	'
     'Parameters
     '-----------------------
	'docEventProfile		The event profile.
	'uidoc					The event profile opened in the UI.
	'intEmailType			The type of email (See (Declarations) for values)
	'strLocale				The locale for the email.
	'strID						The ID used to find the fields in the form that store info for the supplied locale.
     '     
	'To give good performance in the user interface, this function calls a server based agent
	'to send the test e-mail so that the UI stays responsive.
	'
	'To do this it first creates a temporary document containing the following fields:
	'
	'UserName						The abbreviated Notes name of the current user.
	'Locale								The locale of the requested e-mail.	
	'EventID							The event ID of the event.
	'EmailTemplateUNID			The UNID of the e-mail template that the user selected.
	'
	'The temporary document is used to pass information to the agent (SendUserSelectedEmails)
	'which is run on the server.  The (SendUserSelectedEmails) agent actually sends the
	'e-mails from the server and deletes the temporary document.
	'	
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |SendTestEmail|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEmailTemplatesByUNID|
	
	Dim s As New NotesSession	
	Dim ws As New NotesUIWorkspace
	Dim docEmailTemplate As NotesDocument
	Dim strType As String
	Dim strLocaleName As String
	Dim strPrefix As String
	Dim strUNIDFieldName As String
	Dim strKey As String
	Dim strMsg As String
	Dim docParameters As NotesDocument
	Dim agent As NotesAgent      
	Dim strEmailAddress As String
	Dim flgOK As Boolean
	
	'Trap errors
	On Error Goto lblError
	
	'Get the type of email
	strType = strGetEmailType(intEmailType)
	
	If (strType = ||) Then
		Error ERR_SYSTEM_ERROR, |The test e-mail could not be sent.  An unknown e-mail type [| & Cstr(intEmailType) & |] was requested.|	
	End If
	
	'Get the name of the locale for the email
	strLocaleName = strGetLocaleName(strLocale)
	
	If (strLocaleName = ||) Then
		Error ERR_SYSTEM_ERROR, |The test e-mail could not be sent.  An an e-mail for an unknown locale [| & strLocale & |] was requested.|	
	End If
	
	'Use the type and ID to find which field in the Event Profile is used to store the UNID for this email.
	strPrefix = strGetEmailPrefix(intEmailType)
	strUNIDFieldName = strPrefix & |UNID_| & strID	
	
	strKey = docEventProfile.GetItemValue(strUNIDFieldName)(0)
	
	Set docEmailTemplate = docGetEmailTemplateByUNID(strKey)
	
	If (Not docEmailTemplate Is Nothing) Then
		
		strEmailAddress = s.GetEnvironmentString(|GRP_EMAIL|)
		
		'If the environment doesn't have a default, try to get one
		If (strEmailAddress = ||) Then
			strEmailAddress = strGetInternetEmailAddress(g_strUserName)
		End If
		
		'Display the dialog
		Dim docDialog As New NotesDocument(g_dbCurr)
		
		docDialog.EmailAddress = strEmailAddress
		
		flgOK =  ws.DialogBox(|dlgEnterEmail|, True, True, False , , , , |Send test e-mail|, docDialog,True, False)
		
		If (flgOK) Then
			
			'Get the e-mail address
			strEmailAddress = docDialog.EmailAddress(0)
			
			'Store the entered e-mail address
			Call s.SetEnvironmentVar(|GRP_EMAIL|, strEmailAddress)
			
			'Create a parameter document to pass to the agent that sends the e-mails	
			Set docParameters = g_dbCurr.CreateDocument
			
			'Store the current user's name
			docParameters.UserName = g_strUserName
			
			'Store their internet e-mail address
			docParameters.InternetEmailAddress = strEmailAddress
			
			'Store the locale
			docParameters.Locale = strLocale
			
			'Store the event ID of the event profile
			docParameters.EventID = docEventProfile.ep_id
			
			'Store the UNID of the e-mail template 
			docParameters.EmailTemplateUNID = docEmailTemplate.UniversalID
			
			'Make parameter document public access so all users can create.
			Call docParameters.ReplaceItemValue(|$PublicAccess|, "1")
			
			Call docParameters.Save(True, False)
			
			Set agent = g_dbCurr.GetAgent (|SendTestEmail|)         
			
			Call Debug(STR_MODULE_NAME & |: Running agent [| & agent.Name & |] on server to send test e-mail...|)
			
			If (agent.RunOnServer(docParameters.NoteID) = 0) Then
				strMsg = |A test | & Lcase$(strType) & | e-mail in | & strLocaleName & | has been sent to | & strEmailAddress & |.|	
				Call Debug(STR_MODULE_NAME & |: Agent ran successfully.|)		
			Else
				strMsg = |The test | & Lcase$(strType) & | e-mail in | & strLocaleName & | could not be sent.|	
				Error ERR_SYSTEM_ERROR, strMsg & |  The agent responsible for sending the test e-mail did not run successfully.|	
			End If
			
			Print strMsg
			Call ShowInfoMsg(strMsg)
			
		End If
		
	Else
		Call ShowErrorMsg(|The test | & Lcase$(strType) & | e-mail in | & strLocaleName & | could not be sent.  The e-mail template for the e-mail could not be found.|)	
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:PrintTemplateBadge:1:8
Sub PrintTemplateBadge(strBadgeText As String)
	'------------------------------------------------------------------------------------------------------
     'Description 
     '------------------
     'Print a badge by creating a temporary file on the C: drive and displaying
	'it in a browser.
     '
     'Parameters
     '-----------------------
	'doc 					The Notes document containing the badge information.
	'flgIsSpeaker		Set to True to print a speaker badge
	'
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PrintTemplateBadge|
	Call Debug(STR_MODULE_NAME & |: Started | & strBadgeText)
	
	Const STR_FILENAME = |C:\GRP_Badge.htm|
	
	Dim ws As New NotesUIWorkspace
	Dim s As New NotesSession
	Dim stream As NotesStream
	Dim strFilename As String
	
	 'Trap errors
	On Error Goto lblError
	
	strFilename = STR_FILENAME
	
	Set stream = s.CreateStream
	
	If (Not stream.Open(strFilename, "binary")) Then
		Error ERR_SYSTEM_ERROR, |Unable to open badge file | & strFilename & |.|	
	End If
	
	If (stream.Bytes <> 0) Then
		Call stream.Truncate
	End If	
	
	Call stream.WriteText(|<html lang="en">|)
	Call stream.WriteText(|<head>|)
	Call stream.WriteText(|<title>IBM - GRP Badge Printing</title>|)
	Call stream.WriteText(|</head>|)
	Call stream.WriteText(|<body marginheight="1" marginwidth="1" leftmargin="1" topmargin="1">|)
	Call Debug(STR_MODULE_NAME & |: | & strBadgeText)
	Call stream.WriteText(strBadgeText)
	Call stream.WriteText(|</body>|)
	Call stream.WriteText(|</html>|)
	
	Call stream.Close
	
	Call ws.URLOpen(|file://| & STR_FILENAME)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:2:ChangeInvitationStatus:1:8
Sub ChangeInvitationStatus(strNewStatus As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Change the invitation status all of the invitations that are selected in
	'the current view.
	'
     'Parameters
     '-----------------------
     'strNewStatus		The invitation status.  One of:
	'								Ready to invite
	'								Invited
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |ChangeInvitationStatus|
	
	Dim ws As New NotesUIWorkspace
	Dim uiviewCurr As NotesUIView
	Dim coll As NotesDocumentCollection	
	Dim coll2 As NotesDocumentCollection	
	Dim docCurr As NotesDocument
	Dim intCurrDoc As Integer
	Dim intCountSelected As Integer
	Dim intCountUpdated As Integer
	Dim intCountNotUpdated As Integer
	Dim strMsg As String
	Dim intReply As Integer
	Dim dtNow As New NotesDateTime("")
	Dim strCurrStatus As String
	Dim intCountReadyToInvite As Integer
	Dim intCountInvited As Integer
	Dim intCountRegistrations As Integer
	Dim flgHasAssociatedRegistration As Boolean
	Dim intCountAssociatedRegistrations As Integer
	Dim strEventID As String
	Dim strCurrEventID As String
	Dim flgInvitationsFromMoreThanOneEvent As Boolean
	Dim strRegistrationsMsg As String
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Find out how many documents are selected
	Set uiviewCurr = ws.CurrentView
	
	Set coll = uiviewCurr.Documents
	intCountSelected = Cint(coll.Count)
	
	Select Case intCountSelected
		
	Case 0:
		Set coll2  = g_dbCurr.UnprocessedDocuments
		If (coll2.Count <> 1) Then
			Call ShowInfoMsg(|Please select the invitation(s) to update.|)
			Goto lblExit
		Else
			Set coll = g_dbCurr.UnprocessedDocuments
			intCountSelected = Cint(coll.Count)			
		End If
		
	End Select
	
	'Check the current invitation status of the selected invitations and show a message to indicate to the user what they are about to do
	If (Not coll Is Nothing) Then
		
		Print |Checking invitation status of selected invitations...|
		
		Call Debug(STR_MODULE_NAME & |: Checking invitation status of | & Cstr(coll.Count) & | invitation(s)...|)
		
		For intCurrDoc = 1 To intCountSelected
			
			Set docCurr = coll.GetNthDocument(intCurrDoc)		
			
			strCurrStatus = docCurr.in_Status(0)
			
			If strCurrStatus = |Ready to invite| Then
				intCountReadyToInvite = intCountReadyToInvite + 1
			End If
			
			If strCurrStatus = |Invited| Then
				intCountInvited = intCountInvited + 1
			End If
			
			'Count the number of invitations that have an associated registration
			If (Cstr(docCurr.en_UNID(0)) <> ||) Then
				intCountRegistrations = intCountRegistrations + 1
			End If
			
			'Check that all of the selected invitations are for the same event
			strCurrEventID = Cstr(docCurr.ep_id(0))
			
			If (intCurrDoc = 1) Then
				strEventID = strCurrEventID
			End If
			
			If (strCurrEventID <> strEventID) Then
				flgInvitationsFromMoreThanOneEvent = True
			End If
			
		Next
		
		Call Debug(STR_MODULE_NAME & |: | & intCountSelected & | invitation(s) selected. | & intCountReadyToInvite & | 'Ready to invite'. | & intCountInvited & | 'Invited'. | & intCountRegistrations & | registration(s) are associated with these invitations.|)
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No invitations were found.|)
		
	End If
	
	If (flgInvitationsFromMoreThanOneEvent) Then
		Call ShowInfoMsg(|The selected invitations are for more than one event.  Please select invitations for one event only.|)
		Goto lblExit			
	End If
	
	'Build a message that explains whether there are any associated registrations and how they are affected
	If (intCountRegistrations > 0) Then
		strRegistrationsMsg = Chr$(13) & Chr$(13) & Cstr(intCountRegistrations) & | registration record|
		If (intCountRegistrations <> 1)	 Then
			strRegistrationsMsg = strRegistrationsMsg & |s are|
		Else
			strRegistrationsMsg = strRegistrationsMsg & | is|
		End If
		strRegistrationsMsg = strRegistrationsMsg & | associated with the selected invitation|
		If (intCountUpdated <> 1)	 Then
			strRegistrationsMsg = strRegistrationsMsg & |s|
		End If
		strRegistrationsMsg = strRegistrationsMsg & |.| & Chr$(13) & Chr$(13) & |Note: Any changes that you make to an invitation are not automatically made to the associated registration record.|
	End If
	
	Select Case strNewStatus
		
	'If the user is changing the status to 'Invited', check whether any of the selected invitations are already marked as 'Invited' and inform
	'the user that these invitations will not be updated.				
	Case |Invited|:
		
		Select Case intCountSelected
			
		Case 1:
			
			Select Case intCountInvited
			Case 1:
				Call ShowInfoMsg(|The invitation status of the selected invitation is already 'Invited'.|)
				Goto lblExit				
			Case Else
				strMsg = |Do you want to change the invitation status of the selected invitation from to 'Invited'?|
			End Select
			
		Case Else
			
			Select Case intCountInvited
			Case 0:
				strMsg = |Do you want to change the invitation status of the | & Cstr(intCountSelected) & | selected invitations to 'Invited'?|	
			'Some of the selected invitations are already in 'Invited' status	
			Case Else
				strMsg = |The invitation status of | & Cstr(intCountInvited) & | of the selected invitations is already 'Invited' so |
				If (intCountInvited = 1) Then
					strMsg = strMsg & |it does|
				Else
					strMsg = strMsg & |these invitations do|
				End If
				strMsg = strMsg & | not need to be updated.| & Chr$(13) & Chr$(13)
				If (intCountReadyToInvite = 1) Then	
					strMsg = strMsg & |Do you want to change the invitation status of the one remaining selected invitation to 'Invited'?|
				Else
					strMsg = strMsg & |Do you want to change the invitation status of the remaining | & Cstr(intCountReadyToInvite) & | selected invitations to 'Invited'?|
				End If
			End Select			
			
		End Select
		
	'If the user is changing the status to 'Ready to invite', check whether any of the selected invitations are already marked as 'Ready to invite' and
	'inform the user that these invitations will not be updated.  Also, check how many invitations are in 'Invited' status and inform the user that
	'these invitations will be updated.		
	Case |Ready to invite|:
		
		Select Case intCountSelected
			
		Case 1:
			
			Select Case intCountReadyToInvite
			Case 1:
				Call ShowInfoMsg(|The invitation status of the selected invitation is already 'Ready to invite'.|)
				Goto lblExit
			Case Else
				strMsg = |Do you want to change the invitation status of the selected invitation to 'Ready to invite'?|
			End Select
			
		Case Else
			
			Select Case intCountReadyToInvite
			Case 0:
				strMsg = |Do you want to change the invitation status of the | & Cstr(intCountSelected) & | selected invitations to 'Ready to invite'?|	
			'More than one of the selected invitations are already in 'Ready to invite' status	
			Case Else
				strMsg = |The invitation status of | & Cstr(intCountReadyToInvite) & | of the selected invitations is already 'Ready to invite' so |
				If (intCountReadyToInvite = 1) Then
					strMsg = strMsg & |it does|
				Else
					strMsg = strMsg & |these invitations do|
				End If
				strMsg = strMsg & | not need to be updated.| & Chr$(13) & Chr$(13)
				If (intCountInvited = 1) Then	
					strMsg = strMsg & |Do you want to change the invitation status of the one remaining selected invitation to 'Ready to invite'?|
				Else
					strMsg = strMsg & |Do you want to change the invitation status of the remaining | & Cstr(intCountInvited) & | selected invitations to 'Ready to invite'?|
				End If
			End Select			
			
		End Select
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown invitation status [| & strNewStatus & |] was supplied to the function.|	
		
	End Select
	
	intReply = intAskQuestion(strMsg & strRegistrationsMsg)
	If (intReply <> IDYES) Then
		Goto lblExit
	End If	
	
	Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(intCountSelected) & | invitation(s)...|)
	
	Print |Updating | & Cstr(intCountSelected) & | invitation(s)...|
	
	'Set the date/time used to timestamp the invitations
	dtNow.SetNow
	
	For intCurrDoc = 1 To intCountSelected
		
		Print |Processing invitation | & Cstr(intCurrDoc) & | of | & Cstr(intCountSelected) & |...|
		
		Set docCurr = coll.GetNthDocument(intCurrDoc)		
		
		strCurrStatus = docCurr.in_Status(0)
		
		'Check whether the invitation has an associated registration
		If (Cstr(docCurr.en_UNID(0)) <> ||) Then
			flgHasAssociatedRegistration = True
		Else
			flgHasAssociatedRegistration = False
		End If
		
		Select Case strNewStatus
			
		Case |Invited|:
			
			Select Case strCurrStatus
				
			Case |Invited|:
				
				'No need to do anything, invitation status is already 'Invited'
				intCountNotUpdated = intCountNotUpdated + 1
				
			Case |Ready to invite|:
				
				'Change invitation status to 'Invited' and add a timestamp
				docCurr.in_Status = strNewStatus
				Set docCurr.in_DateInvited = dtNow
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Invitation status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)
				'Save the new status value
				Call docCurr.Save(True, False)				
				intCountUpdated = intCountUpdated + 1			
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If				
				
			Case Else
				
				Error ERR_SYSTEM_ERROR, |An unknown invitation status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
				
			End Select
			
		Case |Ready to invite|:
			
			Select Case strCurrStatus
				
			Case |Invited|:
				
				'Change invitation status to 'Ready to invite' and remove the timestamp.
				docCurr.in_Status = strNewStatus
				docCurr.in_DateInvited = ||
				'Update the document history
				Call UpdateAudit(docCurr, g_strCommonUserName, |Invitation status changed from '| & strCurrStatus & |' to '| & strNewStatus & |'.|)				
				'Save the new status value
				Call docCurr.Save(True, False)
				intCountUpdated = intCountUpdated + 1				
				If flgHasAssociatedRegistration Then
					intCountAssociatedRegistrations = intCountAssociatedRegistrations + 1							
				End If	
				
			Case |Ready to invite|:
				
				'No need to do anything, invitation status is already 'Ready to invite'
				intCountNotUpdated = intCountNotUpdated + 1				
				
			Case Else
				
				Error ERR_SYSTEM_ERROR, |An unknown invitation status [| & strCurrStatus & |] was found in invitation with UNID [| & docCurr.UniversalID & |].|		
				
			End Select
			
		Case Else
			
			Error ERR_SYSTEM_ERROR, |An unknown invitation status [| & strNewStatus & |] was supplied to the function.|		
			
		End Select
		
	Next
	
	Call uiviewCurr.DeselectAll 
	Call ws.ViewRefresh
	
	strMsg = Cstr(intCountSelected) & | invitation|
	If (intCountSelected <> 1)	 Then
		strMsg = strMsg & |s were|
	Else
		strMsg = strMsg & | was|
	End If
	strMsg = strMsg & | processed. | & Cstr(intCountUpdated) & | invitation|
	If (intCountUpdated <> 1)	 Then
		strMsg = strMsg & |s were|
	Else
		strMsg = strMsg & | was|
	End If
	strMsg = strMsg & | updated.  | 
	If (intCountNotUpdated > 0) Then
		strMsg = strMsg & Cstr(intCountNotUpdated) & | invitation|
		If (intCountNotUpdated <> 1)	 Then
			strMsg = strMsg & |s were|
		Else
			strMsg = strMsg & | was|
		End If
		strMsg = strMsg & | not updated.| 
	End If		
	
	Print |Finished.  | & strMsg
	
	If (intCountAssociatedRegistrations > 0) Then
		strMsg = strMsg & Chr$(13) & Chr$(13) & Cstr(intCountAssociatedRegistrations) & | registration record|
		If (intCountAssociatedRegistrations <> 1)	 Then
			strMsg = strMsg & |s are|
		Else
			strMsg = strMsg & | is|
		End If
		strMsg = strMsg & | associated with the updated invitation|
		If (intCountUpdated <> 1)	 Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & |.| & Chr$(13) & Chr$(13) & |Note: Any changes that you make to an invitation are not automatically made to the associated registration record.|
	End If
	
	Call ShowInfoMsg(strMsg)
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Print Error()
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:SendToQA:1:8
Sub SendToQA(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
    'Given an event profile, check that it is ready to be sent for QA and if so, send it
	'for QA.
	'
    'Parameters
    '-----------------------
	'docEventProfile				The event profile backend document
	'uidocEventProfile			The event profile document open in the UI
	'	
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |SendToQA|
	
	Const STR_LOOKUP_REGISTRATION_PAGES = |vLookupRegistrationProfilesByID|
	Const STR_LOOKUP_AGENDAS = |vLookupAgendasByID|
	Const STR_LOOKUP_SPEAKERS = |vLookupSpeakersByID|
	Const STR_LOOKUP_SPONSORS = |vLookupSponsorsByID|	
	
	Dim ws As New NotesUIWorkspace
	Dim intCountErrors As Integer
	Dim strErrorMsgs As String
	Dim strMsg As String
	Dim strInfoMsg As String
	Dim view As NotesView
	Dim strEventID As String	
	Dim strKey As String		
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry	
	Dim docCurr As NotesDocument
	Dim flgOK As Boolean
	Dim docEmail As NotesDocument
	Dim rtitem As NotesRichTextItem
	Dim item As NotesItem
	Dim strRecipients As String
	Dim intCountRecipients As Integer
	Dim nameCurr As NotesName
	Dim varCopyToAddresses As Variant
	Dim dtNow As New NotesDateTime("")
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Save the UI document
	Call uidocEventProfile.Save		
	
	'Save the document
	Call docEventProfile.Save(True, False)
	
	'Get the event ID from the event profile
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	'Build a key from the event ID	
	strKey = strEventID
	
	If (Cstr(docEventProfile.ep_DefaultWebPage(0)) <> "Other page") Then
		
		'Check that all registration pages have been previewed
		Set view = g_dbCurr.GetView(STR_LOOKUP_REGISTRATION_PAGES)
		Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_REGISTRATION_PAGES & |] for documents with key [| & strKey & |].|) 
		'Get a collection of all entries
		Set vc = view.GetAllEntriesByKey(strKey, True) 
		If (Not vc Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | registration page(s)...|)
			Set entry = vc.GetFirstEntry()
			While Not(entry Is Nothing)
				'Get the associated document
				Set docCurr = entry.Document
				If (Cstr(docCurr.isRegistrationPreviewed(0)) <> |Yes|) Then
					Call Debug(STR_MODULE_NAME & |: Registration page for | & Cstr(docCurr.LocaleName(0)) & |  has NOT been previewed.|)					
					strErrorMsgs = strErrorMsgs & Chr$(13) &  |- Registration page for | & Cstr(docCurr.LocaleName(0))
					intCountErrors = intCountErrors + 1
				Else
					Call Debug(STR_MODULE_NAME & |: Registration page for | & Cstr(docCurr.LocaleName(0)) & |  has been previewed.|)		
				End If
				'Get the next document
				Set entry = vc.GetNextEntry(entry)
			Wend
		Else
			Call Debug(STR_MODULE_NAME & |: No registration pages were found.|)
		End If
		
		'Check that all agendas have been previewed
		Set view = g_dbCurr.GetView(STR_LOOKUP_AGENDAS)
		Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_AGENDAS & |] for documents with key [| & strKey & |].|) 
		'Get a collection of all entries
		Set vc = view.GetAllEntriesByKey(strKey, True) 
		If (Not vc Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | agenda(s)...|)
			Set entry = vc.GetFirstEntry()
			While Not(entry Is Nothing)
				'Get the associated document
				Set docCurr = entry.Document
				If (Cstr(docCurr.isAgendaPreviewed(0)) <> |Yes|) Then
					Call Debug(STR_MODULE_NAME & |: Agenda for | & Cstr(docCurr.LocaleName(0)) & |  has NOT been previewed.|)					
					strErrorMsgs = strErrorMsgs & Chr$(13) &  |- Agenda for | & Cstr(docCurr.LocaleName(0))
					intCountErrors = intCountErrors + 1
				Else
					Call Debug(STR_MODULE_NAME & |: Agenda for | & Cstr(docCurr.LocaleName(0)) & |  has been previewed.|)		
				End If
				'Get the next document
				Set entry = vc.GetNextEntry(entry)
			Wend
		Else
			Call Debug(STR_MODULE_NAME & |: No agendas were found.|)
		End If
		
		'Check that all speaker pages have been previewed
		Set view = g_dbCurr.GetView(STR_LOOKUP_SPEAKERS)
		Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_SPEAKERS & |] for documents with key [| & strKey & |].|) 
		'Get a collection of all entries
		Set vc = view.GetAllEntriesByKey(strKey, True) 
		If (Not vc Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | speaker page(s)...|)
			Set entry = vc.GetFirstEntry()
			While Not(entry Is Nothing)
				'Get the associated document
				Set docCurr = entry.Document
				If (Cstr(docCurr.isSpeakersPreviewed(0)) <> |Yes|) Then
					Call Debug(STR_MODULE_NAME & |: Speakers page for | & Cstr(docCurr.LocaleName(0)) & |  has NOT been previewed.|)					
					strErrorMsgs = strErrorMsgs & Chr$(13) &  |- Speakers page for | & Cstr(docCurr.LocaleName(0))
					intCountErrors = intCountErrors + 1					
				Else
					Call Debug(STR_MODULE_NAME & |: Speakers page for | & Cstr(docCurr.LocaleName(0)) & |  has been previewed.|)		
				End If
				'Get the next document
				Set entry = vc.GetNextEntry(entry)
			Wend
		Else
			Call Debug(STR_MODULE_NAME & |: No speakers pages were found.|)
		End If
		
		'Check that all sponsors pages have been previewed
		Set view = g_dbCurr.GetView(STR_LOOKUP_SPONSORS)
		Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_SPONSORS & |] for documents with key [| & strKey & |].|) 
		'Get a collection of all entries
		Set vc = view.GetAllEntriesByKey(strKey, True) 
		If (Not vc Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | sponsor page(s)...|)
			Set entry = vc.GetFirstEntry()
			While Not(entry Is Nothing)
				'Get the associated document
				Set docCurr = entry.Document
				If (Cstr(docCurr.isSponsorsPreviewed(0)) <> |Yes|) Then
					Call Debug(STR_MODULE_NAME & |: Sponsors page for | & Cstr(docCurr.LocaleName(0)) & |  has NOT been previewed.|)					
					strErrorMsgs = strErrorMsgs & Chr$(13) &  |- Sponsors page for | & Cstr(docCurr.LocaleName(0))
					intCountErrors = intCountErrors + 1					
				Else
					Call Debug(STR_MODULE_NAME & |: Sponsors page for | & Cstr(docCurr.LocaleName(0)) & |  has been previewed.|)		
				End If
				'Get the next document
				Set entry = vc.GetNextEntry(entry)
			Wend
		Else
			Call Debug(STR_MODULE_NAME & |: No sponsors pages were found.|)
		End If		
		
	End If
	
	'Check if any errors were detected
	If (strErrorMsgs <> "") Then
		strMsg = |The following page|
		If (	intCountErrors <> 1) Then
			strMsg = strMsg & |s|
		End If
		strMsg = strMsg & | must be previewed before a QA review of the web site can be requested:|  & Chr$(13) & strErrorMsgs & Chr$(13) & Chr$(13) & |Please click on the appropriate preview links before sending to QA.|
		Call ShowErrorMsg(strMsg)
		Goto lblExit
	End If
	
	'First we update this event configuration status and save it 
	Call docEventProfile.ReplaceItemValue("status", "QA In Progress")
	
	'Set the date/time used to timestamp the event profile
	dtNow.SetNow
	Set docEventProfile.ep_DateSentToQA = dtNow
	Call docEventProfile.ReplaceItemValue("ep_SentToQABy", g_strUserName)
	Call UpdateAudit(docEventProfile, g_strCommonUserName, |Sent to QA.|)
	Call docEventProfile.Save(True, False)
	
	'Update the UI
	Call uidocEventProfile.RefreshHideFormulas
	
	'Send a notification
	Set docEmail = New NotesDocument(g_dbCurr)
	Set rtitem = New NotesRichTextItem(docEmail, "Body")
	
	Call rtitem.AppendText("The following event is ready for QA review: " + docEventProfile.eventname(0) + ": " )
	Call rtitem.AppendDocLink(docEventProfile, g_docDbProfile.dp_SystemName(0))
	
	'Set the Server Hint for the doclink to the current server
	Dim rti As NotesRichTextItem
	Dim rtnav As NotesRichTextNavigator
	Dim rtlink As NotesRichTextDocLink
	
	Set rti = docEmail.GetFirstItem("Body")
	Set rtnav = rti.CreateNavigator
	Set rtlink = rtnav.GetFirstElement(RTELEM_TYPE_DOCLINK)
	If Not rtlink Is Nothing Then
		rtlink.ServerHint = g_dbCurr.Server
	End If
	
	'Send review e-mail
	varCopyToAddresses = Evaluate(|@Trim(@Unique(offeringQuestionsName : ep_AdditionalNotificationEmails));|, docEventProfile)
	
	If (g_strEmailMode = |Production|) Then
		docEmail.Subject = "AST event sent for QA review: " + docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
		docEmail.CopyTo = varCopyToAddresses
		Call docEmail.Send(False, g_docDbProfile.dp_QAReviewersEmail)
		'Build list of names for confirmation message		
		Call Debug(STR_MODULE_NAME & |: Sending for QA review to:|)				
		strRecipients = ||
		Set item = g_docDbProfile.GetFirstItem("dp_QAReviewersEmail")		
		Forall varName In item.Values
			Set nameCurr = New NotesName(Cstr(varName))
			strRecipients = strRecipients & nameCurr.Abbreviated & Chr$(13)			
			Call Debug(STR_MODULE_NAME & |: | & nameCurr.Abbreviated)			
			intCountRecipients = intCountRecipients + 1
		End Forall
		
		'If there are any Copy to addresses, add them to the debug log
		If (varCopyToAddresses(0) <> ||) Then
			Call Debug(STR_MODULE_NAME & |: Copying to:|)				
			Forall varAddress In varCopyToAddresses
				Set nameCurr = New NotesName(Cstr(varAddress))
				Call Debug(STR_MODULE_NAME & |: | & nameCurr.Abbreviated)		
			End Forall
		End If
		
	Else
		docEmail.Subject = |TEST MODE: AST event sent for QA review: | & docEventProfile.eventname(0) & | (| & g_docDbProfile.dp_SystemName(0) & |)|
		Call rtitem.AddNewline(2)		
		Call rtitem.AppendText(|This is a test e-mail.  Please ignore.|)
		Call rtitem.AddNewline(2)
		Call rtitem.AppendText(|In production mode the recipient(s) would have been:|)
		Call rtitem.AddNewline(2)	
		strRecipients = ||		
		Set item = g_docDbProfile.GetFirstItem("dp_QAReviewersEmail")	
		Forall varName In item.Values
			Set nameCurr = New NotesName(Cstr(varName))
			strRecipients = strRecipients & nameCurr.Abbreviated & Chr$(13)		
			intCountRecipients = intCountRecipients + 1
		End Forall
		Call rtitem.AppendText(strRecipients)
		Call rtitem.AddNewline(1)
		Call rtitem.AppendText(|The e-mail would have been copied to:|)
		Call rtitem.AddNewline(2)	
		
		Forall varAddress In varCopyToAddresses
			Set nameCurr = New NotesName(Cstr(varAddress))
			Call rtitem.AppendText(Cstr(nameCurr.Abbreviated))
		End Forall
		
		Call docEmail.Send(False, g_docDbProfile.dp_TestModeEmailAddress)
		
		'Build list of names for confirmation message
		Set item = g_docDbProfile.GetFirstItem("dp_TestModeEmailAddress")		
		strRecipients = ||		
		Forall varName In item.Values
			strRecipients = strRecipients & Cstr(varName) & Chr$(13)			
			intCountRecipients = intCountRecipients + 1
		End Forall		
		
		strInfoMsg = |TEST MODE:| & Chr$(13) & Chr$(13)
	End If
	
	If (intCountRecipients > 1) Then
		strInfoMsg = strInfoMsg & |The event has been sent for QA review to:| & Chr$(13) & Chr$(13) & strRecipients
	Else
		strInfoMsg = strInfoMsg & |The event has been sent for QA review to | & strRecipients & |.|
	End If
	
	Call ShowInfoMsg(strInfoMsg)
	Print |The event has been sent for QA review.|
	Call Debug(STR_MODULE_NAME & |: Sent for QA review.|)
	
	'Save and close the UI document (this will update any related event documents)
	Call uidocEventProfile.Save		
	Call uidocEventProfile.Close
	
	'Refresh the view that the document was opened from so that the status change is visible in the view
	Call ws.ViewRefresh
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	'Don't log NotesUIDocument: Save cancelled errors
	If Err() <> 4411 Then
		Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	End If
	
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:RefreshFromESBrief:1:8
Sub RefreshFromESBrief(docEventProfile As NotesDocument, uidocEventProfile As NotesUIDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Copy information from the Event Solution brief into the Event Profile that is 
	'currently open in the UI.
	'
	'NOTE: This function is designed to be called from an Event Profile document that
	'is open in the UI.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile backend document
	'uidocEventProfile			The event profile document open in the UI
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |RefreshFromESBrief|
	
	Dim strEventID As String
	
	Dim docESEventBrief As NotesDocument
	
	'Trap errors
	On Error Goto lblError
	
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Set docESEventBrief = docGetESEventBrief(strEventID)
	
	If (docESEventBrief Is Nothing) Then
		Call ShowErrorMsg(|The event data cannot be refreshed.  The event brief for this event could not be found in the Event Briefs database.|)
		Error ERR_SYSTEM_ERROR, |Unable to find event brief in Event Solution for event ID [| & strEventID & |].|
	End If
	
	'Copy all relevant fields from the ES Brief
	Call GetEventSolutionFields(docEventProfile, docESEventBrief) 
	
	'Save the changes
	Call docEventProfile.Save( True, False )
	
	'Update the UI document
	Call uidocEventProfile.Reload
	Call uidocEventProfile.Refresh
	Call uidocEventProfile.Save
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFiveColumnsVer1_2:6:8
%REM
	Sub CreateTableFiveColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableFiveColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 5) labels
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		str_HTML = str_HTML & Chr(13) & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t4s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "4" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t5s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "5" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFourColumnsVer1_1:6:8
%REM
	Sub CreateTableFourColumns
	Description: Version 1.1.
%END REM
Sub CreateTableFourColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 4 (Track 4)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields(1 To fCtr)
			str_Fields(fCtr) = |en_d| & str_d & |t4s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create column 4 (Track 4)
	For s = 1 To (sCtr - 1)
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:UpdateRevisionHistory:1:8
Sub UpdateRevisionHistory(doc As NotesDocument, strMsg As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a document and a message, append the message to the 
	'RevisionHistory field.
	'
     'Parameters
     '-----------------------
	'doc				A document.
	'strMsg			The message to write to the RevisionHistory field.
	'	
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateRevisionHistory|
	
	Dim item As NotesItem
	
	'Trap errors
	On Error Goto lblError
	
	If (doc.HasItem(|ApprovalHistoryLog|)) Then
		Set item = doc.GetFirstItem(|ApprovalHistoryLog|)
		Call item.AppendToTextList(Ucase$(Format$(Now(), "mm/dd/yyyy hh:mm AM/PM")) & |: | & strMsg)	
	Else
		Set item = doc.ReplaceItemValue(|ApprovalHistoryLog|, Ucase$(Format$(Now(), "mm/dd/yyyy hh:mm AM/PM")) & |: | & strMsg)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFourColumnsVer1_0:6:8
%REM
	Sub CreateTableFourColumns
	Description: Version 1.0.
%END REM
Sub CreateTableFourColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call CreateTableOneColumnSpan(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, "1", Cstr(sCtr))
			sCtr = sCtr - 1
		Else
			str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", Cstr(sCtr), "tc")
			str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "4", Cstr(sCtr), "label")
			str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "4", Cstr(sCtr), "ts")
			str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", Cstr(sCtr), "desc")
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			If Cstr(sCtr) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |<p>|
			
			str_Field = |en_d| & str_d & |t4s| & Cstr(sCtr) & |tc|
			If doc_RegTrackProfile.GetItemValue("rp_t" & "4" & "s" & Cstr(sCtr) & "status")(0) = "Closed" Then
				str_HTML = str_HTML & str_label & _
					Chr(13) & |<br />| & _
					str_ts & Chr(13) & |<br /><br />| & _
					str_desc
			Else
				str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
					str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
					Chr(13) & |<br />| & _
					str_ts & Chr(13) & |<br /><br />| & _
					str_desc
			End If
			
			str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			
			str_HTML = str_HTML & |<p>&nbsp;|
			
			str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			
			str_HTML = str_HTML & |<p>&nbsp;|
			
			str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
			
			' Close the section
			str_HTML = str_HTML + |
</div>| & Chr(13)
		End If
		
		sCtr = sCtr + 1
	Next

End Sub

'++LotusScript Development Environment:2:2:CreateTableFiveColumnsVer1_0:6:8
%REM
	Sub CreateTableFiveColumns
	Description: Version 1.0.
%END REM
Sub CreateTableFiveColumnsVer1_0(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t| & str_t & |s| & Cstr(s) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
				str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
		End If
		
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		If Cstr(s) = "1" Then
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		End If
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = |en_d| & str_d & |t| & str_t & |s| & Cstr(s) & |tc|
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
				str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
				Chr(13) & |<br />| & _
				str_ts & Chr(13) & |<br /><br />| & _
				str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFiveColumnsVer1_1:6:8
%REM
	Sub CreateTableFiveColumnsTest
	Description: Version 1.1.
%END REM
Sub CreateTableFiveColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String
	Redim str_Fields4(1 To 1) As String
	Redim str_Fields5(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableThreeColumnsSpanVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumnsVer1_1(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 4 & 5 (Track 4 & 5)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields4(1 To fCtr)
			Redim Preserve str_Fields5(1 To fCtr)
			str_Fields4(fCtr) = |en_d| & str_d & |t4s| & Cstr(s) & |tc|
			str_Fields5(fCtr) = |en_d| & str_d & |t5s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create columns 4-5 (Tracks 4-5)
	For s = 1 To (sCtr - 1)
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
		
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields4(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields5(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFourColumnsVer1_2:6:8
%REM
	Sub CreateTableFourColumnsVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableFourColumnsVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 4) labels
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		str_HTML = str_HTML & Chr(13) & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t4s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "4" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:strGetEmailPrefix:1:8
Function strGetEmailPrefix(intEmailType As Integer) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a type of email return the prefix used to store e-mails of that type in the event profile.
	'
     'Parameters
     '-----------------------
	'intEmailType			The type of email (See (Declarations) for values)
     '     
     'Return Values
     '-----------------------
     'The prefix.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetEmailPrefix|
	
	Dim strPrefix As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	strPrefix = ||
	
	Select Case intEmailType
		
	Case INT_EMAIL_CONFIRMATION:
		
		strPrefix = |ep_ConfirmationEmail|
		
	Case INT_EMAIL_REMINDER:
		
		strPrefix = |ep_ReminderEmail|
		
	Case INT_EMAIL_CANCELLATION:
		
		strPrefix = |ep_CancellationEmail|
		
	Case INT_EMAIL_INVITATION:
		
		strPrefix = |ep_InvitationEmail|
	
	Case INT_EMAIL_POSTEVENT_ALLREG:
		
		strPrefix = |ep_PostEventEmailAR|
	
	Case INT_EMAIL_POSTEVENT_ATTENDED:
		
		strPrefix = |ep_PostEventEmailAT|
	
	Case INT_EMAIL_POSTEVENT_NOSHOW:
		
		strPrefix = |ep_PostEventEmailNS|
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown e-mail type [| & Cstr(intEmailType) & |] was supplied to the function.|			
		
	End Select
	
lblExit:
	
	strGetEmailPrefix = strPrefix
	
	Exit Function 
	
lblError:
	
	strPrefix = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateAdminRequest:1:8
Sub CreateAdminRequest(intType As Integer)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Create a new admin request
     '
     'Parameters
     '-----------------------	
	'intType				The type of request to create
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CreateAdminRequest|
	
	Dim ws As New NotesUIWorkspace
	Dim docAdminRequest As NotesDocument
	
	'Trap errors
	On Error Goto lblError
	
	Set g_dbReference = dbGetReferenceDb()
	
	Set docAdminRequest = g_dbReference.CreateDocument
	
	docAdminRequest.DocType = "Admin Request"
	docAdminRequest.Form = "fAdminRequest"	
	docAdminRequest.ar_CanisterID = g_docDbProfile.dp_CanisterID(0)
	docAdminRequest.ar_CanisterTitle = g_docDbProfile.dp_SystemName(0)
	
	Select Case intType
		
	Case INT_PROBLEM_REPORT:
		
		docAdminRequest.ar_Type = |Problem report|
		
	Case INT_REQUEST_FOR_SETUP_ASSISTANCE:
		
		docAdminRequest.ar_Type = |Request for setup assistance|
		
	Case INT_NEW_REQUIREMENT:
		
		docAdminRequest.ar_Type = |New requirement|
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown request type [| & intType & |] was supplied to the function.|	
		
	End Select
	
	Call ws.EditDocument(True, docAdminRequest)	
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Sub

'++LotusScript Development Environment:2:2:GetOptionalQuestionFields:1:8
Sub GetOptionalQuestionFields(docCurr As NotesDocument, arrExportFields() As ExportField)	
	
	Const STR_MODULE_NAME = |GetOptionalQuestionFields|
	
     'Trap errors
	On Error Goto lblError
	
	Call GetExportField(docCurr, |oq|, |optionq1|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq2|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq3|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq4|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq5|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq6|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq7|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq8|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq9|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq10|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq11|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq12|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq13|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq14|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq15|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq16|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq17|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq18|, arrExportFields())
	Call GetExportField(docCurr, |oq|, |optionq19|, arrExportFields())
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:strGetDefaultURL:1:8
Function strGetDefaultURL(docEventProfile) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, return the default URL for the default language.
	'
     'Parameters
     '-----------------------
	'docEventProfile			The event profile.
     '     
     'Return Values
     '-----------------------
     'The URL if found or the empty string if not found.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetDefaultURL|
	
	Dim strEventID As String
	Dim strDefaultURL As String	
	Dim strDefaultLocale As String
	Dim intCurrLocale As Integer
	Dim strIsAvailableFieldName As String
	Dim strLocaleFieldName As String
	Dim strDefaultURLFieldName As String
	Dim strCurrLocale As String
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	strDefaultURL = ||
	
	'Get the event ID 
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	'Get the default locale for the event
	strDefaultLocale = Cstr(docEventProfile.ep_DefaultLocale(0))
	
	'Check each locale to find the name of the field that contains the default URL for this locale
	For intCurrLocale = 1 To 5
		strIsAvailableFieldName = |ep_IsAvailable_L| & Cstr(intCurrLocale)
		strLocaleFieldName = |ep_Locale_L| & Cstr(intCurrLocale)
		strDefaultURLFieldName = |ep_DefaultURL_L| & Cstr(intCurrLocale)		
		'If the locale is available, get information about it
		If (Cint(docEventProfile.GetItemValue(strIsAvailableFieldName)(0)) = 1) Then
			strCurrLocale = docEventProfile.GetItemValue(strLocaleFieldName)(0)
			If (strDefaultLocale = strCurrLocale) Then
				strDefaultURL = docEventProfile.GetItemValue(strDefaultURLFieldName)(0)
				Exit For
			End If
		End If
	Next
	
	'If unable to find a default URL something is wrong with the event profile so flag an error
	If (strDefaultURL = ||) Then
		Error ERR_SYSTEM_ERROR, |Unable to find default URL for event ID [| & strEventID & |].|		
	End If
	
lblExit:
	
	strGetDefaultURL = strDefaultURL
	
	Call Debug(STR_MODULE_NAME & |: Finished. Default locale is [| & strDefaultLocale & |].  Default URL is [|& strDefaultURL & |].|)
	
	Exit Function
	
lblError:
	
	strDefaultURL = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:PublishEventToAR:1:8
Sub PublishEventToAR(docEventProfile As NotesDocument, intReturnCode As Integer)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile that has been marked as 'Published',
	'create a corresponding event profile in the Attendee Repository database.
     '
     'Parameters
     '-----------------------
     'docEventProfile		The event profile to use when creating the Attendee Repository Event Profile
	'intReturnCode		(Returned) The return code.
	'	One of:
	'	INT_CREATED											A new event profile was created in Attendee Repository
	'	INT_NOT_CREATED									A new event profile could not be created in Attendee Repository	
	'	INT_UPDATED											An existing event profile was updated in Attendee Repository
	'	INT_NOT_UPDATED									An existing event profile could not be updated in Attendee Repository	
	'	INT_AR_LOOKUP_ERROR						An error occurred when attempting to lookup information from Attendee Repository
	'	INT_NO_EVENT_BRIEF								An event brief with the same reference ID as the event profile could not be found in Event Briefs
	'	INT_EVENT_UPDATE_ERROR					An error occurred when attempting to update event related documents
	'	INT_REGISTRATIONS_UPDATE_ERROR	An error occurred when attempting to update related registrations
	'	INT_EXCLUDED										The event was marked as having a missing ES brief so don't process it.
     '    INT_UNKNOWN_REASON							An unexpected error occurred
	'
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |PublishEventToAR|
	
	Dim intReturn As Integer
	Dim strEventID As String
	Dim docAREventProfile As NotesDocument
	Dim docESEventBrief As NotesDocument	
	Dim intRC As Integer
	Dim flgOK As Boolean
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	intReturn = INT_UNKNOWN_REASON
	
	'Check in Attendee Repository whether an event profile exists for the event
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	'Check whether the event is excluded from reporting
	If (docEventProfile.ep_ESBriefRemoved(0) = "Yes") Then
		Call Debug(STR_MODULE_NAME & |: Skipping event ID [| & strEventID & |].  The GRP event profile has been marked to indicate that the original ES brief for the event has been removed from ES.|) 
		intReturn = INT_EXCLUDED
		Goto lblExit
	End If
	
	Set docAREventProfile = docGetAREventProfile(strEventID, intRC)
	
	Select Case intRC
		
	Case INT_FOUND:
		Call Debug(STR_MODULE_NAME & |: An event profile exists in Attendee Repository for event ID [| & strEventID & |].|) 
		
	Case INT_NOT_FOUND:
		Call Debug(STR_MODULE_NAME & |: An event profile does NOT exist in Attendee Repository for event ID [| & strEventID & |].|) 
		
	Case Else
		intReturn = INT_AR_LOOKUP_ERROR
		Error ERR_SYSTEM_ERROR, |Unable to create or update event profile in Attendee Repository.  Unable to check whether an event profile exists in Attendee Repository for event ID [| & strEventID & |].|
		
	End Select
	
	'Check in Event Briefs whether an event brief exists for the event
	Set docESEventBrief = docGetESEventBrief(strEventID)
	
	'If there is no event brief, log an error
	If (docESEventBrief Is Nothing) Then
		intReturn = INT_NO_EVENT_BRIEF
		Error ERR_SYSTEM_ERROR, |Unable to create or update event profile in Attendee Repository.  Unable to find an event brief in Event Briefs for event ID [| & strEventID & |].|
	Else
		'If an event profile does not exist in Attendee Repository but there is a corresponding event brief in Event Briefs
		'create a new event profile in Attendee Repository and update it with information from the event brief and from
		'the event profile in this database.
		If (docAREventProfile Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Creating NEW event profile in Attendee Repository for event ID [| & strEventID & |].|)
			Call CreateAREventProfile(docESEventBrief, docEventProfile, intRC)
			intReturn = intRC
		Else	
			'Otherwise, an event profile exists in Attendee Repository and there is a corresponding event brief in Event Briefs so
			'update the existing event profile in Attendee Repository with information from the event brief and from the event profile
			'in this database.
			Call Debug(STR_MODULE_NAME & |: Updating EXISTING Event Profile in Attendee Repository for event ID [| & strEventID & |].|) 
			
			'First , make sure the event profile and registrations are up to date
			
			'Copy all relevant fields from the ES Brief
			Call GetEventSolutionFields(docEventProfile, docESEventBrief) 
			
			'Save the changes
			Call docEventProfile.Save( True, False )
			
			'Now update any related event documents (but do not update the UI)
			flgOK = flgUpdateEventDocuments(docEventProfile, False)
			
			If (Not flgOK) Then
				intReturn = INT_EVENT_UPDATE_ERROR
				Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update event related documents for event ID [| & strEventID & |].|	
			End If
			
			'And update any associated registrations (but do not update the UI)
			flgOK = flgUpdateRegistrationDocuments(docEventProfile, False) 
			
			If (Not flgOK) Then
				intReturn = INT_REGISTRATIONS_UPDATE_ERROR
				Error ERR_SYSTEM_ERROR, |An error occurred when attempting to update registration documents for event ID [| & strEventID & |].|	
			End If			
			
			Call UpdateAREventProfile(docESEventBrief, docEventProfile, docAREventProfile, intRC)
			intReturn = intRC
		End If
	End If
	
lblExit:
	
	'Set the return code 
	intReturnCode = intReturn
	
	Call Debug(STR_MODULE_NAME & |: Finished.  Return code [| & Cstr(intReturn) & |]|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:strGetLocaleName:1:8
Function strGetLocaleName(strLocale As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a locale, e.g. en_US, return the locale name e.g. English (United States).
	'
     'Parameters
     '-----------------------
	'strLocale 				The locale.
     '     
     'Return Values
     '-----------------------
     'The locale name if found or the empty string if not found.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strGetLocaleName|
	
	Dim item As NotesItem
	Dim intPos As Integer
	Dim strLocaleName As String
	
	'Trap errors
	On Error Goto lblError
	
	Set item = g_docDbProfile.GetFirstItem("dp_LocaleLookup")
	Forall varItem In item.Values
		If Instr(varItem, strLocale ) > 0 Then
			intPos = Instr(varItem, "|")			
			strLocaleName = Left$(varItem, intPos - 1)
			Exit Forall
		End If
	End Forall
	
lblExit:
	
	strGetLocaleName = strLocaleName
	
	Call Debug(STR_MODULE_NAME & |: Finished. Locale [| & strLocale & |] name is [|& strLocaleName & |].|)
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgGetInternetEmailAddrFromBluePages:1:8
Function flgGetInternetEmailAddrFromBluePages(objBluePages As BluePages, strCanonicalUserName As String, strInternetEmailAddress As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a canonical user names, attempt to do a Blue Pages lookup to get the
	'internet e-mail address.
	'
     'Parameters
     '-----------------------
     'objBluePages						Blue pages
	'strCanonicalUserName			The user name
	'strInternetEmailAddress			(Returned) The internet e-mail address
     '     
     'Return Values
     '-----------------------
     'True if the internet e-mail address was found successfully, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgGetInternetEmailAddrFromBluePages|
	
	Dim flgOK As Boolean
	Dim strEmailAddr As String
	Dim emp As BPResults
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code and value
	flgOK = False
	strEmailAddr = ||
	
	Set emp = objBluePages.GetPersonsByNotesID(strCanonicalUserName)
	
	If emp.succeeded() Then
		If emp.rows() = 0 Then
			Error ERR_SYSTEM_ERROR, |Unable to find Blue Pages record for [| & strCanonicalUserName & |].|		
		Else  
			strEmailAddr = emp.GetColumn("internet")(0)
			Call Debug(STR_MODULE_NAME & |: Blue Pages record for [| & strCanonicalUserName & |] has internet e-mail address [| & strEmailAddr & |].|)
		End If
	Else
		Error ERR_SYSTEM_ERROR, |Blue Pages query for [| & strCanonicalUserName & |] failed.|
	End If               
	
	flgOK = True
	
lblExit:
	
	strInternetEmailAddress = strEmailAddr
	flgGetInternetEmailAddrFromBluePages = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False
	strEmailAddr = ||	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CreateTableFiveColumns_Radio:6:8
%REM
	Sub CreateTableFiveColumns_Radio
	Description: Comments for Sub
%END REM
Sub CreateTableFiveColumns_Radio(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String, str_FieldName As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 5) labels
	If str_sCol1 = "1" Then
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		str_HTML = str_HTML & Chr(13) & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	str_FieldName = |en_d| & str_d & |s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "4", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t4s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "4" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "5", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t5s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	str_FieldName = |en_d| & str_d & |s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "5" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFourColumns:6:8
%REM
	Sub CreateTableFourColumns
	Description: Version 2.0.
%END REM
Sub CreateTableFourColumns(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, doc_enrollForm As NotesDocument)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_s As String
	Dim s As Integer, sCtr As Integer
	Dim str_t As String
	Dim str_Field As String, str_FieldName As String
	Redim str_Fields(1 To 1) As String
	Redim str_FieldsName(1 To 1) As String
	Dim fCtr As Integer
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	' Create columns 1-3 (Tracks 1-3)
	sCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		' Check if this session spans ALL tracks; If yes, then only create 1 column
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			Call doc_enrollForm.ReplaceItemValue("en_d"+str_d+"s"+Cstr(s)+"span", "Yes")
			Call CreateTableThreeColumnsSpan_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(s))
			sCtr = sCtr - 1
		Else
			Call CreateTableThreeColumns_Radio(str_HTML, doc_RegTrackProfile, g_doc_regProfile, str_d, Cstr(sCtr), Cstr(s))
		End If
		sCtr = sCtr + 1
	Next
	
	' Set field names for column 4 (Track 4)
	sCtr = 1
	fCtr = 1
	For s = 1 To Cint(doc_RegTrackProfile.rp_numSessionsDay(0))
		If doc_RegTrackProfile.GetItemValue("rp_t1s" + Cstr(s) + "span")(0) = "Yes" Then
			sCtr = sCtr - 1
		Else
			Redim Preserve str_Fields(1 To fCtr)
			Redim Preserve str_FieldsName(1 To fCtr)
			str_Fields(fCtr) = |en_d| & str_d & |t4s| & Cstr(s) & |tc|
			str_FieldsName(fCtr) = |en_d| & str_d & |s| & Cstr(s) & |tc|
			fCtr = fCtr + 1
		End If
		sCtr = sCtr + 1
	Next
	
	' Create column 4 (Track 4)
	For s = 1 To (sCtr - 1)
		str_t = "4"
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		If Cstr(s) = "1" Then
			
			str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			
			str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 1) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + Cstr(Cint(str_t) + 2) + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

			If Cstr(s) = "1" Then
				'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			End If
			
			str_HTML = str_HTML & |</div>|
			
			' Close the 3 column track label body
			str_HTML = str_HTML + |
</div>| & Chr(13)
			
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		
		str_HTML = str_HTML & |<p>|
		
		str_Field = str_Fields(s)
		str_FieldName = str_FieldsName(s)
		If doc_RegTrackProfile.GetItemValue("rp_t" & str_t & "s" & Cstr(s) & "status")(0) = "Closed" Then
			str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		Else
			str_HTML = str_HTML & |<input type="radio" id="| & str_Field & |" name="| & str_FieldName & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" onchange="onchangeField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
		End If
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "tc")
		str_label = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "label")
		str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "ts")
		str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, str_t, Cstr(s), "desc")
		
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		str_t = Cstr(Cint(str_t) + 1)
		
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		
		str_HTML = str_HTML & |<p>&nbsp;|
		
		str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
		
		' Close the body section
		str_HTML = str_HTML + |
</div>| & Chr(13)
		
	Next
	
End Sub

'++LotusScript Development Environment:2:2:SendAdminEmails:1:8
Sub SendAdminEmails(strTask As String)
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given the name of an admin task, send the admin e-mail for the specified task.
     '
     'Parameters
     '-----------------------
     'strTask				The name of the admin task.
     '     
     'Return Values
     '-----------------------
     'None
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |SendAdminEmails|
	
	Dim strFormula As String
	Dim collEventProfiles As NotesDocumentCollection
	Dim docEventProfile As NotesDocument
	Dim docEmailTemplate As NotesDocument
	Dim intCount As Integer
	Dim intCountOK As Integer
	Dim intCountFailed As Integer
	Dim flgOK As Boolean
	Dim dtNow As New NotesDateTime("")
	Dim myMerger As MergeGenerator	
	
	Call Debug(STR_MODULE_NAME & |: Started.|) 
	
     'Trap errors
	On Error Goto lblError
	
	'Set the date/time used to timestamp the event profiles
	dtNow.SetNow
	
	'Build a formula to find the events to process
	Select Case strTask
		
	Case |pre2days|:
		
		strFormula =  {Form = "fEventProfile" & status = "Active" & @Adjust(@Date(@TextToNumber(startyear);@TextToNumber(startmonth);@TextToNumber(startday));0;0;-2;0;0;0) = @today}
		
	Case |post1week|:
		
		strFormula =  {Form = "fEventProfile" & (status = "Active" | status = "Inactive") & ep_AttendanceUpdateStatus = "" & @Adjust(@Date(@TextToNumber(endyear);@TextToNumber(endmonth);@TextToNumber(endday));0;0;7;0;0;0) = @today}
		
	Case |post2weeks|:
		
		strFormula =  {Form = "fEventProfile" & (status = "Active" | status = "Inactive") & ep_AttendanceUpdateStatus = "" & @Adjust(@Date(@TextToNumber(endyear);@TextToNumber(endmonth);@TextToNumber(endday));0;0;14;0;0;0) = @today}
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown admin task [| & strTask & |] was supplied to the function.|			
		
	End Select
	
	Call Debug(STR_MODULE_NAME & |: Processing admin task [| & strTask & |]...|)
	
	Call Debug(STR_MODULE_NAME & |: Searching for event profiles using formula [| & strFormula & |]...|)
	
	'Get a collection of event profiles to process
	Set collEventProfiles = g_dbCurr.Search(strFormula, Nothing, 0)
	
	intCount = 0
	
	If collEventProfiles.Count > 0 Then
		
		Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(collEventProfiles.Count) & | event profile(s)...|)
		
		'Get the admin e-mail template to use
		Set docEmailTemplate = docGetEmailTemplateByAdminTask(strTask)
		
		If (docEmailTemplate Is Nothing) Then
			Error ERR_SYSTEM_ERROR, |Unable to find admin e-mail template for admin task [| & strTask & |].|			
		End If
		
		'Create new object to merge text with
		'Set myMerger = InitMergeGenerator(g_dbCurr, True)
		
		Set docEventProfile = collEventProfiles.GetFirstDocument
		
		While Not(docEventProfile Is Nothing)
			
			'Update the count of documents processed
			intCount = intCount + 1
			
			'If we're sending the post 2 week e-mail, mark the event profile as delinquent
			If strTask = |post2weeks| Then
				Call MarkEventDelinquent(docEventProfile, dtNow)
			End If
			
			flgOK = flgSendAdminEmail(docEventProfile, docEmailTemplate, myMerger)
			
			If (flgOK) Then
				intCountOK = intCountOK + 1
			Else
				intCountFailed = intCountFailed + 1
			End If
			
			Set docEventProfile = collEventProfiles.GetNextDocument(docEventProfile)
			
		Wend
		
	Else
		
		Call Debug(STR_MODULE_NAME & |: No event profiles were found.|)
		
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCount) & | event profile(s) processed.|)
	Call Debug(STR_MODULE_NAME & |: | & Cstr(intCountOK) & | admin e-mails sent.|)
	If (intCountFailed > 0) Then
		Call Debug(STR_MODULE_NAME & |: Unable to send | & Cstr(intCountFailed) & | admin e-mails.|)	
	End If
	Call Debug(STR_MODULE_NAME & |: Finished.|)	
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableFiveColumnsSpanVer1_2:6:8
%REM
	Sub CreateTableFiveColumnsSpanVer1_2
	Description: Comments for Sub
%END REM
Sub CreateTableFiveColumnsSpanVer1_2(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_s, "desc")
	
	If str_s = "1" Then
		' Build the track label headings first, then later build the actual session
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		
		' Track (1 through 5) labels
		If str_s = "1" Then
			'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
			str_HTML = str_HTML & |<div class="ibm-container-body ibm-four-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
			If (str_tLabel = |&nbsp;|) And (str_tLabel <> ||) Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>|
			End If
			str_HTML = str_HTML & |
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
			If (str_tLabel = |&nbsp;|) And (str_tLabel <> ||) Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>|
			End If
			str_HTML = str_HTML & |
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
			If (str_tLabel = |&nbsp;|) And (str_tLabel <> ||) Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>|
			End If
			str_HTML = str_HTML & |
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "4" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fourth">| & Chr(13)
			If (str_tLabel = |&nbsp;|) And (str_tLabel <> ||) Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>|
			End If
			str_HTML = str_HTML & |
</div>|
			Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "5" + "label")
			If Not item Is Nothing Then
				str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
			End If
			str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-fifth">| & Chr(13)
			If (str_tLabel = |&nbsp;|) And (str_tLabel <> ||) Then
				str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>|
			End If
			str_HTML = str_HTML & |
</div>|
			str_HTML = str_HTML & Chr(13) & |</div>|
		End If
		
	End If
	
	' Now build the actual session section, with no headers, since this was created above
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_s & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
		str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
		Chr(13) & |<br />| & _
		str_ts & Chr(13) & |<br /><br />| & _
		str_desc
	End If
	
	' Close the spanned session body
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>| & Chr(13) & |</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:strValidateLocale:1:8
Function strValidateLocale(docEventProfile As NotesDocument, strLocale As String) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile and a locale, e.g. en_US, check that the locale is one of
	'those available in the event profile.  If it is not, return the default locale from
	'the event profile.  If it is, return it unchanged.
	'
     'Parameters
     '-----------------------
	'docEventProfile		The event profile.
	'strLocale 				The locale.
     '     
     'Return Values
     '-----------------------
     'The locale if available, or the default locale for the event if not available.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |strValidateLocale|
	
	Dim strValidatedLocale As String
	Dim item As NotesItem
	Dim flgFound As Boolean
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	strValidatedLocale = strLocale
	
	'Check that the locale is available in the event profile
	Set item = docEventProfile.GetFirstItem("ep_Locales")
	Forall varItem In item.Values
		If Cstr(varItem) = strLocale Then
			flgFound = True
			Exit Forall
		End If
	End Forall
	
	'If the supplied locale is not available in the event profile, get the default locale from the event profile
	If Not flgFound Then
		Call Debug(STR_MODULE_NAME & |: Supplied locale [| & strLocale & |] is not configured for event with ID [| & docEventProfile.ep_id(0) & |].|)		
		strValidatedLocale = docEventProfile.ep_DefaultLocale(0)
		Call Debug(STR_MODULE_NAME & |: Locale changed to the default locale for the event [| & strValidatedLocale & |].|)				
		'If there is no default locale, flag an error
		If (strValidatedLocale = ||) Then
			Error ERR_SYSTEM_ERROR, |Unable to find default locale for event with ID [| & docEventProfile.ep_id(0) & |].|
		End If
	End If
	
lblExit:
	
	strValidateLocale = strValidatedLocale
	
	Exit Function
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgUpdateRegistrationDocuments:1:8
Function flgUpdateRegistrationDocuments(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, find and update all registrations associated with the event.
	'
     'Parameters
     '-----------------------
	'docEventProfile				The event profile for the event.
	'flgUpdateUI				Whether to update the UI or not. 
	'								(Set to False if calling this function from a back-end agent)	
     '     
     'Return Values
     '-----------------------
     'True if all associated registrations were successfully updated.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateRegistrationDocuments|
	
	Const STR_LOOKUP_REGISTRATIONS = |vLookupRegistrationsByEventID_All|
	Const STR_LOOKUP_INVITATIONS = |vLookupInvitationsByEventID|	
	
	Dim flgOK As Integer
	Dim viewRegistrations As NotesView
	Dim viewInvitations As NotesView
	Dim vc As NotesViewEntryCollection
	Dim entry As NotesViewEntry
	Dim docRegistration As NotesDocument
	Dim docInvitation As NotesDocument
	Dim strKey As String	
	Dim intCount As Integer
	Dim intCountInvitations As Integer
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	If flgUpdateUI Then
		Print |Searching for registrations for this event...|	
	End If
	
	'Assume that something will go wrong unless proved otherwise
	flgOK = False
	
	'Find the lookup view
	Set viewRegistrations = g_dbCurr.GetView(STR_LOOKUP_REGISTRATIONS)
	
	'Build a key from the supplied event ID
	strKey = Cstr(docEventProfile.ep_id(0))
	
	'Attempt to find all registrations
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_REGISTRATIONS & |] for documents with key [| & strKey & |].|) 
	
	'Get a collection of all entries
	Set vc = viewRegistrations.GetAllEntriesByKey(strKey, True) 
	
	If (Not vc Is Nothing) Then
		
		If (vc.Count > 0) Then
			
			If flgUpdateUI Then
				Print |Updating registrations for this event...|	
			End If
			
			Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | registration(s)...|)
			
			Set entry = vc.GetFirstEntry()
			
			While Not(entry Is Nothing)
				
				'Get the associated document
				Set docRegistration = entry.Document
				
				'Print |Updating registration | & Cstr(intCount + 1) & | of | & Cstr(vc.Count) & |...|	
				
					'TODO: Decide what to do with the following fields:
				'			brand - should it come from brand or es_brand?  We already have es_brand?
				'			region - currently comes from es_region so maybe a duplicate field?
				
				'Passed the event status to enable the pseudo "Archiving" using Inactive flag
				docRegistration.ep_status = docEventProfile.status
				
				docRegistration.confname = docEventProfile.eventname		
				docRegistration.confstartdate = docEventProfile.ep_StartDate
				docRegistration.confenddate = docEventProfile.ep_EndDate
				docRegistration.confcity = docEventProfile.loc_confcity
				docRegistration.confstate = docEventProfile.loc_confstate
				docRegistration.confcountry = docEventProfile.loc_confcountry
				docRegistration.confgeoregion = docEventProfile.geo
				docRegistration.category = docEventProfile.category
				docRegistration.dWArea = docEventProfile.dWArea
				
				'Copy fields from Advanced tab of event profile
				docRegistration.BATTacticname = docEventProfile.BATTacticname
				docRegistration.es_BATCampaign = docEventProfile.es_BATCampaign
				docRegistration.BATMPID = docEventProfile.BATMPID
				docRegistration.tactic = docEventProfile.tactic
				docRegistration.surround_values = docEventProfile.surround_values
				docRegistration.tactics_credited = docEventProfile.tactics_credited
				docRegistration.eventtype = docEventProfile.eventtype
				docRegistration.eventsubtype = docEventProfile.eventsubtype
				docRegistration.eventcategory = docEventProfile.eventcategory
				docRegistration.sponsor_bu_pri = docEventProfile.sponsor_bu_pri
				docRegistration.es_brand = docEventProfile.es_brand
				docRegistration.industry = docEventProfile.industry		
				docRegistration.es_region = docEventProfile.es_region
				docRegistration.l_international = docEventProfile.l_international 
				docRegistration.attpri = docEventProfile.attpri
				docRegistration.m_priobj = docEventProfile.m_priobj
				docRegistration.r_numattendees = docEventProfile.r_numattendees
				
				'Copy program framework fields
				docRegistration.Frame_Program = docEventProfile.Frame_Program
				docRegistration.Frame_SubTheme = docEventProfile.Frame_SubTheme
				docRegistration.Frame_Program_Other = docEventProfile.Frame_Program_Other
				docRegistration.Frame_Tier = docEventProfile.Frame_Tier
				
				'Copy additional items that were originally copied from the event profile
				docRegistration.quarter = docEventProfile.quarter
				docRegistration.length = docEventProfile.length
				
				'Save the changes
				Call docRegistration.Save(True, False)
				
				'Update the count of registrations processed
				intCount = intCount + 1
				
				'Get the next registration
				Set entry = vc.GetNextEntry(entry)
				
			Wend
			
			If flgUpdateUI Then
				If (intCount = 1) Then
					Print |1 registration updated.|
				Else
					Print Cstr(intCount) & | registrations updated.|
				End If
			End If
			
		Else
			
			If flgUpdateUI Then
				Print |There are no registrations to update.|	
			End If
			
			Call Debug(STR_MODULE_NAME & |: No registration documents were found.|)
			
		End If
		
	Else
		
		If flgUpdateUI Then
			Print |There are no registrations to update.|	
		End If
		
		Call Debug(STR_MODULE_NAME & |: No registration documents were found.|)
		
	End If
	
	'If the event has an invitation process, also update any assoicated invitations
	If (docEventProfile.ep_EnableInvitations(0) = "Yes") Then
		
		'Find the lookup view
		Set viewInvitations = g_dbCurr.GetView(STR_LOOKUP_INVITATIONS)
		
		'Attempt to find all invitations
		Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_INVITATIONS & |] for documents with key [| & strKey & |].|) 
		
		'Get a collection of all entries
		Set vc = viewInvitations.GetAllEntriesByKey(strKey, True) 
		
		If (Not vc Is Nothing) Then
			
			If (vc.Count > 0) Then
				
				If flgUpdateUI Then
					Print |Updating invitations for this event...|	
				End If
				
				Call Debug(STR_MODULE_NAME & |: Processing | & Cstr(vc.Count) & | invitations(s)...|)
				
				Set entry = vc.GetFirstEntry()
				
				While Not(entry Is Nothing)
					
					'Get the associated document
					Set docInvitation = entry.Document
					
					Print |Updating invitation | & Cstr(intCountInvitations + 1) & | of | & Cstr(vc.Count) & |...|	
					
					docInvitation.ep_EventTitle = docEventProfile.eventname		
					docInvitation.confstartdate = docEventProfile.ep_StartDate
					docInvitation.confcity = docEventProfile.loc_confcity
					
					'Save the changes
					Call docInvitation.Save(True, False)
					
					'Update the count of invitations processed
					intCountInvitations = intCountInvitations + 1
					
					'Get the next invitation
					Set entry = vc.GetNextEntry(entry)
					
				Wend
				
				If flgUpdateUI Then
					If (intCountInvitations = 1) Then
						Print |1 invitation updated.|
					Else
						Print Cstr(intCountInvitations) & | invitations updated.|
					End If
				End If
				
			Else
				
				If flgUpdateUI Then
					Print |There are no invitations to update.|	
				End If
				
				Call Debug(STR_MODULE_NAME & |: No invitations were found.|)
				
			End If
			
		Else
			
			If flgUpdateUI Then
				Print |There are no invitations to update.|	
			End If
			
			Call Debug(STR_MODULE_NAME & |: No invitations were found.|)
			
		End If
		
	End If
	
	flgOK = True
	
	'Refresh the view that the document was opened from so that the status change is visible in the view
	If flgUpdateUI Then
		Dim ws As New NotesUIWorkspace	
		Call ws.ViewRefresh
	End If
	
lblExit:
	
	'Set the return value
	If (flgOK) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  | & Cstr(intCount) & | registration(s) updated.| & Cstr(intCountInvitations) & | invitation(s) updated.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.|)
	End If
	
	flgUpdateRegistrationDocuments = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:OpenPage:1:8
Sub OpenPage(doc As NotesDocument, intPageType As Integer, intEnvironment As Integer, strLocale As String)
	'------------------------------------------------------------------------------------------------------
    'Description
    '------------------
	'Given a type of page, an environment and a locale, open the specfied type of page of for the
	'supplied event in the specfied environment.
	'
	'NOTE: This function is designed to be called from an open UI document.
	'
    'Parameters
    '-----------------------
	'doc				The Event profile document or related artifact
	'intPageType		The type of page to open (See (Declarations) for values)
	'intEnvironment		The environment to open the page in (Test or Production) (See (Declarations) for values)
	'strLocale			The locale for the page
    '     
    'Return Values
    '-----------------------
    'None.
    '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |OpenPage|
	
	Dim strEventID As String
	Dim docEventProfile As NotesDocument
	Dim strURL As String
	Dim ws As New NotesUIWorkspace
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	'Based on the document type, find the event key
	strEventID = Cstr(doc.ep_id(0))
	
	Call Debug(STR_MODULE_NAME & |: Event ID [| & strEventID & |]  Page type [| & Cstr(intPageType) & |]  Environment [| & Cstr(intEnvironment) & |]  Locale [| & strLocale & |]|)
	
	Select Case intPageType
		
	Case INT_REGISTRATION_PAGE:
		
		Dim docRegistrationProfile As NotesDocument
		
		Set docRegistrationProfile = docGetRegProfileByBriefIDandLocale(doc,strLocale)
		
		If Not docRegistrationProfile Is Nothing Then
			Select Case intEnvironment
			Case INT_PREVIEW:
				strURL = Cstr(g_docDbProfile.dp_PreviewRegURL(0))
			Case INT_LIVE:
				If (Cstr(doc.kw_login_type(0)) = |WILogin|) Then
					strURL = Cstr(g_docDbProfile.dp_PreLoginURL_WI(0))  ' changed from dp_LiveRegURL_WI, -rws
				Else
					strURL = Cstr(g_docDbProfile.dp_LiveRegURL(0))
				End If
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown environment [| & Cstr(intEnvironment) & |] was supplied to the function.|	
			End Select			
			'Mark the registration profile as previewed for QA purposes	
			If (doc.UniversalID = docRegistrationProfile.UniversalID) Then
				doc.isRegistrationPreviewed = "Yes"
				Call doc.Save(True, False)				
			Else
				docRegistrationProfile.isRegistrationPreviewed = "Yes"
				Call docRegistrationProfile.Save(True, False)
			End If
		Else
			Call ShowInfoMsg(|Please first create a registration profile.|)
			Goto lblExit
		End If		
		
	Case INT_AGENDA_PAGE:
		
		Dim docAgendaContent As NotesDocument
		
		Set docAgendaContent = docGetAgendaByBriefIDandLocale(doc,strLocale)
		
		If Not docAgendaContent Is Nothing Then
			Select Case intEnvironment
			Case INT_PREVIEW:
				strURL = Cstr(g_docDbProfile.dp_PreviewAgendaURL(0))
			Case INT_LIVE:
				If (Cstr(doc.kw_login_type(0)) = |WILogin|) Then
					strURL = Cstr(g_docDbProfile.dp_LiveAgendaURL_WI(0))
				Else
					strURL = Cstr(g_docDbProfile.dp_LiveAgendaURL(0)) 
				End If			
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown environment [| & Cstr(intEnvironment) & |] was supplied to the function.|	
			End Select
			'Mark the agenda as previewed for QA purposes
			If (doc.UniversalID = docAgendaContent.UniversalID) Then
				doc.isAgendaPreviewed = "Yes"
				Call doc.Save(True, False)				
			Else
				docAgendaContent.isAgendaPreviewed = "Yes"
				Call docAgendaContent.Save(True, False)
			End If			
		Else
			Call ShowInfoMsg(|Please first create an agenda page.|)
			Goto lblExit
		End If
		
	Case INT_SPEAKERS_PAGE:
		
		Dim docSpeakers As NotesDocument
		
		Set docSpeakers = docGetSpeakersByBriefIDandLocale(doc,strLocale)
		
		If Not docSpeakers Is Nothing Then
			Select Case intEnvironment
			Case INT_PREVIEW:
				strURL = Cstr(g_docDbProfile.dp_PreviewSpeakersURL(0))
			Case INT_LIVE:
				If (Cstr(doc.kw_login_type(0)) = |WILogin|) Then
					strURL = Cstr(g_docDbProfile.dp_LiveSpeakersURL_WI(0))
				Else
					strURL = Cstr(g_docDbProfile.dp_LiveSpeakersURL(0)) 
				End If	
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown environment [| & Cstr(intEnvironment) & |] was supplied to the function.|	
			End Select
			'Mark the Speaker page as previewed for QA purposes
			If (doc.UniversalID = docSpeakers.UniversalID) Then
				doc.isSpeakersPreviewed = "Yes"
				Call doc.Save(True, False)				
			Else
				docSpeakers.isSpeakersPreviewed = "Yes"
				Call docSpeakers.Save(True, False)
			End If				
		Else
			Call ShowInfoMsg(|Please first create a speakers page.|)
			Goto lblExit			
		End If
		
	Case INT_SPONSORS_PAGE:
		
		Dim docSponsors As NotesDocument
		
		Set docSponsors= docGetSponsorsByBriefIDandLocale(doc,strLocale)
		
		If Not docSponsors Is Nothing Then
			Select Case intEnvironment		
			Case INT_PREVIEW:
				strURL = Cstr(g_docDbProfile.dp_PreviewSponsorsURL(0))
			Case INT_LIVE:
				If (Cstr(doc.kw_login_type(0)) = |WILogin|) Then
					strURL = Cstr(g_docDbProfile.dp_LiveSponsorsURL_WI(0))
				Else
					strURL = Cstr(g_docDbProfile.dp_LiveSponsorsURL(0))
				End If
			Case Else
				Error ERR_SYSTEM_ERROR, |An unknown environment [| & Cstr(intEnvironment) & |] was supplied to the function.|	
			End Select
			'Mark the Sponsors page as previewed for QA purposes
			If (doc.UniversalID = docSponsors.UniversalID) Then
				doc.isSponsorsPreviewed = "Yes"
				Call doc.Save(True, False)				
			Else
				docSponsors.isSponsorsPreviewed = "Yes"
				Call docSponsors.Save(True, False)
			End If				
		Else
			Call ShowInfoMsg(|Please first create a sponsors page.|)
			Goto lblExit
		End If
		
	Case INT_NOMINATION_PAGE:
		
		Error ERR_SYSTEM_ERROR, |Code not yet implemented.|	
		
	Case INT_MEETING_REQUEST_PAGE:
		
		Error ERR_SYSTEM_ERROR, |Code not yet implemented.|	
		
	Case INT_OTHER_PAGE:
		
		Set docEventProfile = docGetEventProfileByEventID(strEventID)
		
		strURL = Cstr(docEventProfile.ep_OtherURL(0))
		
	Case Else
		
		Error ERR_SYSTEM_ERROR, |An unknown page type [| & Cstr(intPageType) & |] was supplied to the function.|	
		
	End Select
	
	'Add the remainder of the URL
	If (intPageType <> INT_OTHER_PAGE) Then
		strURL = strURL & strEventID &  |&locale=| & strLocale
		If (intEnvironment = INT_PREVIEW) Then
			strURL = strURL & |&mode=preview|
		End If
	End If
	
	Call Debug(STR_MODULE_NAME & |: Opening page [| & strURL & |].|)
	
	ws.UrlOpen strURL
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:SetQTagText:5:8
%REM
	Sub SetQTagText
	Description: Comments for Sub
%END REM
Sub SetQTagText(strFieldLabel As String, strFieldName As String)
	Const STR_MODULE_NAME = |AGENT: Set QTag Text|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error GoTo lblError
	
	Dim ws As New NotesUIWorkspace
	Dim s As New NotesSession
	Dim dbCurrent As NotesDatabase
	Dim uiView As NotesUIView
	Dim col As NotesDocumentCollection
	Dim doc As NotesDocument
	Dim docDialog As NotesDocument
	Dim item As NotesItem
	Dim i As Integer
	Dim strNewValue As String
	Dim strMsg As String, strEventID As String, strMsg2 As String
	
	Set dbCurrent = s.CurrentDatabase
	Set col = dbCurrent.UnprocessedDocuments

	Set docDialog = dbCurrent.CreateDocument
	docDialog.fldLabel = strFieldLabel
	
	strMsg = |The attendance has been marked complete for this event. Field values cannot be changed|
	strMsg2 = |You must select registrations from the same event|
	
	Set uiView = ws.CurrentView
	Set dbCurrent = s.Currentdatabase
	Set col = dbCurrent.Unprocesseddocuments
	
	If col.Count = 0 Then
		Call ShowInfoMsg(|You must select at least one registration to set the | & strFieldLabel & | field.|)
		GoTo lblExit
	End If
	
	Set doc = col.GetFirstDocument
	strEventID = doc.ep_id(0)	
	While Not ( doc Is Nothing )
		
		If strEventID <> doc.ep_id(0) Then
			Call ShowInfoMsg(strMsg2)
			GoTo lblExit
		End If
		
		strEventID = doc.ep_id(0)
		Set doc = col.GetNextDocument(doc)
	Wend
	
	Dim flgOk As Integer
	flgOK = ws.DialogBox(|dlgEnterText|, True, True, False , , , , strFieldLabel, docDialog ,True, False)
	If(Not flgOk) Then
		Call Debug(STR_MODULE_NAME & |: User clicked cancel.|)
		Print STR_MODULE_NAME & |: User clicked cancel.|
	Else
		strNewValue = docDialog.en_text(0)
		
		Call Debug(STR_MODULE_NAME & |: Replacing | & strFieldName & | field with | & strNewValue & | on | & col.Count & | documents.|)
		
		For i = 1 To col.Count
			Set doc = col.GetNthDocument( i )
			Set item = doc.ReplaceItemValue( strFieldName , strNewValue )
			Call doc.Save( True, True )
			Call Debug(STR_MODULE_NAME & |: Replaced on | & doc.regid(0)) 		
		Next
	End If
	
	Set docDialog = Nothing
lblExit:
	
	Call uiView.DeselectAll
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call ShowErrorMsg(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Sub

'++LotusScript Development Environment:2:2:StoreMIQuestion:1:8
Sub StoreMIQuestion(docMIQuestionSetLookup As NotesDocument, intQuestionNumber As Integer, docAREventProfile As NotesDocument)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an MI question set lookup document,  a question number and an Attendee Repository
	'event profile, find the requested question in the question set lookup and copy information
	'from it to the Attendee Repository event profile.
	'
     'Parameters
     '----------------
	'docMIQuestionSetLookup			The MI question set lookup document.
     'intQuestionNumber					The question to store.
	'docAREventProfile						The Attendee Repository event profile to be updated.
	'
     'Return Values
     '-------------------
     'None..
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |StoreMIQuestion|
	
	Dim strTargetQuestionNumber As String
	Dim strIncludedFieldName As String
	Dim strIncludedValue As String
	Dim strLabelFieldName As String
	Dim strLabel As String
	Dim strTypeFieldName As String
	Dim strType As String		
	Dim strFormula As String
	
     'Trap errors
	On Error Goto lblError
	
	strTargetQuestionNumber = Cstr(intQuestionNumber)
	
	strLabelFieldName = |q| & strTargetQuestionNumber & |_text|
	strLabel = docMIQuestionSetLookup.GetItemValue(strLabelFieldName)(0)
	
	strTypeFieldName = |q| & strTargetQuestionNumber & |_type|
	strType = docMIQuestionSetLookup.GetItemValue(strTypeFieldName)(0)
	
	'Find the formula to use to get the answer(s) to the question based on its type
	Select Case strType
	Case |check|:
		strFormula = |@ReplaceSubstring(@Implode(@Left(en_cicoption| & strTargetQuestionNumber & |; "="));" ";";")|
	Case |dialog|:
		strFormula = |@Left(en_cidoption| & strTargetQuestionNumber & |; "=")|
	Case |radio|:
		strFormula = |@Left(en_ciroption| & strTargetQuestionNumber & |; "=")|
	Case |text|:
		strFormula = |en_citoption| & strTargetQuestionNumber
	Case Else
		strFormula = ||
	End Select
	
	'Now set the appropriate field values in the Attendee Repository event profile
	Call CopyToAREventProfile(docAREventProfile, |eplma_label| & strTargetQuestionNumber, strLabel)
	Call CopyToAREventProfile(docAREventProfile, |epma_question| & strTargetQuestionNumber, strFormula)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:exportToODF:1:8
Sub exportToODF(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField)
%REM

As of this writing, I couldn't get the Status Bar to update.  Hiding/Showing the application seemed to cause "isues" with Symphony.  Also, required the use of "sleep" in order for that to work.  

To get around that, I tried opening up another worksheet and using that as a "status bar" to update the user.  Thta worked well but was too slow.

Now I'm using the worksheet name as a status bar of sorts.

These are the resources I used to learn about the OOo API.

	1.)  http://www.oooforum.org/
		a.)		http://www.oooforum.org/forum/viewforum.phtml?f=9   <-- OpenOffice.org Macros and API
		b.)		http://www.oooforum.org/forum/viewforum.phtml?f=11	<-- OpenOffice.org Code Snippets

	2.)	  http://api.openoffice.org/docs/common/ref/com/sun/star/module-ix.html		<-- API

	3.)  http://www.kalitech.fr/clients/doc/VB_APIOOo_en.html     <-- Programming OpenOffice.org with Visual Basic

	4.)  http://wiki.services.openoffice.org/wiki/Documentation/DevGuide/OpenOffice.org_Developers_Guide		<-- OpenOffice.org Developer's Guide

	5.)  http://docs.sun.com/app/docs/doc/819-0439?q=staroffice+basic+programmers   <-- StarOffice 8 Programming Guide for BASIC

	6.)  http://www.oooforum.org/forum/viewtopic.phtml?p=13511#13511   <-- Great post from a Moderator on OpenOffice.org, DannyB.  Covers how to read and use the API.
	
%END REM
	
	On Error Goto lblError
	Const STR_MODULE_NAME = |ExportToODF|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Dim intCurrRow As Integer	
	Dim intCurrCol As Integer
	Dim intCurrIndex As Integer
	Dim intMaxIndex As Integer
	Dim intLastCol As Integer
	Dim intCurrDoc As Integer
	Dim intTotalDocs As Integer
	Dim varResult As Variant
	Dim strResult As String
	Dim docCurr As NotesDocument
	Dim strColumnTitle As String
	Dim NL As String										' New Line
	
	
	' Make sure the file isn't ReadOnly.  Also, if the file exists, give the user the choice to continue or not.
	If (Not exportContinueAfterFileCheck(strExportFilename))Then
		Exit Sub
	End If
	
'Symphony Related Objects
	
	Dim sm As Variant										'  Service Manager, our hook into COM/OLE for ODF suites
	Dim desktop As Variant								'  For Symphony, this is the starting point (splash page) for selecting what type of document you wish to open.
	Dim noArgs() As Variant  							'  loadComponentFromURL will often not need any params, but will still have to pass an array.
	Dim args(0) 							 					'  array of property values
	Dim calcApp As Variant								'  "scalc"  or "Star Calc", the spreadsheet program within the office suite
	Dim sheet As Variant									'  The target Worksheet for the calcApp
	Dim cell As Variant										'  Target cell on sheet
	Dim reflection As Variant								'  We can't build a proper Property Struture with LS but we can create the CoreReflection service that is later used to create structs 
	
	Dim cols As Variant									'	sheet columns
	Dim col As Variant										'	single sheet column
	Dim iIndex As Integer									'	for loop counter
	Dim iLastColumn As Integer						'	last column to format
	Dim cellRange As Variant							'	cell range, used in title merge	
	
	intMaxIndex = Ubound(arrExportFields)
	intLastCol = intMaxIndex + 1
	
	NL = Chr(10)&Chr(13)
	
	'Instantiate Symphony
	Set sm=CreateObject("com.sun.star.ServiceManager")
	
	Set desktop=sm.createInstance("com.sun.star.frame.Desktop") 											' handle to suite	
	Set calcApp = desktop.loadComponentFromURL("private:factory/scalc","_blank",0, noArgs)	' handle to calc
	
	Set sheet=calcApp.Sheets.getByIndex(0)  																		' default sheet
	
	' zero based
	intCurrCol = 0
	intCurrRow = 2
	
	' print titles
	Forall varExportField In arrExportFields()
		strColumnTitle = varExportField.strLabel		
		Set cell=sheet.getCellByPosition(intCurrCol,intCurrRow)  ' zero based: col, row
		Call cell.setString(strColumnTitle)		
		intCurrCol = intCurrCol + 1
	End Forall
	
	' cycle doc collection, write to sheet
	intTotalDocs = collDocuments.Count
	Set docCurr = collDocuments.GetFirstDocument()		
	Do While Not docCurr Is Nothing
		
		intCurrDoc = intCurrDoc + 1
		Call sheet.setName(|Document  | & Cstr(intCurrDoc) & " of " & intTotalDocs)	
		
		'Call Debug(STR_MODULE_NAME & |: Exporting document | & Cstr(intCurrDoc) & | of | & Cstr(intTotalDocs) & |...|)
		
		intCurrRow = intCurrRow + 1
		intCurrCol = 0
		
		For intCurrIndex = 0 To intMaxIndex 
			
			On Error Goto lblErrorNextField
			
			'If this is checkbox (multi-value) field use the Text() method to get all values
			If arrExportFields(intCurrIndex).strType = |check| Then				
				strResult = ""
				If (docCurr.HasItem(arrExportFields(intCurrIndex).strExport)) Then
					strResult = docCurr.GetFirstItem(arrExportFields(intCurrIndex).strExport).Text
				End If
				If(intCurrIndex = g_en_roleIndex And strResult <> "")Then
					strResult = parseRoleField(strResult)
				End If
			Else
				'Call Debug(STR_MODULE_NAME & |: Evaluating [| & arrExportFields(intCurrIndex).strExport & |]...|)						
				varResult = Evaluate(arrExportFields(intCurrIndex).strExport, docCurr)
				strResult = Cstr(varResult(0))
				'Call Debug(STR_MODULE_NAME & |: [| & arrExportFields(intCurrIndex).strExport & |] Result = [| & strResult & |]|)					
			End If
			
lblNextField:
			
			On Error Goto lblError
			
			If strResult  = "Select" Or strResult  = "Select one" Then	
				Set cell=sheet.getCellByPosition(intCurrCol,intCurrRow)  ' zero based: col, row
				Call cell.setString("")				
			Else
				Set cell=sheet.getCellByPosition(intCurrCol,intCurrRow)  ' zero based: col, row
				Call cell.setString("" + strResult)				
			End If
			
			intCurrCol = intCurrCol + 1
			
		Next 
		
		Set docCurr = collDocuments.GetNextDocument(docCurr) 
		
	Loop
	
'	If we get this far it's time to format the sheet.
	Call sheet.setName("Finishing Up")
	
	Set cols = sheet.getColumns() 
	
	iLastColumn = intCurrCol - 1
	
	For iIndex = 0  To iLastColumn
		Set col = cols.getByIndex(iIndex)
		col.CharFontName = "arial"
		col.CharHeight = 9											'  	Size
		col.OptimalWidth = True									'	same as AutoFit
	Next iIndex 
	
	Set cellRange = sheet.getCellRangeByName("A1:Z1") 
	cellRange.CharFontName = "arial"
	cellRange.CharUnderline = 1
	cellRange.CharWeight =150  								'	150 = Bold	
	cellRange.Merge (True) 
	
	' Add the title in row 1, column 1
	Set cell=sheet.getCellByPosition(0,0)  ' zero based: col, row
	Call cell.setString("" + strTitle)	
	
	Set Reflection= sm.createInstance("com.sun.star.reflection.CoreReflection")
	Set args(0)  = exportCreatePropertyStruct("com.sun.star.beans.PropertyValue", reflection)
	args(0).Name = "Overwrite"
	args(0).Value = True
	strExportFilename = ExportConvertToUrl(strExportFilename)
	
	Call sheet.setName("GRP Export")
	
	calcApp.storeAsURL strExportFilename, args
	
lblExit:
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	Exit Sub
	
lblError:
	
	If (Err =208)Then
		Msgbox |You must have an Open Document Format Compliant Office Suite (i.e. Lotus Symphony)| & Chr(10)+Chr(13) _
		& | installed on your computer in order to use this feature.  |, , |Lotus Symphony or Open Document Format Application Not Found|
		Goto lblExit
	End If
	
		'Error 213
	If Err() = 213 Then
		Msgbox | Please do not close or attempt to change any of the worksheets until the export is complete.  | _ 
		& NL & NL & | If you are still having problems, please reboot your system and try again.  | _
		& NL & NL & STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl, MB_OK, |Export Error|
		Goto lblExit
	End If	
	
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Msgbox STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl
	Goto lblExit
	
lblErrorNextField:
	strResult = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	'Error 213
	If Err() = 213 Then
		'SaveAs method of Workbook class failed
		'Likely means that the user cancelled the save of the exported workbook, so don't log it as an error
		If (Instr(Error(), |SaveAs method of Workbook class failed|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User chose to not save the exported file.|)			
			Resume Next
		End If
	End If	
	
	'Error 207 is an OLE automation error
	If Err() = 207 Then
		'Automation object error
		'Likely means that the user closed the target product during the export, so don't log it as an error
		If (Instr(Error(), |Automation object error|) <> 0) Then
			Call Debug(STR_MODULE_NAME & |: User closed ODF Suite during the export.|)		
			Resume Next
		End If
	End If	
	
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	If (Not docCurr Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document being exported has UNID [| & docCurr.UniversalID & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Document being exported is Nothing|)		
	End If
	
	If (intCurrIndex <= Ubound(arrExportFields)) Then
		Call Debug(STR_MODULE_NAME & |: Array index is [| & Cstr(intCurrIndex) & |]|)
		Call Debug(STR_MODULE_NAME & |: Field being exported is [| & arrExportFields(intCurrIndex).strExport & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Array index is out of bounds.|)		
	End If
	
	Resume lblNextField
End Sub

'++LotusScript Development Environment:2:2:UpdateAudit:1:8
Sub UpdateAudit(doc As NotesDocument, strUserName As String, strMsg As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a document and user name and message, format the user name and message
	'and append them to the c_audit field.
	'
     'Parameters
     '-----------------------
	'doc						A document.
	'strUserName 		The user name to show with the message.
	'strMsg					The message to write to the c_auidt  field.
	'	
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |UpdateAudit|
	
	Dim item As NotesItem
	
	'Trap errors
	On Error Goto lblError
	
	If (doc.HasItem(|c_audit|)) Then
		Set item = doc.GetFirstItem(|c_audit|)
		Call item.AppendToTextList(strUserName & | - | & Ucase$(Format$(Now(), "mm/dd/yyyy hh:mm:ss AM/PM")) & |: | & strMsg)	
	Else
		Set item = doc.ReplaceItemValue(|c_audit|, strUserName & | - | & Ucase$(Format$(Now(), "mm/dd/yyyy hh:mm:ss AM/PM")) & |: | & strMsg)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:flgCanEdit:1:8
Function flgCanEdit(doc As NotesDocument, strUserName As String) As Integer
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given a user name in abbreviated format, check whether the user can
	'edit the current document by checking the security settings in the Event Information
	'document for the event.
     '
     'Parameters
     '----------------
     'doc						The document to check.
	'strUserName		The name of the user to check.
	'
     'Return Values
     '-------------------
     'True if the user can edit the document, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgCanEdit|
	
	Dim flgAllowedToEdit As Integer
	Dim strForm As String
	Dim strEventID As String
	Dim docEventProfile As NotesDocument
	Dim strSecurityType As String
	Dim varEditors As Variant
	
     'Trap errors
	On Error Goto lblError
	
	'Set the default return code (If in doubt, do not allow the document to be edited)
	flgAllowedToEdit = False
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether user [| & strUserName & |] is allowed to edit the document.|) 
	
	'If doc is nothing then this is a new document so allow edit
	If doc Is Nothing Then
		Call Debug(STR_MODULE_NAME & |: This is a new document so editing is allowed.|) 		
		flgAllowedToEdit = True
		Goto lblExit
	End If
	
	'Based on the type of document we're being called from, find the event information form associated with the event
	strForm = Cstr(doc.Form(0))
	
	Call Debug(STR_MODULE_NAME & |: Form being checked is [| & strForm & |].|) 
	
	Select Case strForm
		
	Case |agendacontent|, |speakerscontent|, |sponsorscontent|:
		
		strEventID = Cstr(doc.ep_id(0))
		Call Debug(STR_MODULE_NAME & |: Event ID is [| & strEventID & |].|) 
		
		Set docEventProfile = docGetEventProfileByEventID(strEventID)
		
		If (docEventProfile Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find event profile with ID [| & strEventID & |].|) 
			Goto lblExit
		End If
		
		strSecurityType = Cstr(doc.securityType(0))
		varEditors = doc.eventEditors		
		
	Case |fEventProfile|:	
		
		Set docEventProfile = doc
		strSecurityType = Cstr(doc.securityType(0))
		varEditors = doc.eventEditors		
		
	Case |fEmailTemplate|:	
		
		strSecurityType = Cstr(doc.et_SecurityType(0))
		varEditors = doc.et_Editors
		
	Case |fLandingPageProfile|:	
		
		'No specific security - but added here so can be checked later
		
	Case Else
		
		Call Debug(STR_MODULE_NAME & |: Document security is not defined for this type of form.|) 		
		flgAllowedToEdit = True
		Goto lblExit
		
	End Select
	
	'If the security setting in the event profile is set restricted then check whether the user can edit the document
	If (strSecurityType = |R|) Then
		Call Debug(STR_MODULE_NAME & |: Based on the security settings for this type of document, only specified users are allowed to edit the document.|)
		
		'First check whether the user is one of the global editors who can always edit documents
		
		'For now, this is anyone in the [Developer] role
		If (flgHasRole(|[Developer]|)) Then
			Call Debug(STR_MODULE_NAME & |: User is in the [Developer] role, so is allowed to edit the document.|)			
			flgAllowedToEdit = True
			Goto lblExit
		End If
		
		'Then check the list of names in the event profile
		Forall varName In varEditors
			If strUserName = Cstr(varName) Then
				Call Debug(STR_MODULE_NAME & |: User is in the list of allowable editors, so is allowed to edit the document.|)						
				flgAllowedToEdit = True
				Exit Forall
			End If
		End Forall
	'Otherwise, the user is allowed to edit the document
	Else
		Call Debug(STR_MODULE_NAME & |: Based on the security settings for this type of document, all users are allowed to edit this document.|) 				
		flgAllowedToEdit = True
	End If
	
	'Only allow edit of default e-mail templates by [Developer], [Admin], [CanisterAdmin] or [QAAdmin]
	If (strForm = |fEmailTemplate| And doc.et_IsDefault(0) = "Yes") Then
		If (flgHasRole(|[Developer]|) Or flgHasRole(|[Admin]|) Or flgHasRole(|[CanisterAdmin]|) Or flgHasRole(|[QAAdmin]|)) Then
			Call Debug(STR_MODULE_NAME & |: Edit of default e-mail is allowed because user is in at least one of the roles allowed to edit default e-mail templates.|) 	
			flgAllowedToEdit = True			
		Else
			Call Debug(STR_MODULE_NAME & |: Edit of default e-mail template is NOT allowed becasue user is not in any of the roles allowed to edit default e-mail templates.|) 
			flgAllowedToEdit = False			
		End If
	End If
	
	'Only allow edit of default landing pages by [Developer]
	If (strForm = |fLandingPageProfile| And doc.lp_IsDefault(0) = "Yes") Then
		If (flgHasRole(|[Developer]|)) Then
			Call Debug(STR_MODULE_NAME & |: Edit of default landing page l is allowed because user is in at least one of the roles allowed to edit default landing pages.|) 	
			flgAllowedToEdit = True			
		Else
			Call Debug(STR_MODULE_NAME & |: Edit of default landing page template is NOT allowed becasue user is not in any of the roles allowed to edit default landing pages.|) 
			flgAllowedToEdit = False			
		End If
	End If
	
lblExit:
	
	'Set the return value	
	flgCanEdit = flgAllowedToEdit
	
	If (flgAllowedToEdit) Then
		Call Debug(STR_MODULE_NAME & |: Finished.  User is allowed to edit the document.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Finished.  User is NOT allowed to edit the document.|) 	
	End If
	
	Exit Function
	
lblError:
	
	flgAllowedToEdit = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgUpdateEventDocuments:1:8
Function flgUpdateEventDocuments(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given an event profile, update all of the agenda, speakers and sponsors
	'documents associated with the event.
	'
     'Parameters
     '-----------------------
	'docEventProfile			The event profile.
	'flgUpdateUI				Whether to update the UI or not. 
	'								(Set to False if calling this function from a back-end agent)
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateEventDocuments|
	
	Dim flgOK As Boolean
	Dim strEventID As String
	Dim view As NotesView	
	Dim coll As NotesDocumentCollection
	Dim docCurr As NotesDocument	
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	flgOK = False
	
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Dim count As Integer
	count = 0	
	
	'Update associated registration profiles
	Set view = g_dbCurr.GetView("vLookupRegistrationProfilesByID")	
	
	Set coll = view.GetAllDocumentsByKey(strEventID, True)	
	
	If (coll.count > 0) Then
		Set docCurr = coll.GetFirstDocument
		While Not docCurr Is Nothing	
			On Error Goto lblErrorNextRegProfile
			If (Not flgUpdateEventDocument(docEventProfile, docCurr)) Then
				Error ERR_SYSTEM_ERROR, |Unable to update registration profile with UNID [| & docCurr.UniversalID & |] associated with event with ID [ & strEventID & ].|	
			End If
lblNextRegProfile:	
			On Error Goto lblError
			Set docCurr = coll.GetNextDocument(docCurr)		
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No registration profiles are associated with this event.|)	
	End If
	
	'Update associated agendas
	Set view = g_dbCurr.GetView("vLookupAgendasByID")	
	
	Set coll = view.GetAllDocumentsByKey(strEventID, True)	
	
	If (coll.count > 0) Then
		Set docCurr = coll.GetFirstDocument
		While Not docCurr Is Nothing	
			On Error Goto lblErrorNextAgenda
			If (Not flgUpdateEventDocument(docEventProfile, docCurr)) Then
				Error ERR_SYSTEM_ERROR, |Unable to update agenda document with UNID [| & docCurr.UniversalID & |] associated with event with ID [ & strEventID & ].|	
			End If
lblNextAgenda:	
			On Error Goto lblError
			Set docCurr = coll.GetNextDocument(docCurr)		
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No agenda documents are associated with this event.|)	
	End If
	
	'Update associated speakers
	Set view = g_dbCurr.GetView("vLookupSpeakersByID")	
	
	Set coll = view.GetAllDocumentsByKey(docEventProfile.ep_id(0), True)	
	
	If (coll.count > 0) Then
		Set docCurr = coll.GetFirstDocument
		While Not docCurr Is Nothing	
			On Error Goto lblErrorNextSpeaker
			If (Not flgUpdateEventDocument(docEventProfile, docCurr)) Then
				Error ERR_SYSTEM_ERROR, |Unable to update speaker document with UNID [| & docCurr.UniversalID & |] associated with event with ID [ & strEventID & ].|	
			End If
lblNextSpeaker:	
			On Error Goto lblError
			Set docCurr = coll.GetNextDocument(docCurr)		
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No speaker documents are associated with this event.|)	
	End If
	
	'Update associated sponsors
	Set view = g_dbCurr.GetView("vLookupSponsorsByID")
	
	Set coll = view.GetAllDocumentsByKey(docEventProfile.ep_id(0), True)	
	
	If (coll.count > 0) Then
		Set docCurr = coll.GetFirstDocument
		While Not docCurr Is Nothing	
			On Error Goto lblErrorNextSponsor
			If (Not flgUpdateEventDocument(docEventProfile, docCurr)) Then
				Error ERR_SYSTEM_ERROR, |Unable to update sponsor document with UNID [| & docCurr.UniversalID & |] associated with event with ID [ & strEventID & ].|	
			End If
lblNextSponsor:	
			On Error Goto lblError
			Set docCurr = coll.GetNextDocument(docCurr)		
		Wend
	Else
		Call Debug(STR_MODULE_NAME & |: No sponsor documents are associated with this event.|)	
	End If
	
	flgOK = True
	
	'Refresh the view that the document was opened from so that the status change is visible in the view
	If flgUpdateUI Then
		Dim ws As New NotesUIWorkspace	
		Call ws.ViewRefresh
	End If
	
lblExit:
	
	flgUpdateEventDocuments = flgOK
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
lblErrorNextRegProfile:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextRegProfile
	
lblErrorNextAgenda:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextAgenda
	
lblErrorNextSpeaker:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextSpeaker
	
lblErrorNextSponsor:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblNextSponsor
	
End Function

'++LotusScript Development Environment:2:2:ViewEmail:1:8
Sub ViewEmail(doc As NotesDocument, uidoc As NotesUIDocument, intEmailType As Integer, strLocale As String, strID As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a type of email, and a locale, allow the user to create an e-mail of that type
	'for the locale.
	'
	'NOTE: This function is designed to be called from an open UI document.
	'
     'Parameters
     '-----------------------
	'doc						The event profile.
	'uidoc					The event profile opened in the UI.
	'intEmailType			The type of email (See (Declarations) for values)
	'strLocale				The locale for the email.
	'strID						The ID used to find the fields in the form to update.
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |ViewEmail|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupEmailTemplatesByUNID|
	
	Dim ws As New NotesUIWorkspace
	Dim docEmailTemplate As NotesDocument
	Dim strType As String	
	Dim strPrefix As String
	Dim strUNIDFieldName As String
	Dim strDialogTitle As String	
	Dim strKey As String
	
	'Trap errors
	On Error Goto lblError
	
	'Get the type of email being viewed
	strType = strGetEmailType(intEmailType)
	
	'Find which field in the event profile is used to store the UNID for this email.
	strPrefix = strGetEmailPrefix(intEmailType)
	strUNIDFieldName = strPrefix & |UNID_| & strID	
	
	strKey = doc.GetItemValue(strUNIDFieldName)(0)
	
	Set docEmailTemplate = docGetEmailTemplateByUNID(strKey)
	
	If Not docEmailTemplate Is Nothing Then
		strDialogTitle = |View | & strGetLocaleName(strLocale) & | | & strType & | E-mail|
		Call ws.DialogBox(|frmMergeTemplate|, True, True, False , , ,True , strDialogTitle, docEmailTemplate,True, False)
	Else
		Call ShowErrorMsg(|Unable to find e-mail template.|)
	End If
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:exportContinueAfterFileCheck:1:8
Function  exportContinueAfterFileCheck(strExportFilename As String) As Boolean
	exportContinueAfterFileCheck = False
	On Error Goto lblError
%REM
Find out if file exists and is NOT marked ReadOnly.  If so, prompt user to decide how to proceed.
%END REM
	Dim STR_MODULE_NAME As String	
	Dim stream As NotesStream	' used to test strExportFilename to see if it exists
	Dim s As New NotesSession
	Dim intReply As Integer
	Set stream = s.CreateStream
	STR_MODULE_NAME = |exportContinueAfterFileCheck|
	
	If (Not stream.Open(strExportFilename, "binary")) Then
		Error ERR_SYSTEM_ERROR, |Unable to open export file | & strExportFilename & |.|	
		Goto lblExit
	End If
	
	If stream.IsReadOnly Then
		Call ShowInfoMsg(|The file | & strExportFilename & | cannot be accessed.  Please check whether it is already open and if it is close it.|)
		Goto lblExit
	End If
	
	If (stream.Bytes <> 0) Then
		intReply = intAskQuestion(|The file | & strExportFilename & | already exists.| & Chr$(13) & Chr$(13) & |Do you want to replace its contents with the exported information?|)
		If (intReply <> IDYES) Then
			Goto lblExit
		End If
	End If	
	exportContinueAfterFileCheck = True
	Goto lblExit
	
lblError:
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
lblExit:
	Call stream.Close	
	Exit Function
End Function

'++LotusScript Development Environment:2:2:CreateTableOneColumnSpan:6:8
%REM
	Sub CreateTableOneColumnSpan
	Description: Comments for Sub
%END REM
Sub CreateTableOneColumnSpan(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_t As String, str_s As String)

	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	'If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + str_t + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	'str_HTML = str_HTML & |
'<div class="ibm-container"> 
'<h2>| & str_Day & | | & str_d & |: | & str_tLabel & |</h2> 
'<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |
<div class="ibm-container-body">| & Chr(13)
	
	str_HTML = str_HTML & |<p>&nbsp;|
	
	str_HTML = str_HTML & |</p><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the section
	str_HTML = str_HTML + |
</div>| & Chr(13) & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:1:docGetBadgeTemplateByName:1:8
Function docGetBadgeTemplateByName(strName As String) As NotesDocument
	Const STR_MODULE_NAME = |docGetBadgeTemplateByName|
	
	Const STR_LOOKUP_VIEW_ALIAS = |vLookupBadgeTemplates|
	
	Dim view As NotesView
	Dim docBadgeTemplate As NotesDocument
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	Set view = g_dbCurr.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	Set docBadgeTemplate = view.GetDocumentByKey(strName , True)
	
	If (Not docBadgeTemplate Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document template found.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Unable to find document template.|)
	End If
	
lblExit:
	
	Set docGetBadgeTemplateByName = docBadgeTemplate
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	Set docGetBadgeTemplateByName = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Function

'++LotusScript Development Environment:2:1:flgUpdateInviteeDocument:1:8
Function flgUpdateInviteeDocument(docEventProfile As NotesDocument, docNomination As NotesDocument, dtNow As NotesDateTime, docInvitee As NotesDocument) As Boolean
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given an event profile and a nomination document, update the supplied invitee document
	'with information from the event profile and nomination.
	'
	'Parameters
	'-----------------------
	'docEventProfile		The event profile
	'docNomination			The nomination
	'dtNow					The timestamp to use on the invitee document
	'docInvitee				The invitee document to update
	'	
	'Return Values
	'-----------------------
	'True if the invitee document was successfully updated, False otherwise.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateInviteeDocument|
	
	Dim flgOK As Boolean
	Dim strFormula As String
	Dim varResult As Variant
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return code
	flgOK = False
	
	Call CopyToSame(docEventProfile, |referenceid|, docInvitee)
	Call CopyToSame(docEventProfile, |eventname|, docInvitee)	
	Call CopyToSame(docEventProfile, |EditorNames|, docInvitee)
	Call CopyToSame(docEventProfile, |cteba_approval_conditions_L1|, docInvitee)
	Call CopyToSame(docEventProfile, |cteba_packages|, docInvitee)
	Call CopyToSame(docEventProfile, |cteba_package_all|, docInvitee)
	Call CopyToSame(docEventProfile, |cteba_atype_all|, docInvitee)
	Call CopyToSame(docEventProfile, |amenity_local_GOE_charge_all|, docInvitee)
	Call CopyToSame(docEventProfile, |o_ownernotesid|, docInvitee)
	Call CopyToSame(docEventProfile, |o_pnotesid|, docInvitee)
	Call CopyToSame(docEventProfile, |ESTURL|, docInvitee)		
	
	Set docInvitee.ESTImportDate = dtNow
	Call CopyTo(docEventProfile, |o_owneremail|, docInvitee, |in_AuthorEmail|)		
	docInvitee.in_ListName = docEventProfile.eventname(0) & | | & dtNow.DateOnly & | | & dtNow.TimeOnly	
	Call CopyTo(docEventProfile, |o_ownernotesid|, docInvitee, |OrigAuthor|)			
	
	'Set in_Level based on formula supplied by Geoff
	strFormula = |@If(cteba_approval_conditions_L1="Legal needs to review invitee list";"List Review"; cteba_approval_conditions_L1="Legal needs to review invitee names";"Invitee Approval";"")|
	varResult = Evaluate(strFormula, docEventProfile)	
	docInvitee.in_Level = varResult(0)
	
	'Set the field that stores the package descriptions
	Dim strarrPackageDescs() As String
	Dim intCountPackages As Integer
	intCountPackages = Cint(docEventProfile.cteba_packages(0)) - 1
	Redim strarrPackageDescs(intCountPackages)
	Dim intCurrPackage As Integer
	Dim intCurrIndex As Integer
	intCurrIndex = 0
	For intCurrPackage = 0 To intCountPackages
		strarrPackageDescs(intCurrIndex) = Cstr(intCurrIndex+1)+") " & docEventProfile.cteba_package_all(intCurrIndex) & "- TYPES:" & docEventProfile.cteba_atype_all(intCurrIndex) & "-AMOUNT:" &  docEventProfile.amenity_local_GOE_charge_all(intCurrIndex)
		intCurrIndex = intCurrIndex+1
	Next
	docInvitee.cteba_package_desc = strarrPackageDescs
	
	'Set default status values
	docInvitee.in_status = |Pending GOE Determination|
	docInvitee.in_goeDetermination = |Pending|
	docInvitee.in_goeStatus = |Not checked|
	
	'Now update the invitee document with information from the nomination
	'Convert the attendee types into ones recognized by the Invitee Tool
	'These are based on the 2010 types so we may need to update
	Dim strAttendeeType As String
	Select Case docNomination.en_passtype(0)
		Case |BP|:
			strAttendeeType = |Business Partner|
		Case |Client (BP)|:
			strAttendeeType = |Customer/Delegate|		
		Case |Client|:
			strAttendeeType = |Customer/Delegate|
		Case |Speaker|:
			strAttendeeType = |Speaker|		
		Case Else
			'strAttendeeType = docNomination.NomineeType(0)
			strAttendeeType = |Customer/Delegate|		
	End Select
	
	docInvitee.in_attendeeType = strAttendeeType
	docInvitee.in_salutation = docNomination.en_prefix(0)
	docInvitee.in_firstName = Trim(docNomination.en_first(0))
	docInvitee.in_lastName = Trim(docNomination.en_last(0))
	docInvitee.in_jobTitle = Trim(docNomination.en_title(0))
	docInvitee.in_email = Trim(docNomination.en_email(0))
	Dim strPhone As String
	strPhone = Trim(docNomination.en_phone(0))
	If strphone = "" Then strphone = "0"
	docInvitee.in_phone = strPhone
	'If (docNomination.en_phoneCode(0) = |Select one|) Then
	'	strPhone = docNomination.en_phone(0)
	'Else
	'	strPhone = docNomination.en_phoneCode(0) & docNomination.en_phone(0)
	'End If
	
	docInvitee.in_company = Trim(docNomination.en_companyname(0))
	docInvitee.in_address = Trim(docNomination.en_mailstreet1(0)) + " " + Trim(docNomination.en_mailstreet2(0))
	docInvitee.in_city = Trim(docNomination.en_city(0))
	
	'State and Province Translation
	'Did this translation via a hidden field in nomination form  SMH 8/1/2012
	'docInvitee.in_state = docNomination.CTEBA_state_or_province(0)
	Dim tmpStOrPr As String 'CIF 2017 - Anil
	If (docNomination.en_province(0) = "") Then
		docInvitee.in_state = docNomination.en_state(0)
	Else
		docInvitee.in_state = docNomination.en_province(0)
	End If
	
	'so this code no longer used / SMH 8/1/2012
	'If (docNomination.nom_country(0) = "Canada") Then
	'TV 10/7/2011 - The invitee tool requires a province for Canada in order to be able
	'to find the correct legal approver.  The view lookupcountryctebabycountry in the
	'main ES database is used to find the document that specifies the approver.  The
	'key used to find the document is country+province but the documents in ES have
	'the full province name and this database only stores the two letter province abbreviation.
	'So, translate the two letter abbreviation into the full province name as used in ES so
	'that the lookup will work correctly.
	'ES only uses the English province names (and uses Newfoundland instead of Newfoundland and Labrador,
	'and Quebec instead of Québec).
	'	docInvitee.in_state = strGetESProvinceName(docNomination.nom_province(0))
	'Else
	'	docInvitee.in_state = docNomination.nom_state(0)
	'End If		
	
	
	If docNomination.en_zip(0) ="" Then
		docInvitee.in_zip = "NA"
	Else
		docInvitee.in_zip = Trim(docNomination.en_zip(0))
	End If
	
	docInvitee.in_country = docNomination.en_country(0)
	
	docInvitee.in_goe = docNomination.en_goe(0)
	
	If docNomination.en_goeType(0) = "Federal Government" Then
		docInvitee.in_goeType = "Federal"
	Elseif docNomination.en_goeType(0) =  "State/Provincial" Then
		docInvitee.in_goeType = "State"
	Else
		docInvitee.in_goeType = docNomination.en_goeType(0)
	End If
	
	'docInvitee.in_goeType = docNomination.en_goeType(0)
	
	'left off here
	
	docInvitee.in_goeOther = docNomination.en_goetypeOther(0)
	docInvitee.in_lobbyist = docNomination.en_lobbyist(0)
	docInvitee.in_lobbyistType = docNomination.en_lobbyistType(0)
	
	docInvitee.in_salesFirstname = docNomination.nom_nominator_first(0)
	docInvitee.in_salesLastname = docNomination.nom_nominator_last(0)
	docInvitee.in_salesEmail = Trim(docNomination.nom_nominator_email(0))
	
	'v1 invitee tool fields no longer in v2 invitee tool  SMH 6/27/2013
	'If (docNomination.en_rfpdue(0) = |Yes| Or docNomination.en_rfpsubmit(0) = |Yes|) Then
	'Not in v2
	'If docNomination.en_rfpdue(0) = |Yes| Then		
	'docInvitee.in_tenderOrder = |Yes|
	'Else
	'docInvitee.in_tenderOrder = |No|	
	'End If 
	'docInvitee.in_tenderDetails = docNomination.en_rfpDetail(0)
	'not in v2
	'docInvitee.in_decisionMaker = docNomination.en_decsnMaker(0)
	'docInvitee.in_decisionDetails = docNomination.en_decsnDetail(0)
	
	docInvitee.in_criticalSituation = docNomination.en_critSit(0)
	docInvitee.in_criticalDetails = docNomination.en_critsitDetail(0)
	
	'fields added by SMH that were not previously addressed in this code
	docInvitee.in_comments = docNomination.nom_opp_desc(0)
	docInvitee.in_url = docNomination.nom_companywebsite(0)    'new field 8/1/12
	If docNomination.Hasitem("nom_account_companywebsite") Then '09212017 - Anil
		docInvitee.in_url = docNomination.nom_account_companywebsite(0) 
	End If
	docInvitee.startmonth = docEventProfile.startmonth(0)
	docInvitee.startday = docEventProfile.startday(0)
	docInvitee.startyear = docEventProfile.startyear(0)
	docInvitee.in_importsource = "G01ACXDB601: events\wwe\japan\ASJapan.nsf"
	'Put the amenity number of the regular free guest pass here SMH 7/17/15
	docInvitee.in_packageNumber = docEventProfile.cteba_package_default(0)
	'Added to send GOE's with package 2 for CIF - Anil 03/30/2017
	If (docNomination.en_goe(0) = "Yes" Or docNomination.ad_goe_lookup(0) = "Yes") Then
		docInvitee.in_packageNumber = docEventProfile.cteba_package_default(0)
	End If
	
	'new fields for v2 invitee tool  SMH 6/27/2013
	docInvitee.in_cqVersion = "v2"
	If docNomination.en_rfpsubmit(0) = |Yes| Then
		docInvitee.in_transactionRole = |Yes|
	Else
		docInvitee.in_transactionRole = |No|
	End If
	docInvitee.in_transactionRoleDetails = docNomination.en_rfpdetail(0)
	docInvitee.in_electionCandidate = docNomination.nm_electionCandidate1(0)
	
	'CIF2018 - borowed GRP Nomination logic
	Dim fldName As String
	fldName = "nm_electionCandidate1"
	docInvitee.in_electionCandidate = docNomination.GetItemValue(fldName)(0)
	fldName = "nm_transactionRole1"
	docInvitee.in_transactionRole = docNomination.GetItemValue(fldName)(0)
	fldName = "nm_transactionRoleDetails1"
	If docNomination.HasItem(fldName) Then
		docInvitee.in_transactionRoleDetails = ""'docNomination.GetItemValue(fldName)(0)
	End If
	'start madhu RFP change
	If docNomination.HasItem("nm_transactionRole1") Then
		If docNomination.nm_transactionRole1(0) = "Yes" Then		
			Dim rfpitem As NotesItem
			Set rfpitem = docInvitee.getfirstitem("in_transactionRoleDetails")
			If Not(rfpitem Is Nothing) Then
				If docNomination.HasItem("sc_amount_usdollar")Then		
					If IsNumeric(docNomination.sc_amount_usdollar(0)) <> 0 Then
						Call rfpitem.AppendToTextList(|Opportunity value is US dollars : |+ CStr(docNomination.sc_amount_usdollar(0)))		
					End If		
				End If 
				If docNomination.HasItem("sc_date_closed")Then		
					If docNomination.sc_date_closed(0) <> "" Then
						Call rfpitem.AppendToTextList(|Decision date of the Opportunity : |+ docNomination.sc_date_closed(0))	
					End If		
				End If 
				
				If docNomination.HasItem("nm_transactionroledetails1")Then		
					If docNomination.nm_transactionroledetails1(0) <> "" Then
						Call rfpitem.AppendToTextList(|Role of invitee : |+ docNomination.nm_transactionroledetails1(0))	
					End If		
				End If 
			End If
		End If
	End If
	' End of change to send RFP details - Madhu - 05/19/2017
	'End of CIF2018
	
	
	'Do a compute with form
	Call docInvitee.ComputeWithForm(True, False)
	
	'Save the document
	Call docInvitee.Save(True, False)
	
	'Set the return code
	flgOK = True
	
lblExit:
	
	If (flgOK) Then
		Call Debug(STR_MODULE_NAME & |: Finished. Invitee document updated.|)
	Else
		Call Debug(STR_MODULE_NAME & |: Finished. Invitee document NOT updated.|)		
	End If
	
	flgUpdateInviteeDocument = flgOK
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:flgSendEmail:21:8
%REM
	Function flgSendEmail
	Description:
	Given an event profile, and enrollment or invitation document, an e-mail template and a merge
	generator, use the information from the enrollment or invitation document to send an email using 
	the supplied template.  Optionally save the enrollment or invitation document after sending the 
	e-mail based on the supplied flgSaveAfterSend flag.
	
	Parameters
	-----------------------
	docEventProfile			The event profile.
	doc						An enrollment or invitation document.
	docEmailTemplate		The email template to use.
	myMerger				The merge generator to use.
	flgSaveAfterSend		Whether to save the enrollment or invitation document after sending.
	
	Return Values
	-----------------------
	True if sent OK, False otherwise.
%END REM
Function flgSendEmail(docEventProfile As NotesDocument, doc As NotesDocument, docEmailTemplate As NotesDocument, myMerger As MergeGenerator, flgSaveAfterSend As Boolean) As Boolean
	
	Const STR_MODULE_NAME = |flgSendEmail|
	
	Dim flgOK As Boolean
	Dim strLocale As String
	Dim strEventKey As String
	Dim itemCopyTo As NotesItem	
	Dim itemBlindCopyTo As NotesItem
	Dim docEmail As NotesDocument
	Dim strEmailType As String
	Dim varEmailAddresses As Variant
	
	'Trap errors
	On Error Goto lblError
	
	'Set the default return value
	flgOK = False
	
	'If the locale of the merge generator is not the supplied locale, reload the merge fields with the correct set
	'for the locale of the enrollment or invitation document
	If (doc.DocType(0) = |Invitation|) Then
		strLocale = Cstr(doc.in_Locale(0))
	Else
		strLocale = Cstr(doc.Locale(0))
	End If
	
	If (strLocale <> myMerger.currLocale) Then
		'Instantiate the reference database
		Set g_DbReference = dbGetReferenceDb()
		
		'Set the locale of the merge generator
		myMerger.currLocale = strLocale
		
		'Load the merge field list from reference database and current database
		Call myMerger.LoadFieldListFromReferenceDb(g_dbCurr, g_DbReference)
	End If
	
	'Find the event key
	strEventKey = Cstr(docEventProfile.ep_id(0))
	
	Set itemCopyTo = docEmailTemplate.GetFirstItem("et_CopyTo")
	Set itemBlindCopyTo = docEmailTemplate.GetFirstItem("et_BlindCopyTo")
	
	myMerger.FromAddress = Cstr(docEventProfile.emailadmin(0))
	'myMerger.templateBody = Cstr(docEmailTemplate.et_Text(0))
	'myMerger.templateSubject = Cstr(docEmailTemplate.et_Subject(0))
	
	If (Cstr(g_docDbProfile.dp_EmailMode(0)) = |Test|) Then
		varEmailAddresses = g_docDbProfile.dp_TestModeEmailAddress
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Test].  Sending e-mail to test mode e-mail addresses:|)		
		Forall varEmailAddress In varEmailAddresses
			Call Debug(STR_MODULE_NAME & |: | & Cstr(varEmailAddress))	
		End Forall
		'Blank out the copy to and blind copy to items in test mode
		itemCopyTo.Values = ""
		itemBlindCopyTo.Values = ""
	Else
		varEmailAddresses = Cstr(doc.en_email(0))		
		Call Debug(STR_MODULE_NAME & |: E-mail mode is [Production].  Sending e-mail to e-mail address [| & Cstr(varEmailAddresses) & |].|)					
	End If
	
	'Create the email
	Set docEmail = myMerger.getEMailFromDocument(doc, varEmailAddresses, itemCopyTo.values, itemBlindCopyTo.values, Cstr(docEmailTemplate.et_Format(0)))
	
	If (docEmail Is Nothing) Then 
		
		'Now try sending from the current database
		myMerger.isCreatedOnServer = False
		
		'Create the email
		Set docEmail = myMerger.getEMailFromDocument(doc, varEmailAddresses, itemCopyTo.values, itemBlindCopyTo.values, Cstr(docEmailTemplate.et_Format(0)))
		
		If (docEmail Is Nothing) Then 
			Error ERR_SYSTEM_ERROR, |Unable to create e-mail.|
		Else
			Call docEmail.Send(False)
		End If
		
	Else
		If (myMerger.isCreatedOnServer) Then
			Call docEmail.Save(True, False )	
		Else
			Call docEmail.Send(False)
		End If
		
	End If	
	
	Call Debug(STR_MODULE_NAME & |: E-mail sent.|)	
	
	strEmailType = Cstr(docEmailTemplate.et_Type(0))
	
	Select Case strEmailType
			
		Case |Confirmation|:
			doc.en_DateConfirmationEmailSent = Now()
			
		Case |Reminder|:
			doc.en_DateReminderEmailSent = Now()
			
		Case |Followup|:
			doc.en_DateFollowupEmailSent = Now()
			
		Case |Event Cancellation|:
			doc.en_DateCancellationEmailSent = Now()
			
		Case |Invitation|:
			doc.in_DateInvitationEmailSent = Now()
			
			'For invitations, change the invitation status to 'Invited' and add a timestamp
			doc.in_Status = |Invited|
			doc.in_DateInvited = Now()
			
		Case |Other|:
			doc.en_DateOtherEmailSent = Now()
			
		Case Else
			Error ERR_SYSTEM_ERROR, |An unknown e-mail type [| & strEmailType & |] was supplied to the function.|	
			
	End Select
	
	If (flgSaveAfterSend) Then
		Call doc.Save(True, False)
	End If
	
	'E-mail has been sent
	flgOK = True
	
lblExit:
	
	flgSendEmail = flgOK
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
End Function

'++LotusScript Development Environment:2:1:setupAmenityDetails:1:8
Function setupAmenityDetails(docEventProfile As NotesDocument) As Boolean

	Const STR_MODULE_NAME = |Event profile: setupAmenityDetails|
	
	Dim tmpDoc As NotesDocument
	Dim item As NotesItem
	Dim rtitem As NotesRichTextItem
	Dim strText As String
	Dim ctr As Long, intPOS As Integer, p As Long
	ReDim strPackageDetailGRP(0 To 0) As String	
	Dim item1 As NotesItem
	Dim item2 As NotesItem
	Dim item3 As NotesItem
	Dim item4 As NotesItem
	Dim item5 As NotesItem
	Dim item6 As NotesItem
	Dim item7 As NotesItem
	Dim item8 As NotesItem
	Dim item9 As NotesItem
	'Dim setupAmenityDetails As Boolean
	
	'Trap for errors
	On Error GoTo lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	Set tmpDoc = g_dbCurr.CreateDocument
	
	If docEventProfile.HasItem("package_detail_grp") Then
		Set item = docEventProfile.GetFirstItem("package_detail_grp")
	Else
		setupAmenityDetails = False
		Call Debug(STR_MODULE_NAME & |: No amenity package field.|)
		GoTo lblExit
	End If
	
	'DH - 22 Oct 2014, David Holbrook - Adding routine below for processing 'package_detail_grp' if rich-text field
	Select Case item.Type
	Case 1
			'Rich-text; Note: Use Chr(10) if running on server; Use Chr(13) if running local on Windows
			' Note: The carriage return serves as a 'multi-value' separator.
			' Note: This subroutine always runs on the server, so using Chr(10) is ok.
		Set rtitem = item
		strText = rtitem.GetUnformattedText()
		intPOS = InStr(1, strText, Chr(10))
		If intPOS = 0 And strText <> "" Then
			strPackageDetailGRP(ctr) = strText
		Else
			While intPOS <> 0
				ReDim Preserve strPackageDetailGRP(0 To ctr)
				strPackageDetailGRP(ctr) = Left(strText, intPOS - 1)
				strText = Right(strText, Len(strText) - intPOS)
				ctr = UBound(strPackageDetailGRP) + 1
				intPOS = InStr(1, strText, Chr(10))
				If intPOS = 0 And strText <> "" Then
					ReDim Preserve strPackageDetailGRP(0 To ctr)
					strPackageDetailGRP(ctr) = strText
				End If
			Wend
		End If
	Case 1280
			'Text
		ForAll v In item.Values
			ReDim Preserve strPackageDetailGRP(0 To ctr)
			strPackageDetailGRP(ctr) = v
			ctr = ctr + 1
		End ForAll
	End Select
	
	docEventProfile.strAttendeeTypes = ""
	docEventProfile.strGOE = ""
	docEventProfile.strCountries = ""
	docEventProfile.strGOEType = ""
	docEventProfile.strAmenityValue = ""
	docEventProfile.strAmenityValueUSD = ""
	docEventProfile.strAmenities = ""
	docEventProfile.strDefault = ""	
	docEventProfile.strCountriesUnderClip = ""
	
	Set item1 = docEventProfile.GetFirstItem("strAttendeeTypes")
	Set item2 = docEventProfile.GetFirstItem("strGOE")
	Set item3 = docEventProfile.GetFirstItem("strCountries")
	Set item4 = docEventProfile.GetFirstItem("strGOEType")
	Set item5 = docEventProfile.GetFirstItem("strAmenityValue")
	Set item6 = docEventProfile.GetFirstItem("strAmenityValueUSD")
	Set item7 = docEventProfile.GetFirstItem("strAmenities")
	Set item8 = docEventProfile.GetFirstItem("strDefault")
	Set item9 = docEventProfile.GetFirstItem("strCountriesUnderClip")
	
	For p = 0 To UBound(strPackageDetailGRP)
		tmpDoc.package_detail_grp = strPackageDetailGRP(p)
		
		tmpDoc.AttendeeTypes = Evaluate( |@Word(package_detail_grp ; "~" ; 1)|, tmpDoc)
		tmpDoc.GOE = Evaluate( |@Word(package_detail_grp ; "~" ; 2)|, tmpDoc)
		tmpDoc.Countries = Evaluate( |@Word(package_detail_grp ; "~" ; 3)|, tmpDoc)
		tmpDoc.GOEType = Evaluate( |@Word(package_detail_grp ; "~" ; 4)|, tmpDoc)
		tmpDoc.AmenityValue = Evaluate( |@Word(package_detail_grp ; "~" ; 5)|, tmpDoc)
		tmpDoc.AmenityValueUSD = Evaluate( |@Word(package_detail_grp ; "~" ; 6)|, tmpDoc)
		tmpDoc.Amenities = Evaluate( |@Word(package_detail_grp ; "~" ; 7)|, tmpDoc)
		tmpDoc.Default = Evaluate( |@Word(package_detail_grp ; "~" ; 8)|, tmpDoc)
		tmpDoc.CountriesUnderClip = Evaluate( |@Word(package_detail_grp ; "~" ; 9)|, tmpDoc)
		
		If tmpDoc.AttendeeTypes(0) = "" Then
			Call item1.AppendToTextList(" ")
		Else
			Call item1.AppendToTextList(tmpDoc.AttendeeTypes(0))
		End If
		
		If tmpDoc.GOE(0) = "" Then
			Call item2.AppendToTextList(" ")
		Else
			Call item2.AppendToTextList(tmpDoc.GOE(0))
		End If
		
		If tmpDoc.Countries(0) = "" Then
			Call item3.AppendToTextList(" ")
		Else
			Call item3.AppendToTextList(tmpDoc.Countries(0))
		End If
		
		If tmpDoc.GOEType(0) = "" Then
			Call item4.AppendToTextList(" ")
		Else
			Call item4.AppendToTextList(tmpDoc.GOEType(0))
		End If
		
		If tmpDoc.AmenityValue(0) = "" Then
			Call item5.AppendToTextList(" ")
		Else
			Call item5.AppendToTextList(tmpDoc.AmenityValue(0))
		End If
		
		If tmpDoc.AmenityValueUSD(0) = "" Then
			Call item6.AppendToTextList(" ")
		Else
			Call item6.AppendToTextList(tmpDoc.AmenityValueUSD(0))
		End If
		
		If tmpDoc.Amenities(0) = "" Then
			Call item7.AppendToTextList(" ")
		Else
			Call item7.AppendToTextList(tmpDoc.Amenities(0))
		End If
		
		If tmpDoc.Default(0) = "" Then
			Call item8.AppendToTextList(" ")
		Else
			Call item8.AppendToTextList(tmpDoc.Default(0))
		End If
		
		If tmpDoc.CountriesUnderClip(0) = "" Then
			Call item9.AppendToTextList(" ")
		Else
			Call item9.AppendToTextList(tmpDoc.CountriesUnderClip(0))
		End If
		
	Next
	
	setupAmenityDetails = True
	
lblExit:
	
	If setupAmenityDetails Then
		docEventProfile.setupAmenityDetails = "true"
		Call Debug(STR_MODULE_NAME & |: Loaded amenity details.|)
	Else
		docEventProfile.setupAmenityDetails = "false"
		Call Debug(STR_MODULE_NAME & |: Could NOT load amenity details.|)
	End If
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	Exit Function
	
lblError:
	setupAmenityDetails = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:OpenXPage:5:8
%REM
	Sub OpenXPage
	Description: Comments for Sub
%END REM
Sub OpenXPage(doc As NotesDocument, intPageType As Integer, intEnvironment As Integer, strLocale As String)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given a type of page, an environment and a locale, open the specfied type of page of for the
	'supplied event in the specfied environment.
	'
	'NOTE: This function is designed to be called from an open UI document.
	'
	'Parameters
	'-----------------------
	'doc				The Event profile document or related artifact
	'intPageType		The type of page to open (See (Declarations) for values)
	'intEnvironment		The environment to open the page in (Test or Production) (See (Declarations) for values)
	'strLocale			The locale for the page
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |OpenPage|
	
	Dim strEventID As String
	Dim docEventProfile As NotesDocument
	Dim strURL As String
	Dim ws As New NotesUIWorkspace
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
	'Trap errors
	On Error GoTo lblError
	
	'Based on the document type, find the event key
	strEventID = CStr(doc.ep_id(0))
	
	Call Debug(STR_MODULE_NAME & |: Event ID [| & strEventID & |]  Page type [| & CStr(intPageType) & |]  Environment [| & CStr(intEnvironment) & |]  Locale [| & strLocale & |]|)
	
	Select Case intPageType
			
		Case INT_REGISTRATION_PAGE:
			
			Dim docRegistrationProfile As NotesDocument
			
			Set docRegistrationProfile = docGetRegProfileByBriefIDandLocale(doc,strLocale)
			
			If Not docRegistrationProfile Is Nothing Then
				Select Case intEnvironment
				Case INT_PREVIEW:
					strURL = CStr(g_docDbProfile.dp_PreviewRegURL(0))
					strURL = replaceSubString(strURL, "enrollall?openform", "registration.xsp?open")
				Case INT_LIVE:
					If (CStr(doc.kw_login_type(0)) = |WILogin|) Then
						strURL = CStr(g_docDbProfile.dp_PreLoginURL_WI(0))  ' changed from dp_LiveRegURL_WI, -rws
					Else
						strURL = CStr(g_docDbProfile.dp_LiveRegURL(0))
					End If
					strURL = replaceSubString(strURL, "enrollall?openform", "registration.xsp?open")
				Case Else
					Error ERR_SYSTEM_ERROR, |An unknown environment [| & CStr(intEnvironment) & |] was supplied to the function.|	
			End Select			
				'Mark the registration profile as previewed for QA purposes	
				If (doc.UniversalID = docRegistrationProfile.UniversalID) Then
					doc.isRegistrationPreviewed = "Yes"
					Call doc.Save(True, False)				
				Else
					docRegistrationProfile.isRegistrationPreviewed = "Yes"
					Call docRegistrationProfile.Save(True, False)
				End If
			Else
				Call ShowInfoMsg(|Please first create a registration profile.|)
				GoTo lblExit
			End If		
			
		Case INT_AGENDA_PAGE:
			
			Dim docAgendaContent As NotesDocument
			
			Set docAgendaContent = docGetAgendaByBriefIDandLocale(doc,strLocale)
			
			If Not docAgendaContent Is Nothing Then
				Select Case intEnvironment
				Case INT_PREVIEW:
					strURL = CStr(g_docDbProfile.dp_PreviewAgendaURL(0))
				Case INT_LIVE:
					If (CStr(doc.kw_login_type(0)) = |WILogin|) Then
						strURL = CStr(g_docDbProfile.dp_LiveAgendaURL_WI(0))
					Else
						strURL = CStr(g_docDbProfile.dp_LiveAgendaURL(0)) 
					End If			
				Case Else
					Error ERR_SYSTEM_ERROR, |An unknown environment [| & CStr(intEnvironment) & |] was supplied to the function.|	
			End Select
				'Mark the agenda as previewed for QA purposes
				If (doc.UniversalID = docAgendaContent.UniversalID) Then
					doc.isAgendaPreviewed = "Yes"
					Call doc.Save(True, False)				
				Else
					docAgendaContent.isAgendaPreviewed = "Yes"
					Call docAgendaContent.Save(True, False)
				End If			
			Else
				Call ShowInfoMsg(|Please first create an agenda page.|)
				GoTo lblExit
			End If
			
		Case INT_SPEAKERS_PAGE:
			
			Dim docSpeakers As NotesDocument
			
			Set docSpeakers = docGetSpeakersByBriefIDandLocale(doc,strLocale)
			
			If Not docSpeakers Is Nothing Then
				Select Case intEnvironment
				Case INT_PREVIEW:
					strURL = CStr(g_docDbProfile.dp_PreviewSpeakersURL(0))
				Case INT_LIVE:
					If (CStr(doc.kw_login_type(0)) = |WILogin|) Then
						strURL = CStr(g_docDbProfile.dp_LiveSpeakersURL_WI(0))
					Else
						strURL = CStr(g_docDbProfile.dp_LiveSpeakersURL(0)) 
					End If	
				Case Else
					Error ERR_SYSTEM_ERROR, |An unknown environment [| & CStr(intEnvironment) & |] was supplied to the function.|	
			End Select
				'Mark the Speaker page as previewed for QA purposes
				If (doc.UniversalID = docSpeakers.UniversalID) Then
					doc.isSpeakersPreviewed = "Yes"
					Call doc.Save(True, False)				
				Else
					docSpeakers.isSpeakersPreviewed = "Yes"
					Call docSpeakers.Save(True, False)
				End If				
			Else
				Call ShowInfoMsg(|Please first create a speakers page.|)
				GoTo lblExit			
			End If
			
		Case INT_SPONSORS_PAGE:
			
			Dim docSponsors As NotesDocument
			
			Set docSponsors= docGetSponsorsByBriefIDandLocale(doc,strLocale)
			
			If Not docSponsors Is Nothing Then
				Select Case intEnvironment		
				Case INT_PREVIEW:
					strURL = CStr(g_docDbProfile.dp_PreviewSponsorsURL(0))
				Case INT_LIVE:
					If (CStr(doc.kw_login_type(0)) = |WILogin|) Then
						strURL = CStr(g_docDbProfile.dp_LiveSponsorsURL_WI(0))
					Else
						strURL = CStr(g_docDbProfile.dp_LiveSponsorsURL(0))
					End If
				Case Else
					Error ERR_SYSTEM_ERROR, |An unknown environment [| & CStr(intEnvironment) & |] was supplied to the function.|	
			End Select
				'Mark the Sponsors page as previewed for QA purposes
				If (doc.UniversalID = docSponsors.UniversalID) Then
					doc.isSponsorsPreviewed = "Yes"
					Call doc.Save(True, False)				
				Else
					docSponsors.isSponsorsPreviewed = "Yes"
					Call docSponsors.Save(True, False)
				End If				
			Else
				Call ShowInfoMsg(|Please first create a sponsors page.|)
				GoTo lblExit
			End If
			
		Case INT_NOMINATION_PAGE:
			
			Error ERR_SYSTEM_ERROR, |Code not yet implemented.|	
			
		Case INT_MEETING_REQUEST_PAGE:
			
			Error ERR_SYSTEM_ERROR, |Code not yet implemented.|	
			
		Case INT_OTHER_PAGE:
			
			Set docEventProfile = docGetEventProfileByEventID(strEventID)
			
			strURL = CStr(docEventProfile.ep_OtherURL(0))
			
		Case Else
			
			Error ERR_SYSTEM_ERROR, |An unknown page type [| & CStr(intPageType) & |] was supplied to the function.|	
			
	End Select
	
	'Add the remainder of the URL
	If (intPageType <> INT_OTHER_PAGE) Then
		strURL = strURL & strEventID &  |&locale=| & strLocale
		If (intEnvironment = INT_PREVIEW) Then
			strURL = strURL & |&mode=preview|
		End If
	End If
	
	Call Debug(STR_MODULE_NAME & |: Opening page [| & strURL & |].|)
	
	ws.UrlOpen strURL
	
lblExit:
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:ExportToCSV:1:8
Sub ExportToCSV(strExportFilename As String, collDocuments As NotesDocumentCollection, strTitle As String, arrExportFields() As ExportField, strCharset As String)
	
	Const STR_MODULE_NAME = |ExportToCSV|
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError
	
	Dim s As New NotesSession
	Dim stream As NotesStream	
	Dim intCurrIndex As Integer
	Dim intMaxIndex As Integer
	Dim intLastCol As Integer
	Dim intCurrDoc As Integer
	Dim intTotalDocs As Integer
	Dim varResult As Variant
	Dim strResult As String
	Dim docCurr As NotesDocument
	Dim strColumnTitle As String
	Dim intReply As Integer
	
	intMaxIndex = Ubound(arrExportFields)
	intLastCol = intMaxIndex + 1
	
	intTotalDocs = collDocuments.Count
	
	Set stream = s.CreateStream
	
	If (Not stream.Open(strExportFilename, strCharset)) Then
		Error ERR_SYSTEM_ERROR, |Unable to open CSV export file | & strExportFilename & |.|	
	End If
	
	If stream.IsReadOnly Then
		Call ShowInfoMsg(|The file | & strExportFilename & | cannot be accessed.  Please check whether it is already open and if it is close it.|)
		Goto lblExit
	End If
	
	If (stream.Bytes <> 0) Then
		intReply = intAskQuestion(|The file | & strExportFilename & | already exists.| & Chr$(13) & Chr$(13) & |Do you want to replace its contents with the exported information?|)
		If (intReply <> IDYES) Then
			Goto lblExit
		End If
	End If	
	
	Call stream.Truncate
	
	'Write the title and a blank line so that the format matches that of the Excel format export
	Call stream.WriteText(|"| & strTitle & |"|, EOL_PLATFORM)
	Call stream.WriteText(||, EOL_PLATFORM)	
	
	'Write the column titles
	intCurrIndex = 0
	Forall varExportField In arrExportFields()
		strColumnTitle = varExportField.strLabel
		Call stream.WriteText(|"| & strColumnTitle & |"|)
		If intCurrIndex = intMaxIndex Then
			Call stream.WriteText(||, EOL_PLATFORM)	
		Else
			Call stream.WriteText(|,|)
		End If
		intCurrIndex = intCurrIndex + 1
	End Forall
	
	Set docCurr = collDocuments.GetFirstDocument()
	
	Do While Not docCurr Is Nothing
		
		intCurrDoc = intCurrDoc + 1
		
		Call Debug(STR_MODULE_NAME & |: Exporting document | & Cstr(intCurrDoc) & | of | & Cstr(intTotalDocs) & |...|)
		
		For intCurrIndex = 0 To intMaxIndex 
			
			On Error Goto lblErrorNextField
			
			If arrExportFields(intCurrIndex).strType = |check| Then
				strResult = ""
				If (docCurr.HasItem(arrExportFields(intCurrIndex).strExport)) Then
					strResult = docCurr.GetFirstItem(arrExportFields(intCurrIndex).strExport).Text
				End If
				If(intCurrIndex = g_en_roleIndex And strResult <> "")Then
					strResult = parseRoleField(strResult)
				End If
			Else
				varResult = Evaluate(arrExportFields(intCurrIndex).strExport, docCurr)
				strResult = Cstr(varResult(0))
			End If
			
lblNextField:
			
			On Error Goto lblError
			
			If strResult  = "Select" Or strResult  = "Select one" Then
				strResult = ""
			End If
			
			Call stream.WriteText(|"| & strResult & |"|)
			If intCurrIndex = intMaxIndex Then
				Call stream.WriteText(||, EOL_PLATFORM)	
			Else
				Call stream.WriteText(|,|)
			End If
			
		Next 
		
		Set docCurr = collDocuments.GetNextDocument(docCurr) 
		
	Loop
	
	Call ShowInfoMsg(|The selected enrollment(s) have been exported to | & strExportFilename & |.|)
	Print |The selected enrollment(s) have been exported to | & strExportFilename & |.|
	
lblExit:
	
	Call stream.Close
	
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	If (Not docCurr Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document being exported has UNID [| & docCurr.UniversalID & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Document being exported is Nothing|)
	End If
	
	If (intCurrIndex <= Ubound(arrExportFields)) Then
		Call Debug(STR_MODULE_NAME & |: Array index is [| & Cstr(intCurrIndex) & |]|)
		Call Debug(STR_MODULE_NAME & |: Field being exported is [| & arrExportFields(intCurrIndex).strExport & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Array index is out of bounds.|)
	End If	
	
	Call ShowErrorMsg(|An error occurred when attempting to export the selected enrollment(s).|)
	Print |An error occurred when attempting to export the selected enrollment(s).|
	
	Resume lblExit
	
lblErrorNextField:
	
	strResult = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	
	If (Not docCurr Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document being exported has UNID [| & docCurr.UniversalID & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Document being exported is Nothing|)		
	End If
	
	If (intCurrIndex <= Ubound(arrExportFields)) Then
		Call Debug(STR_MODULE_NAME & |: Array index is [| & Cstr(intCurrIndex) & |]|)
		Call Debug(STR_MODULE_NAME & |: Field being exported is [| & arrExportFields(intCurrIndex).strExport & |]|)
	Else
		Call Debug(STR_MODULE_NAME & |: Array index is out of bounds.|)		
	End If
	
	Resume lblNextField
	
End Sub



'++LotusScript Development Environment:2:1:flgUpdateESBriefWebAddress:1:8
Function flgUpdateESBriefWebAddress(docEventProfile As NotesDocument, flgUpdateUI As Boolean) As Boolean
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event profile, attempt to find the corresponding ES brief and 
	'update the web address related fields in the ES brief.
	'
     'Parameters
     '-----------------------
     'docEventProfile 		The event profile.
	'flgUpdateUI				Whether to update the UI or not. 
	'								(Set to False if calling this function from a back-end agent)		
     '     
     'Return Values
     '-----------------------
     'True if the ES brief was found and updated successfully, False otherwise.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |flgUpdateESBriefWebAddress|
	
	Dim flgOK As Boolean
	Dim strEventID As String
	Dim docESEventBrief As NotesDocument
	Dim strHasWebAddress As String
	Dim flgHasWebAddress As Boolean
	Dim dtNow As New NotesDateTime("")	
	Dim flgUpdateRequired As Boolean
	
	Call Debug(STR_MODULE_NAME & |: Started.|)
	
     'Trap errors
	On Error Goto lblError	
	
	'Set the default return code
	flgOK = False
	
	'Assume that the ES brief does not need updating until we know that is does
	flgUpdateRequired = False
	
	If flgUpdateUI Then
		Print |Checking Event Solution event brief...|	
	End If
	
	'Set the date/time used to timestamp the event profiles
	dtNow.SetNow
	
	'Use the event reference ID in the AS event profile to find the corresponding event brief in ES.  (If unable to find a corresponding brief, write an error to the GRP log, and exit)
	strEventID = Cstr(docEventProfile.ep_id(0))
	
	Set docESEventBrief = docGetESEventBrief(strEventID)
	
	If (docESEventBrief Is Nothing) Then
		Error ERR_SYSTEM_ERROR, |Unable to find ES event brief for event ID [| & strEventID & |].|		
	Else
		Call Debug(STR_MODULE_NAME & |: Found ES event brief for event ID [| & strEventID & |].|)
	End If
	
	'Check the webaddressYN field in the ES brief to see whether it needs to be updated or not
	If (Not docESEventBrief.HasItem(|webaddressYN|)) Then
		flgHasWebAddress = False
	Else
		strHasWebAddress = Cstr(docESEventBrief.webaddressYN(0)) 
		Select Case strHasWebAddress
		Case |WN|, ||:
			flgHasWebAddress = False
		Case |WY|:
			flgHasWebAddress = True
		Case Else
			Error ERR_SYSTEM_ERROR, |An unexpected value [| & strHasWebAddress & |] was found for the 'webaddressYN' field in the ES event brief for event ID [| & strEventID & |].|		
		End Select		
	End If
	
	'If the ES brief is marked as not yet having a web address, (i.e. the value of the 'webaddressYN' field is 'WN' or blank), add the web address
	If (Not flgHasWebAddress) Then
		'Change the value to 'WY'
		docESEventBrief.webaddressYN = |WY|
		'Set the value of the EventWebAddr field in the ES brief to the default URL for the default locale for the event
		'(i.e. If the registration page is the default web page and the default locale is English (United States), set the URL to the English (United States) version of the reg page.
		docESEventBrief.EventWebAddr = strGetDefaultURL(docEventProfile)
		flgUpdateRequired = True
	Else
		'The value is 'WY', i.e. The ES event brief has already been updated to say that there is a web site associated with the event
		
		'Check whether the EventWebAddr field in the ES brief is blank (i.e. The radio button says 'Yes' there is a web site, but the web site URL has not been filled in for some reason)
		
		'If it is, then
		If (Cstr(docESEventBrief.EventWebAddr(0)) = ||) Then	
			'Set the value of the EventWebAddr field in the ES brief to the default URL for the default locale for the event
			'(i.e. If the registration page is the default web page and the default locale is English (United States), set the URL to the English (United States) version of the reg page.
			docESEventBrief.EventWebAddr = strGetDefaultURL(docEventProfile)	
			flgUpdateRequired = True
		End If
	End If
	
	If (docESEventBrief.r_regsystem(0) <> |Attendee Solution|) Then
		'Set the value of the r_regsystem field in the ES brief to 'Attendee Solutions'
		docESEventBrief.r_regsystem = |Attendee Solution|
		flgUpdateRequired = True		
	End If
	
	If (docESEventBrief.AttendeeSolutionStatus(0) <> |AS Used|) Then
		'Set the value of the r_regsystem field in the ES brief to 'Attendee Solutions'
		docESEventBrief.AttendeeSolutionStatus = |AS Used|
		flgUpdateRequired = True
	End If
	
	'Save the ES brief if necessary and update the AS event profile with a timestamp for the update
	If (flgUpdateRequired) Then
		'Added by TV 7/9/09 to timestamp the ES brief when it has been updated
		'Set the ASTimestamp field in the ES brief to the current date/time
		Set docESEventBrief.ASTimestamp = dtNow
		Call docESEventBrief.Save(True, False)
		'Write a message to the AS log that the ES brief was updated.
		Call Debug(STR_MODULE_NAME & |: ES event brief for event ID [| & strEventID & |] updated.|)	
		'Set the ep_DateESWebAddressUpdated field in the GRP event profile to the current date/time.
		Set docEventProfile.ep_DateESWebAddressUpdated = dtNow
		'Save the GRP event profile.	
		Call docEventProfile.Save(True, False)		
	Else
		Call Debug(STR_MODULE_NAME & |: ES event brief for event ID [| & strEventID & |] does not need be to updated.|)	
	End If
	
	flgOK = True
	
lblExit:
	
	flgUpdateESBriefWebAddress = flgOK
	
	If (flgOK) Then
		If flgUpdateUI Then
			If (flgUpdateRequired) Then			
				Print |The Event Solution event brief was updated.|	
			Else
				Print |The Event Solution event brief did not need to be updated.|	
			End If
		End If
	Else
		If flgUpdateUI Then
			Print |Unable to update Event Solution event brief.|	
		End If		
		Call Debug(STR_MODULE_NAME & |: Finished.  Unable to update ES event brief web address.|)	
	End If
	
	Exit Function
	
lblError:
	
	flgOK = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:2:CopyFromDocument:1:8
Sub CopyFromDocument(docFrom As NotesDocument, strFromFieldName As String, docTo As NotesDocument, strToFieldName As String)
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Copy the contents of the named field in the supplied locale profile to the 
	'named field in the supplied locale settings document.
	'
     'Parameters
     '-----------------------
	'docFrom 						The document to copy the fields from
	'strFromFieldName		The name of the field to copy from
	'docTo	 						The document to copy the fields to
	'strToFieldName			The name of the field to copy to	
     '     
     'Return Values
     '-----------------------
     'None.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |CopyFromDocument|
	
	'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Copy from [| & strFromFieldName & |] to [| & strToFieldName & |] Value [| & docFrom.GetFirstItem(strFromFieldName).Values(0) & |].|)
	
	Call docTo.CopyItem(docFrom.GetFirstItem(strFromFieldName), strToFieldName)
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:2:CreateTableThreeColumnsVer1_1:6:8
%REM
	Sub CreateTableThreeColumns
	Description: Version 1.1.
%END REM
Sub CreateTableThreeColumnsVer1_1(str_HTML As String, doc_RegTrackProfile As NotesDocument, _
	g_doc_regProfile As NotesDocument, str_d As String, str_s As String, str_sCol1 As String)
	
	Dim item As NotesItem
	Dim str_tc As String
	Dim str_label As String
	Dim str_desc As String
	Dim str_ts As String
	Dim str_tLabel As String
	Dim str_Day As String
	Dim str_Field As String
	
	If g_doc_regProfile.rp_DayText(0) = "" Then str_Day = "Day" Else str_Day = g_doc_regProfile.rp_DayText(0)
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "1", str_sCol1, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "1" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	' Track (1 through 3) labels
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
		str_HTML = str_HTML & |<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>|
		Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
		If Not item Is Nothing Then
			str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
		End If
		str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)
		str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>
</div>| & Chr(13)
		str_HTML = str_HTML & |</div>|
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-container-body ibm-three-column">
<div class="ibm-column ibm-list-container ibm-first">| & Chr(13)
	
	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t1s| & str_sCol1 & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "1" & "s" & str_sCol1 & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "2", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "2" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-second">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t2s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "2" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div>|
	
	str_tc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "tc")
	str_label = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "label")
	str_ts = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "ts")
	str_desc = GetTrackFieldItemStr(doc_RegTrackProfile, "3", str_s, "desc")
	
	Set item = doc_RegTrackProfile.GetFirstItem("rp_t" + "3" + "label")
	If Not item Is Nothing Then
		str_tLabel = strGetNonBreakSpace(Cstr(item.Values(0)))
	End If
	
	str_HTML = str_HTML & |
<div class="ibm-column ibm-list-container ibm-third">| & Chr(13)

	If str_sCol1 = "1" Then
		'str_HTML = str_HTML & |<h3>| & str_tLabel & |</h3>| & Chr(13)
	End If
	
	str_HTML = str_HTML & |<p>|
	
	str_Field = |en_d| & str_d & |t3s| & Cstr(Cint(str_s)+(Cint(str_sCol1)-Cint(str_s))) & |tc|
	If doc_RegTrackProfile.GetItemValue("rp_t" & "3" & "s" & str_s & "status")(0) = "Closed" Then
		str_HTML = str_HTML & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	Else
		str_HTML = str_HTML & |<input type="checkbox" id="| & str_Field & |" name="| & str_Field & |" value="| & _
			str_tc & |" onclick="setField('| & str_Field & |')" />| & str_label & _
			Chr(13) & |<br />| & _
			str_ts & Chr(13) & |<br /><br />| & _
			str_desc
	End If
	
	str_HTML = str_HTML & |</p>| & Chr(13) & |</div><div class="ibm-rule" style="margin-left:20px;margin-right:20px"><hr></div>|
	
	' Close the body section
	str_HTML = str_HTML + |
</div>| & Chr(13)
	
End Sub

'++LotusScript Development Environment:2:2:GetCTEBAInfo:1:8
Sub GetCTEBAInfo(docEventProfile As NotesDocument, docCurr As NotesDocument)
	'------------------------------------------------------------------------------------------------------
	'Description
	'------------------
	'Given an event profile and a handle to a registration form that is being opened
	'via the web, load any info needed to support CTEBA functionality.
	'
	'The following flags are used to allow co-existence with pre-CTEBA event profiles and to configure which sections
	'are displayed on the registration form.
	'
	'	EnableCTEBA				Will be set to "1" if CTEBA is enabled in both the canister profile and the event profile.		
	'	ShowGOE					Will be set to "1" if the 'Include GOE self identification question' option is enabled in the event profile.
	'	ShowLobbyist			Will be Set To "1" if the 'Include lobbyist question' option is enabled in the event profile.
	'	ShowAmenities			Will be Set To "1" if the 'Include amenities section' option is enabled in the event profile.	
	'	HideAmenitiesForNonGOE	Will be Set To "1" if the cteba_hide_nongoe_text field is 'Yes' in the event profile.		
	'
	'Parameters
	'-----------------------
	'docEventProfile 			The event profile
	'docCurr					The registration form
	'     
	'Return Values
	'-----------------------
	'None.
	'------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |GetCTEBAInfo|
	
	'Trap errors
	On Error Goto lblError
	
	docCurr.EnableCTEBA = |0|		
	docCurr.ShowGOE = |0|	
	docCurr.ShowLobbyist = |0|		
	docCurr.ShowAmenities = |0|		
	docCurr.HideAmenitiesForNonGOE = |0|	
	
	If (docEventProfile.HasItem(|ep_ShowCTEBA|)) Then
		
		'Check whether CTEBA is enabled for both the canister and the event
		'AJ 05/29/2012 - Added check for eventtype equal to customer to allow internal events in CA canister
		If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And Ucase(docEventProfile.eventtype(0)) = |CUSTOMER|) Then
			docCurr.EnableCTEBA = |1|
		End If		
		
		'Check whether the GOE question should be shown
		If (docEventProfile.HasItem(|ep_CTEBAIncludeGOE|)) Then
			If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And docEventProfile.ep_CTEBAIncludeGOE(0) = |Yes|) Then
				'Check that the GOE answer values have actually been filled in
				If (docCurr.lc_GOEValues(0) <> ||) Then
					'Only show the GOE question if all of this is true
					docCurr.ShowGOE = |1|
				End If
			End If
		End If
		
		'Check whether the lobbyist question should be shown
		If (docEventProfile.HasItem(|ep_CTEBAIncludeLobbyist|)) Then
			If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And docEventProfile.ep_CTEBAIncludeLobbyist(0) = |Yes|) Then
				'Check that the lobbyist answer values have actually been filled in
				If (docCurr.lc_LobbyistValues(0) <> ||) Then
					'Only show the lobbyist question if all of this is true
					docCurr.ShowLobbyist = |1|
				End If
			End If
		End If			
		
		'Check whether the amenities section should be shown
		If (docEventProfile.HasItem(|ep_CTEBAIncludePaymentOptions|)) Then
			If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And docEventProfile.ep_CTEBAIncludePaymentOptions(0) = |Yes|) Then
				'Only show the amenities section if all of this is true 
				docCurr.ShowAmenities = |1|
				'Load the list of available amenity packages
				docCurr.AvailablePackages = docEventProfile.ep_AvailablePackages
			End If
		End If
		
		'Added by TV Aug 01 2011 -  Check whether the amenities section should be hidden for Non-GOE registrants
		If (docEventProfile.HasItem(|cteba_hide_nongoe_text|)) Then
			If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And docEventProfile.cteba_hide_nongoe_text(0) = |Yes|) Then
				docCurr.HideAmenitiesForNonGOE = |1|
			End If
		End If		
		
		'Added by TV Aug 01 2011 Check whether this is an Invoice Only event
		If (docEventProfile.HasItem(|cteba_invoiceonly|)) Then
			If (g_docDbProfile.dp_EnableCTEBA(0) = |Yes| And docEventProfile.ep_ShowCTEBA(0) = 1 And docEventProfile.cteba_invoiceonly(0) = |Yes|) Then
				docCurr.InvoiceOnly = |1|
			End If
		End If				
		
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	
	Call Debug(STR_MODULE_NAME    & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:docGetESEventBrief:1:8
Function docGetESEventBrief(strEventID As String) As NotesDocument
     '------------------------------------------------------------------------------------------------------
     'Description
     '------------------
     'Given an event ID, check whether an event brief exists in the Event
	'Briefs database for the specified event ID.
	'If one does, return a handle to it, otherwise return Nothing.
     '
     'Parameters
     '----------------
     'strEventID					The event ID to check.
	'
     'Return Value
     '-------------------
     'If anevent brief exists for the event ID the event brief is returned.
	'Otherwise Nothing is returned.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |docGetESEventBrief|
	
	Const STR_LOOKUP_VIEW_ALIAS = |lookupreferenceid2|
	
	Dim strKey As String
	Dim view As NotesView
	Dim docEventBrief As NotesDocument
	
     'Trap errors
	On Error Goto lblError
	
	Call Debug(STR_MODULE_NAME & |: Started.  Checking whether event brief exists for event ID [| & strEventID & |]|) 
	
	'Open the Event Solution database
	Set g_dbEventBriefs = dbGetEventBriefsDb()	
	
	'Find the lookup view
	Set view = g_dbEventBriefs.GetView(STR_LOOKUP_VIEW_ALIAS)
	
	'Build a key from the supplied email address
	strKey = strEventID
	
	'Attempt to find the document in the view
	Call Debug(STR_MODULE_NAME & |: Searching view [| & STR_LOOKUP_VIEW_ALIAS & |] for document with key [| & strKey & |].|) 
	
	Set docEventBrief = view.GetDocumentByKey(strKey, True)
	
	If (Not docEventBrief Is Nothing) Then
		Call Debug(STR_MODULE_NAME & |: Document found.|) 
	Else
		Call Debug(STR_MODULE_NAME & |: Document NOT found.|) 
	End If
	
lblExit:
	
	'Set the return values
	Call Debug(STR_MODULE_NAME & |: Finished.|) 
	
	Set docGetESEventBrief = docEventBrief
	
	Exit Function
	
lblError:
	
	Set docEventBrief = Nothing
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function