'++LotusScript Development Environment:2:5:(Options):0:66
Option Public
Option Explicit

Use "Debug"

%REM
Non-specific project or application helper modules only.  Can be used in any database.

Please check with Randall before you modify.
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub Terminate()
Declare Function getDatabase(dbName As String, server As String, repID As String, continue As Boolean) As NotesDatabase
Declare Function strRemoveNewlines(strInput As String, continue As Boolean) As String
Declare Function strPrefixWithZero(strInput As String, continue As Boolean) As String
Declare Function strFormatDate(strMonth As String, strDay As String, strYear As String, continue As Boolean) As String
Declare Sub appendTextToStrField(doc As NotesDocument, strIdentityName As String, fieldName As String, strMsg As String, continue As Boolean)
Declare Function replaceSubString(sourceStr As String, fromStr As String, toString As String) As String

'++LotusScript Development Environment:2:5:(Declarations):0:2
%REM
	Pleaes check with Randall before adding anything here.
%END REM

Const STR_UTIL_LIBRARY_NAME = |utility|
Const ERR_UTIL_GENERIC_ERROR = 1001

'++LotusScript Development Environment:2:2:Terminate:1:2
Sub Terminate()
	
End Sub


'++LotusScript Development Environment:2:1:getDatabase:1:8
Function getDatabase(dbName As String, server As String, repID As String, continue As Boolean) As NotesDatabase
%REM
Returns valid GRP database
Parameters:
	server:  string, parameter 1 of OpenByReplicaID below
	repID:  string, parameter 2 of OpenByReplicaID below
	continue:  Boolean, set to false on error
%END REM
	Const STR_MODULE_NAME = |Script Library: | + STR_UTIL_LIBRARY_NAME + |: getDatabase|
	Call Debug(STR_MODULE_NAME & |: Started.|)
	On Error Goto lblError
	If(Not continue) Then
		Call Debug(STR_MODULE_NAME & | A previous process caused an error.  Will exit module.|)
		Goto lblExit
	End If

	Dim db As New NotesDatabase( "", "" )
	Dim msg As String
	
	If(dbName = "") Then dbName = "Requested"
	'MsgBox "dbName: "+ dbName + ", server: " + server + ", repID: " + repID
	If Not db.OpenByReplicaID( Trim(server), Trim(repID) ) Then
		msg = |Unable to find | + dbName  + | Database.| + | Server: | + server
		Error ERR_UTIL_GENERIC_ERROR, msg
		Goto lblExit
	Else
		Call Debug(STR_MODULE_NAME & |:  opened | & dbName & | Database.|)
	End If
	
	Set getDatabase = db
	
lblExit:
	Call Debug(STR_MODULE_NAME & |: Finished.|)
	Exit Function
	
lblError:
	Call Debug ( |dbName: | + dbName + |,  Server: | + server + |,  repID: | + repID + |,  continue: | + Cstr(continue) )
	msg = STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl
	Call Debug( msg )
	Call LogError( msg )
	continue = False	
	'Msgbox msg,, "Error!"
	Resume lblExit	
End Function

'++LotusScript Development Environment:2:1:strRemoveNewlines:1:8
Function strRemoveNewlines(strInput As String, continue As Boolean) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Remove ASCII 10 and 13 characters from the supplied string
	'
     'Parameters
     '-----------------------
     'strInput				The input string.
	' continue			Boolean, set to false on error, calling program can use or not
     '     
     'Return Values
     '-----------------------
     'The input string with ASCII 10 and 13 characters removed.
     '------------------------------------------------------------------------------------------------------   
	Const STR_MODULE_NAME = |Script Library: | + STR_UTIL_LIBRARY_NAME + |: strRemoveNewlines|
	On Error Goto lblError
	
	Dim strOutput As String
	Dim intCurrChar As Integer
	Dim strCurrChar As String
	
	'Initialize the return value
	strOutput = ""
	
	If (Instr(strInput, Chr$(13)) > 0 Or Instr(strInput, Chr$(10)) > 0) Then
		For intCurrChar = 1 To Len(strInput)
			strCurrChar = Mid$(strInput, intCurrChar, 1)
			If strCurrChar <> Chr$(13) And strCurrChar <> Chr$(10) Then
				strOutput = strOutput & strCurrChar
			End If		
		Next
	Else
		strOutput = strInput
	End If
	
lblExit:
	'Set the return value	
	strRemoveNewlines = strOutput
	Exit Function
	
lblError:
	continue = False
	'If an error occurs just return the original string
	strOutput = strInput
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Function

'++LotusScript Development Environment:2:1:strPrefixWithZero:1:8
Function strPrefixWithZero(strInput As String, continue As Boolean) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'If the supplied string has only one character, prefix it with a "0".
	'
     'Parameters
     '-----------------------
     'strInput				The input string.
	' continue 			Boolean, set to false on error, calling agent can use it or not, if not needed, pass in either.
     '     
     'Return Values
     '-----------------------
     'The input string prefixed with a "0" if necessary.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |Script Library: | + STR_UTIL_LIBRARY_NAME + |: strPrefixWithZero|
	
	Dim strOutput As String
	Dim msg As String
	
	'Trap errors
	On Error Goto lblError
	
	If (Len(strInput) = 1) Then
		strOutput = "0" & strInput
	Else
		strOutput = strInput
	End If
	
lblExit:
	strPrefixWithZero = strOutput
	Exit Function
	
lblError:
	continue = False
	strOutput = ||
	msg = STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl
	Call Debug(msg)
	Call LogError(msg)
'Msgbox msg,,"Error"
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:1:strFormatDate:1:8
Function strFormatDate(strMonth As String, strDay As String, strYear As String, continue As Boolean) As String
	'------------------------------------------------------------------------------------------------------
     'Description
     '------------------
	'Given a month, day and year, retunr a string of the format mm/dd/yyyy.
	'
     'Parameters
     '-----------------------
     'strMonth				The month (Assumed to be a valid value)
     'strDay					The day (Assumed to be a valid value)
     'strYear					The year (Assumed to be a valid value)	
	' continue 				Boolean, set to false on error, calling agent can use it or not, if not needed, pass in either.
     '     
     'Return Values
     '-----------------------
     'The formatted date.
     '------------------------------------------------------------------------------------------------------   
	
	Const STR_MODULE_NAME = |Script Library: | + STR_UTIL_LIBRARY_NAME + |: strFormatDate|
	
	Dim strOutput As String
	
	'Trap errors
	On Error Goto lblError
	
	strOutput = strPrefixWithZero(strMonth, continue) & |/| & strPrefixWithZero(strDay, continue) & |/| & strPrefixWithZero(strYear, continue)
	
lblExit:
	strFormatDate = strOutput
	Exit Function
	
lblError:
	continue = False
	strOutput = ||
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit	
	
End Function

'++LotusScript Development Environment:2:2:appendTextToStrField:1:8
Sub appendTextToStrField(doc As NotesDocument, strIdentityName As String, fieldName As String, strMsg As String, continue As Boolean)
%REM
	'------------------------------------------------------------------------------------------------------
     'Description:  Creates and writes OR appends text to field on a NotesDocument
	'
     'Parameters
     '-----------------------
	doc						NotesDocument to contain or already containing [fieldName]
	strIdentityName 		User or Other (System) name to show with the message.
	fieldName				String, name of field to write to / create.   i.e. c_audit
	strMsg					The message to write to the [fieldName]  field.
	continue				Boolean, set to false on error	

     'Return Values		None
%END REM
	Const STR_MODULE_NAME = |Script Library: | + STR_UTIL_LIBRARY_NAME + |: writeStrField|
	'Trap errors
	On Error Goto lblError
	
	Dim item As NotesItem
	Dim strNow As String
	
	strNow = Ucase$(Format$(Now(), "mm/dd/yyyy hh:mm:ss AM/PM"))
	
	If (doc.HasItem(fieldName)) Then
		Set item = doc.GetFirstItem(fieldName)
		Call item.AppendToTextList(strIdentityName & | - | & strNow & |: | & strMsg)	
	Else
		Set item = doc.ReplaceItemValue(fieldName, strIdentityName & | - | & strNow & |: | & strMsg)
	End If
	
lblExit:
	
	Exit Sub
	
lblError:
	continue = False
	Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
	Resume lblExit
	
End Sub

'++LotusScript Development Environment:2:1:replaceSubString:1:8
Function replaceSubString(sourceStr As String, fromStr As String, toString As String) As String
	replaceSubString = Join(Split(sourceStr,fromStr),toString)
End Function