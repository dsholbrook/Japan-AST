'++LotusScript Development Environment:2:5:(Options):0:66
'
' BluePages LotusScript API v3.0.2
'
' Licensed Materials - Property of IBM
' (C) Copyright IBM Corporation 1998-2009. All Rights Reserved.
' US Government Users Restricted Rights - Use, duplication, or 
' disclosure restricted by GSA ADP Contract with IBM Corporation.
'
' This LotusScript library contains classes that allow LotusScript programs 
' to retrieve information from the BluePages directory over the IBM internal
' network. The library consists of eight classes:
'
'    BluePages (public)
'    BPResults (public)
'    SLAPHAPIResults (public)
'    LDAPEntry (public)
'    LDAPAttribute (public)
'    BPEnumerator (private)
'    BPColumn (private)
'    BPStatus (private)
'    
' BluePages LotusScript API is part of a family of APIs that also includes 
' server-side APIs, Web Server API and Standalone LDAP HTTP API (SLAPHAPI),
' and a Java client API. For more information, please see the "Using BluePages 
' API & Samples" document stored under the "Resources" in this database.
'
' Enterprise Directory Team
' IBM Global Services
' edirect@us.ibm.com
'
' Last updated on July 18, 2009.
'

Option Public
Option Declare

'++LotusScript Development Environment:2:5:(Forward):0:1

'++LotusScript Development Environment:2:5:(Declarations):0:2
'
' BluePages LotusScript API v3.0.2
'
' Licensed Materials - Property of IBM
' (C) Copyright IBM Corporation 1998-2009. All Rights Reserved.
' US Government Users Restricted Rights - Use, duplication, or 
' disclosure restricted by GSA ADP Contract with IBM Corporation.
'
' This LotusScript library contains classes that allow LotusScript programs 
' to retrieve information from the BluePages directory over the IBM internal
' network. The library consists of eight classes:
'
'    BluePages (public)
'    BPResults (public)
'    SLAPHAPIResults (public)
'    LDAPEntry (public)
'    LDAPAttribute (public)
'    BPEnumerator (private)
'    BPColumn (private)
'    BPStatus (private)
'    
' BluePages LotusScript API is part of a family of APIs that also includes 
' server-side APIs, Web Server API and Standalone LDAP HTTP API (SLAPHAPI),
' and a Java client API. For more information, please see the "Using BluePages 
' API & Samples" document stored under the "Resources" in this database.
'
' Enterprise Directory Team
' IBM Global Services
' edirect@us.ibm.com
'
' Last updated on July 18, 2009.
'

' --------------------------------------------------------------------------------

' 
' The BluePages class invokes BluePages Web Server API functions and SLAPHAPI 
' search filters using the Notes Web Retriever facility. The data returned from
' BluePages is returned to the calling programs as either BPResults objects 
' (person-oriented lookups) or String Lists (utility lookups). SLAPHAPI search
' results are returned as SLAPHAPIResults objects which contain an array of
' LDAPEntry objects.
'
Class BluePages
	Private webDb As NotesDatabase	' The local client's Web Retriever database.
	Private webDBOpen As Integer		' Set to true if Web Retriever opens.
	Private locatorURL As String		' URL for accessing API Locator, for API dictionary.
	Private urlList List As String	' A dictionary of URLs, keyed by command names.	
	Private listInPlace As Integer	' Flag to determine if API dictionary is loaded.
	Private statusCode As Integer      ' Integer code to indicate the status.
	Private errorMessage As String     ' Error message (if any) to indicate the status.
	
	' 
	' Constructs a new BluePages object with the specified URL for the Web Server
	' API Locator. Opens the Notes Web Navigator to be used to retrieve outputs
	' from URLs.
	'
	Sub New(locatorURL As String)
		' Default API Locator:
		'
		'	http://bluepages.ibm.com/BpHttpApisv3/apilocator
		'		
		Me.locatorURL = locatorURL
		
		Me.listInPlace = False 
		
		Set Me.webDb = New NotesDatabase("", "")
		If Not Me.webDb.OpenURLDb Then   
			' On Notes client, false if Open/Retrieve Pages is "from
			' Notes workstation" and Web Navigator Database is
			' blank or if Open/Retrieve Pages is "no retrievals" and
			' Web Navigator Database is blank or nonexistent..
			' Messagebox "Error: Configuration for Web Navigator is incorrect", , "BluePages Script Library"
			Me.statusCode = 1
			Me.errorMessage = "Unexpected error occurred due to invalid Web Navigator configuration."			
			Me.webDBOpen = False
		Else
			Me.statusCode = 0
			Me.errorMessage = ""
			Me.webDBOpen = True
		End If		
	End Sub
	
	
	'
	' Destructor: When the memory allocated for the BluePages objects is released,
	' the object created for the local Web Retriever database will be deallocated.
	'
	Sub Delete()
		Set Me.webDb = Nothing
		Erase Me.urlList
		
	End Sub
	
	
	' 
	' Retrieves the status code that may be set in the constructor or other 
	' methods.
	'	
	Function GetReturnCode() As Integer
		GetReturnCode = Me.statusCode
	End Function
	
	
	' 
	' Retrieves the error message that may be set in the constructor or other 
	' methods.
	'	
	Function GetErrorMessage() As String
		GetErrorMessage = Me.errorMessage
	End Function
	
	
	' 
	' Retrieves the Boolean flag that determines whether the opening of the Web 
	' Navigator database was successful or not.
	'	
	Function IsOpen() As Integer
		IsOpen = Me.webDBOpen		
	End Function
	
	'	
	' Returns a SLAPHAPIResults object containing an array of LDAPEntry objects each
	' of which represents an LDAP entry retrieved from BluePages after executing a 
	' SLAPHAPI search. The first parameter for this function represents the search
	' filter (specified according to the SLAPHAPI syntax definitions) to be executed.
	' The second parameter represents an array of LDAP attribute names which will be 
	' retrieved from BluePages. If the array is empty, all attributes are retrieved.
	'	
	Function CallSLAPHAPI(searchFilter As String, attributes As Variant) As SLAPHAPIResults
		Set CallSLAPHAPI = SLAPHAPI(searchFilter, "", attributes)
	End Function
	
	'	
	' Returns a SLAPHAPIResults object containing an array of LDAPEntry objects each
	' of which represents an LDAP entry retrieved from BluePages after executing a 
	' SLAPHAPI search. The first parameter for this function represents the search
	' filter (specified according to the SLAPHAPI syntax definitions) to be executed.
	' The second parameter is a String that may contain comma delimited search parameters
	' for the SLAPHAPI search being executed. Please see the SLAPHAPI document for 
	' more details on search parameters. The third parameter represents an array of LDAP 
     ' attribute names which will be retrieved from BluePages. If the array is empty, all 
     ' attributes are retrieved.
	'	
	Function SLAPHAPI(searchFilter As String, searchParms As String, attributes As Variant) As SLAPHAPIResults
		Dim ldAttributes As String
		
		ldAttributes = ""
		
		If Isarray(attributes) Then
			Dim i As Long           ' [3.0.2]
			ldAttributes = "?"
			For i = Lbound(attributes) To Ubound(attributes)
				If Trim(attributes(i)) <> "" Then
					ldAttributes = ldAttributes & URLEncode(attributes(i)) & "&"					
				End If				
			Next
		End If
		
		Dim sp As String 
		sp = ".list"
		
		If searchParms <> "" Then
			sp = sp & "," & searchParms
		End If
		
		sp = sp & "/bytext"
		
		Set SLAPHAPI = GetSLAPHAPIResults(searchFilter & sp  & ldAttributes)		
	End Function
	
	
	'
     ' ========================= Person Lookup Methods =========================
     ' This section contains methods which return person-oriented data. Each 
	' method returns a BPResults object, even if the query fails.  So, calling
	' programs can depend on the methods Succeeded() and rows() in the returned
	' BPResults object. 
	' =========================================================================
	'
	
	' 
	' Returns a BPResults object representing the BluePages data for the person
	' who is identified with the specified CNUM (serial number + country code)
	' 
	Function GetPersonByCnum(cnum As String) As BPResults
		Set GetPersonByCnum = GetBPResults("BYCNUM", cnum)		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons
	' who are identified with the specified serial number.
	' 
	Function GetPersonsBySerial(serial As String) As BPResults
		Set GetPersonsBySerial = GetBPResults("BYSERIAL", serial)		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the person
	' who is identified with the specified serial Internet e-mail address.
	' 
	Function GetPersonsByInternetAddr(emailAddr As String) As BPResults
		Set GetPersonsByInternetAddr = GetBPResults("BYINTERNETADDR", emailAddr)		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons
	' who are identified with the specified name (fully or partially). Wildcard 
	' characters in the name should be escaped to conform to our documentation, 
	' but users may have previously taken advantage of this bug, so continue to 
	' let wildcards through as a courtesy.
	' 	
	Function GetPersonsByName(template As String) As BPResults
		Set GetPersonsByName = GetBPResults("ALLBYNAME", template & "%")		
	End Function
	
	
	' 
	' Returns a BPResults object representing a light set of the BluePages data 
	' for the persons who are identified with the specified name (fully or 
	' partially). Wildcard characters in the name should be escaped to conform 
	' to our documentation, but users may have previously taken advantage of 
	' this bug, so continue to let wildcards through as a courtesy.
	' 	
	Function GetPersonsByNameLite(template As String) As BPResults
		Set GetPersonsByNameLite = GetBPResults("ALLBYNAMELITE", template & "%")		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons 
	' who are identified with the specified name, which is parsed appropriately 
     ' by the corresponding Web Server API function to obtain last name, and first
	' names which may be delimited by a comma or spaces.
	' 	
	Function GetPersonsByNameFuzzy(template As String) As BPResults
		Set GetPersonsByNameFuzzy = GetBPResults("ALLBYNAMEFUZZY", template)
	End Function
	
	
	' 
	' Returns a BPResults object representing a light set of the BluePages data 
	' for the persons who are identified with the specified name, which is parsed 
	' appropriately by the corresponding Web Server API function to obtain last 
	' name, and first names which may be delimited by a comma or spaces.
	' 	
	Function GetPersonsByNameFuzzyLite(template As String) As BPResults
		Set GetPersonsByNameFuzzyLite = GetBPResults("ALLBYNAMEFUZZYLITE", template)
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons 
	' who are identified with the specified Lotus Notes ID (fully or partially). 
	' Wildcard characters in the name should be escaped to conform to our 
	' documentation, but users may have previously taken advantage of this bug, 
	' so continue to let wildcards through as a courtesy.
	' 	
	Function GetPersonsByNotesID(template As String) As BPResults
		Set GetPersonsByNotesID = GetBPResults("ALLBYNOTESID", template & "%")		
	End Function
	
	
	' 
	' Returns a BPResults object representing a light set of the BluePages data 
	' for the persons who are identified with the specified Lotus Notes ID (fully 
	' or partially). Wildcard characters in the name should be escaped to conform 
	' to our documentation, but users may have previously taken advantage of this 
	' bug, so continue to let wildcards through as a courtesy.
	' 	
	Function GetPersonsByNotesIDLite(template As String) As BPResults
		Set GetPersonsByNotesIDLite = GetBPResults("ALLBYNOTESIDLITE", template & "%")		
	End Function
	
	
	' 
	' Returns a BPResults object representing a light set of the BluePages data 
	' for the current Lotus Notes user who is running this method.
	' 	
	Function GetCurrentUser() As BPResults
		Dim session As New NotesSession
		Set GetCurrentUser = Me.GetPersonsByNotesID(session.EffectiveUserName)		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons 
	' who report to the manager with the specified CNUM. 
	' 
	Function GetDirectReportsOf(cnum As String) As BPResults
		Set GetDirectReportsOf = GetBPResults("DIRECTREPORTSOF", cnum)		
	End Function
	
	
	' 
	' Returns a BPResults object representing a light set of the BluePages data 
     ' for the persons who report to the manager with the specified CNUM. 
	' 
	Function GetDirectReportsOfLite(cnum As String) As BPResults
		Set GetDirectReportsOfLite = GetBPResults("DIRECTREPORTSOFLITE", cnum)		
	End Function
	
	
	' 
	' Returns a BPResults object representing the BluePages data for the persons
	' found in the manager chain of the person whose CNUM is specified. 
	' 
	Function GetManagersOf(cnum As String) As BPResults
		Set GetManagersOf = GetBPResults("MANAGERCHAINFOR", cnum)		
	End Function
	
	
	'
	' ===================== Utility Table Lookup Methods ======================
     ' This section contains methods which return non-person-oriented data. Each 
	' method returns a "List of Strings" that corresponds to the first row of
	' of the results table constructed for the BluePages data retrieved. 
	' =========================================================================
	'
	
	'
	' Returns a List of Strings each of which corresponds to a country related 
	' data such as country code, ISO country code, and country name.
	'
	Function GetCountryCode(code As String) As Variant
		Dim bpr As BPResults
		
		Set bpr = GetBPResults("CCODES", code)
		
		' Return a List, or Nothing..
		If bpr.Succeeded() And bpr.Rows() > 0 Then 
			GetCountryCode = bpr.GetFirstRow()
		End If		
	End Function
	
	
	'
	' Returns a List of Strings each of which corresponds to an IBM department
	' related data such as department name and department code.
	'
	Function GetDeptData(divNum As String, deptID As String) As Variant
		Dim BPR As BPResults
		
		Set bpr = GetBPResults("DEPTS", Ucase$(Trim$(divNum & " " & deptID)))
		
		' Return a list, or Nothing..
		If bpr.Succeeded() And bpr.Rows() > 0 Then 
			GetDeptData = bpr.GetFirstRow()
		End If		
	End Function
	
	
	'
	' Returns a List of Strings each of which corresponds to an employee type 
	' related information such as type description (e.g., Regular).
	'
	Function GetEmployeeCode(code As String) As Variant 
		Dim BPR As BPResults
		
		Set bpr = GetBPResults("ECODES", code)
		
		' Return a List, or Nothing..
		If bpr.Succeeded() And bpr.Rows() > 0 Then 
			GetEmployeeCode = bpr.GetFirstRow()
		End If		
	End Function
	
	
	'
	' Returns a List of Strings each of which corresponds to an IBM work location  
	' related information such as work location address.
	'
	Function GetWorkLocation(code As String) As Variant
		Dim BPR As BPResults
		
		Set bpr = GetBPResults("WORKLOC", code)
		
		' Return a List, or Nothing..
		If bpr.Succeeded() And bpr.Rows() > 0 Then 
			GetWorkLocation = bpr.GetFirstRow()
		End If		
	End Function	
	
	'
	' Returns a List of Strings each of which corresponds to an IBM organization
	' code related information such as HR business unit ID, organization name, etc.
	' 
     ' (BBB)
	'
	Function GetOrganizationCode(code As String) As Variant 
		Dim BPR As BPResults
		
		Set bpr = GetBPResults("ORGCODES", code)
		
		' Return a List, or Nothing..
		If bpr.Succeeded() And bpr.Rows() > 0 Then 
			GetOrganizationCode = bpr.GetFirstRow()
		End If		
	End Function
	
	'
	' =========================== PRIVATE METHODS =============================
	'
	
	'
	' Translates a string into "application/x-www-form-urlencoded" format using 
	' ASCII encoding scheme.
	'
	Function URLEncode(key As String) As String
		Dim char As String
		Dim ss As String
		Dim j As Long           ' [3.0.2]
		
		ss = ""
		
		For j = 1 To Len(key)
			char = Mid(key, j, 1)
			If Instr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.*_-", char) Then
				ss = ss & char
			Elseif char = " " Then
				ss = ss & "+"
			Else
				ss = ss & "%" & Right("0" & Hex(Asc(char)), 2)
			End If
		Next j
		
		URLEncode = ss		
	End Function
	
	
	'
	' Accesses the specified URL using Web Retriever and collects its output. Creates
	' a BPNumerator based on the output and returns it to the caller.
	'
	Private Function GetBPEnumerator(formattedURL As String) As BPEnumerator
		Dim queryResults As String
		Dim webDoc As NotesDocument
		Dim bodyItem As Variant
		Dim headerInfo As String
		
		Set webDoc = Me.webDb.GetDocumentByURL(formattedURL, True)
		Set bodyItem = webDoc.GetFirstItem("Body")
		
		' Other ways of getting text wrap at 80 columns, which is bad.
		' queryResults = bodyItem.GetFormattedText(False, 200)   
		queryResults = bodyItem.GetUnformattedText()   ' GetUnformattedText was introduced in Notes 6  [3.0.1]
		
		If webDoc.Remove(True) = False Then 
			' Messagebox "Error: Failed to remove Web Navigator document", , "BluePages Script Library"
			Me.statusCode = 2
			Me.errorMessage = "Failed to remove Web Navigator document."
		End If
		
		Set GetBPEnumerator = New BPEnumerator(queryResults)
	End Function
	
	
	'
	' Accesses the Web Server API Locator URL and parses it output to obtain the 
	' names of the query functions and their associated URLs. Returns True if the
     ' operation is successful. 
	'
	Private Function URLListReady() As Integer
		' Fetch and load the URL dictionary if not yet done.
		If Not Me.listInPlace Then             
			Dim r As BPResults
			Dim names As Variant	' The names of the commands in the API
			Dim urls As Variant		' The URLs to calls the commands listed in CMDS
			Dim n As Long            ' [3.0.2]
			
			Set r = New BPResults(Me.GetBPEnumerator(Me.locatorURL))
			
			' If we got the URL dictionary back from BluePages.
			If r.Succeeded() And r.Rows() > 0 Then       
				names = r.GetColumn("NAME")
				urls = r.GetColumn("URL")
				
				' Store it in the urlList.
				For n = 0 To r.Rows() - 1                          
					Me.urlList(Ucase$(names(n))) = urls(n)
				Next
				
				' Flag that URL dictionary is ready for business.
				Me.listInPlace = True            
			Else
				' Flag that URL dictionary failed to load.
				Me.listInPlace = False
			End If
		End If
		
		' Return the value of the ready flag.
		URLListReady = Me.listInPlace		
	End Function
	
	
	'	
	' Returns a BPEnumerator object representing an error condition.
	'
	Private Function GetFailedBPEnumerator(message As String) As BPEnumerator
		Set GetFailedBPEnumerator = New BPEnumerator("# rc=-1, count=0, message=" & message)
	End Function
	
	
	'	
	' Returns a BPResults object representing the result table constucted based on
	' the results to be retrieved for the specified Web Server API query function 
	' (opName) and the query string (opArg).
	'	
	Private Function GetBPResults(opName As String, opArg As String) As BPResults
		Dim bpe As BPEnumerator
		
		If Me.IsOpen() Then
			opArg = Trim$(opArg)
			
			' If argument is missing, warn..		
			If opArg ="" Or opArg = "%" Then
				Set bpe = Me.GetFailedBPEnumerator(opName & " requires a string argument.")
			Elseif opArg = "+" Then
				Set bpe = Me.GetFailedBPEnumerator(opName & " requires two string arguments.")
			Else							
				' If argument is present, fetch data from BluePages..
				
				' Is the API dictionary is loaded?
				If Me.URLListReady() Then	
					' Does the specified query function exist?
					If Iselement(Me.urlList(opName)) Then
						Set bpe = Me.GetBPEnumerator(Me.urlList(opName) & URLEncode(opArg))
					Else 
						' The specified query function does not exist..
						Set bpe = Me.GetFailedBPEnumerator("Command: " & opName & " not found in the API dictionary.")
					End If
				Else
					' The API dictionary is not loaded..
					Set bpe = Me.GetFailedBPEnumerator("The API locator function failed to load the API dictionary.")
				End If			
			End If
		Else 
			Set bpe = Me.GetFailedBPEnumerator("Cannot complete the request due to invalid Web Navigator configuration.")
		End If
		
		Set GetBPResults = New BPResults(bpe)		
	End Function
	
	
	'	
	' Returns a SLAPHAPIResults object if SLAPHAPI is one of the the Web Server 
	' API functions and the Web Server API locator was accessed successfully.
	'	
	Private Function GetSLAPHAPIResults(opArg As String) As SLAPHAPIResults
		Dim bpe As BPEnumerator
		
		If Me.IsOpen() Then 
			opArg = Trim$(opArg)
			
			' If argument is missing, warn..		
			If opArg ="" Or opArg = "%" Then
				Set bpe = Me.GetFailedBPEnumerator("SLAPHAPI requires a search filter.")
			Else
				' If a search filter is specified, retrieved data from BluePages
				' via SLAPHAPI. First, check if results from the Web Server API 
				' Locator are obtained successfully.
				If Me.URLListReady() Then
					' Does SLAPHAPI exist in the API dictionary?
					If Iselement(Me.urlList("SLAPHAPI")) Then
						Set bpe = Me.GetBPEnumerator(Me.urlList("SLAPHAPI") & opArg)
					Else
						' SLAPHAPI does not exist in the API dictionary.
						Set bpe = Me.GetFailedBPEnumerator("Command: SLAPHAPI not found in the API dictionary.")
					End If
				Else
					' The API dictionary is not loaded..
					Set bpe = Me.GetFailedBPEnumerator("The API locator function failed to load the API dictionary.")
				End If
			End If
		Else 
			Set bpe = Me.GetFailedBPEnumerator("Cannot complete the request due to invalid Web Navigator configuration.")
		End If
		
		Set GetSLAPHAPIResults = New SLAPHAPIResults(bpe)			
	End Function	
End Class

' --------------------------------------------------------------------------------

' 
' The BPResults class represents the BluePages data retrieved from the Web Server 
' API functions. It organizes the data obtained from the NextLine() method of the
' class BPEnumerator object into columns. An instance of this class is created
' by the public methods of the BluePages class as explained above.
'
Class BPResults
	Private results As BPEnumerator	' Results are parsed by an BPEnumerator object.
	Private columnList List As Variant	' A list of BPColumn objects; one per column.
	Private returnCode As String		' Return code value returned by Web Server API.
	Private errorMessage As String	' Error message returned by Web Server API.
	Private size As Long               ' Number of entries returned by BluePages.
	Private overflowFlag As Integer	' True if the end-of-data is not reached.
	Private rowCounter As Long		' Number of rows constructed for the results table.
	
	' 
	' Constructs a new BPResults object with the given BPEnumerator object 
	' reference. It interprets each line returned by the NextLine() method 
	' of the class BPEnumerator and creates the results table that constists
	' of rows of BluePages data.
	'
	Sub New(bpe As BPEnumerator)
		Dim x As Long                 ' [3.0.2]
		Dim aLine As String		
		Dim tag, value As String
		
		Set results = bpe
		
		' The default assumtion is that we have an overflow (i.e.,
		' we are unable to retrieve all data returned by BluePages)
		'
		Me.overflowFlag = True
		
		While results.HasMoreLines()
			aLine = results.NextLine()
			
			' Are we processing a comment?
			If Left(aLine, 1) = "#" Then
				' Did we reached the end of BluePages data (marked by status line)?
				If Instr(aLine, "# rc=") = 1 Then
					' If so, set the overflow flag to False.
					Me.overflowFlag = False
					
					' And, parse the status line..
					Dim status As BPStatus
					Set status = New BPStatus(aLine)
					
					Me.returnCode = status.GetReturnCode()
					Me.size = status.GetCount()
					Me.errorMessage = status.GetMessage()
				End If				
			Else
				x = Instr(aLine, ":")
				
				' Ignore lines with embedded CRs..
				If x > 0 Then				
					tag = Ucase$(Mid(aLine, 1, x - 1))
					value = Mid(aLine, x + 2)
					
					If Not Iselement(columnList(tag)) Then 
						Set columnList(tag) = New BPColumn()
					End If
					
					' Add() returns the size of the array.
					rowCounter = columnList(tag).Add(value)
				End If
			End If
		Wend
	End Sub
	
	
	'
	' Retrieves an array of Strings representing the rows of one specified
	' BluePages field/attributes (e.g., NAME, CNUM, etc.).
	'
	Function GetColumn(colName As String) As Variant  
		colName = Ucase$(colName)
		If Iselement(columnList(colName)) Then 
			GetColumn = columnList(colName).GetContents()
		End If		
	End Function
	
	
	'
	' Determines whether the results table created by the constructor contains 
	' a column with the specified column name which is actually the name of a 
	' BluePages field/attribute (e.g., NAME, CNUM, etc.).
	'
	Function HasColumn(colName As String) As Integer
		If Iselement(columnList(colName)) Then 
			HasColumn = True 
		Else 
			HasColumn = False
		End If
		
	End Function
	
	
	'
	' Returns the number of rows found in the results table.
	'
	Function Rows() As Long             
		Rows = rowCounter		
	End Function
	
	
	'
	' Determines whether the search operation was successful or not by checking
	' for the return code obtained from the Web Server API functions. If the 
	' return code is "0" and there is no overflow, it returns True.
	'
	Function Succeeded() As Integer
		' Return True if BP rc=0 and overflow not detected..
		If Me.returnCode = "0" And Me.overflowFlag = False Then 
			Succeeded = True 
		Else 
			Succeeded = False
		End If
		
	End Function
	
	
	'
	' Retrieves the return code obtained from the Web Server API function.
	'
	Function GetReturnCode() As String
		GetReturnCode = Me.returnCode	
	End Function
	
	
	'
	' Retrieves the error message obtained from the Web Server API function.
	'
	Function GetErrorMessage() As String
		GetErrorMessage = Me.errorMessage 
	End Function
	
	
	'
	' Retrieves the number of entries returned by BluePages.
	'
	Function GetSize() As Long
		GetSize = Me.size
	End Function
	
	
	'
	' Determines whether the end of BluePages data was reached or not. It returns
	' True if the end-of-data indicator '# rc=' was not found.
	'
	Function Overflowed() As Integer                
		Overflowed = Me.overflowFlag
	End Function
	
	
	'
	' Retrieves the raw output received from the BluePages directory. 
	'
	Function GetServerOutput() As String
		GetServerOutput = results.GetServerOutput()		
	End Function
	
	
	'
	' Retrieves the first row in the results table as List of Strings.
	'
	Function GetFirstRow() As Variant                   
		Dim sl List As String
		
		' Iterate through columns stored in the result table.
		Forall col In columnList
			' Put first value in column into the list by column name.
			sl(Listtag(col)) = col.GetContents()(0)			
		End Forall
		
		GetFirstRow = sl		
	End Function	
End Class

' --------------------------------------------------------------------------------

' 
' The SLAPHAPIResults class represents the BluePages data retrieved via SLAPHAPI.
' It stores an array of LDAPEntry objects each of which consists of a List of 
' LDAPAttribute ojects. Each LDAPAttribute object stores an array of Strings that
' represent the values of an attribute.
' 
' (BBB)
'
Class SLAPHAPIResults			
	Private entries() As LDAPEntry
	Private results As BPEnumerator
	Private returnCode As String
	Private errorMessage As String
	Private size As Long
	Private entryCounter As Long
	Private overflowFlag As Integer
	
	' 
	' Constructs a new SLAPHAPIResults object with the given BPEnumerator object 
	' reference. It interprets each line returned by the NextLine() method of
	' the class BPEnumerator and populates the array of LDAPEntry objects by 
	' collecting attributes associated with distinguished names (DN) encountered
	' in the search results.
	'
	Sub New(bpe As BPEnumerator)
		Dim ldEntry As LDAPEntry
		Dim aLine As String
		Dim attribute As String
		Dim value As String
		Dim pos As Long           ' [3.0.2]
		Dim ec As Long
		Dim flag As Integer
		
		Set results = bpe
		
		' The default assumtion is that we have an overflow (i.e.,
		' we are unable to retrieve all data returned by BluePages)
		'
		Me.overflowFlag = True
		
		While results.HasMoreLines()
			aLine = results.NextLine()
			
			' Are we processing a comment?
			If Left(aLine, 1) = "#" Then
				' Did we reached the end of BluePages data (marked by status line)?
				If Instr(aLine, "# rc=") = 1 Then
					' If so, set the overflow flag to False.
					Me.overflowFlag = False
					
					' And, parse the status line..
					Dim status As BPStatus
					Set status = New BPStatus(aLine)
					
					Me.returnCode = status.GetReturnCode()
					Me.size = status.GetCount()
					Me.errorMessage = status.GetMessage()
				End If				
			Else
				pos = Instr(aLine, ":")					
				If pos > 0 Then
					attribute = Ucase$(Mid(aLine, 1, pos - 1))
					value = Mid(aLine, pos + 2)
					
					' Each "DN:" found in the search results 
					' indicates a beginning of the new entry.
					If attribute = "DN" Then
						If Not ldEntry Is Nothing Then
							Me.entryCounter = Me.entryCounter + 1
							Redim Preserve Me.entries(1 To Me.entryCounter) 
							Set Me.entries(Me.entryCounter) = ldEntry
						End If
						Set ldEntry = New LDAPEntry()
					End If
					
					flag = ldEntry.AddAttribute(attribute, value)
				End If
			End If
		Wend
		
		' Put the last entry into the array..
		If Not ldEntry Is Nothing Then
			' Increase the number of LDAP entries found.
			Me.entryCounter = Me.entryCounter + 1
			Redim Preserve Me.entries(1 To Me.entryCounter) 
			
			' Put the current instance of LDAPEntry in the array.
			Set Me.entries(Me.entryCounter) = ldEntry
		End If						
	End Sub
	
	
	'
	' Retrieves the return code obtained from the SLAPHAPI search.
	'
	Function GetReturnCode() As String
		GetReturnCode = Me.returnCode	
	End Function
	
	
	'
	' Retrieves the error message obtained from the SLAPHAPI search.
	'
	Function GetErrorMessage() As String
		GetErrorMessage = Me.errorMessage 
	End Function
	
	
	'
	' Retrieves the number of entries returned by BluePages.
	'
	Function GetSize() As Long
		GetSize = Me.size
	End Function
	
	
	'
	' Determines whether the end of BluePages data was reached or not. It returns
	' True if the end-of-data indicator '# rc=' was not found.
	'
	Function Overflowed() As Integer                
		Overflowed = Me.overflowFlag
	End Function
	
	
	'
	' Determines whether the SLAPHAPI search operation was successful or not 
	' by checking for the return code obtained from the search results. If the 
	' return code is "0 OK", the method returns True.
	'
	Function Succeeded() As Integer
		If Me.returnCode = "0" And Me.overflowFlag = False Then 
			Succeeded = True 
		Else 
			Succeeded = False
		End If		
	End Function
	
	
	'
	' Retrieves the raw output received from the SLAPHAPI search.
	'
	Function GetServerOutput() As String
		GetServerOutput = Me.results.GetServerOutput()		
	End Function
	
	
	'
	' Retrieves the number of LDAP entries stored in the search results.
	'
	Function GetCount() As Long
		GetCount = Me.entryCounter		
	End Function
	
	
	'
	' Retrieves the first LDAP entry stored in the search results.
	'
	Function GetFirstEntry() As LDAPEntry
		If Me.entryCounter > 0 Then
			Set GetFirstEntry = Me.entries(1)
		End If		
	End Function
	
	
	'
	' Retrieves the LDAP entry at the spacified index of the LDAP entries stored 
	' in the search results.
	'
	Function GetEntry(x As Long) As LDAPEntry
		If x >= 1 And x <= Me.entryCounter Then
			Set GetEntry = Me.entries(x)
		End If		
	End Function
	
	
	'
	' Retrieves all LDAP entries stored in the search results.
	'
	Function GetEntries() As Variant
		If Me.entryCounter > 0 Then
			GetEntries = Me.entries
		End If		
	End Function	
End Class

' --------------------------------------------------------------------------------

' 
' The LDAPEntry class represents an LDAP entry. It stores a List of LDAPAttribute 
' objects each of which represents an LDAP attribute consisting of values. 
' 
' (BBB)
'
Class LDAPEntry
	Private DN As String
	Private ldAttributes List As LDAPAttribute
	Private numOfAttrs As Long
	
	'
	' Constructs a new LDAPEntry object.
	'
	Sub New
		
	End Sub
	
	'
     ' Adds a new attribute to this LDAP entry. The parameter 'addrID' is a String
	' that represents the ID (i.e., name) of the new attribute. The second parameter
	' contains the value of the new attribute. This method always returns True. 
	'
	Function AddAttribute(attrID As String, value As String) As Integer
		Dim ldAttr As LDAPAttribute
		
		If attrID = "DN" Then
			Me.DN = value			
		Else
			If Iselement(ldAttributes(attrID)) Then 
				Me.ldAttributes(attrID).AddValue(value)
			Else
				Me.numOfAttrs = Me.numOfAttrs + 1
				Set ldAttr = New LDAPAttribute(attrID, value)
				Set ldAttributes(attrID) = ldAttr
			End If
		End If
		
		AddAttribute = True		
	End Function
	
	
	'
	' Removes an existing attribute from this LDAP entry. The parameter 'attrID' 
	' is a String that represents the ID of the attribute. The second parameter
	' contains the value of the new attribute. This method returns True if the 
	' attribute with the specified ID exists in this LDAP entry.
	'
	Function RemoveAttribute(attrID As String) As Integer
		If Iselement(ldAttributes(attrID)) Then 
			Me.numOfAttrs = Me.numOfAttrs - 1 
			Erase ldAttributes(attrID)
			RemoveAttribute = True
		Else
			RemoveAttribute = False
		End If		
	End Function
	
	
	'
	' Removes all attributes stored in this LDAP entry. 
	'
	Sub RemoveAllAttributes
		Me.numOfAttrs = 0
		Erase Me.ldAttributes		
	End Sub
	
	
	'
	' Retrieves the number of attributes stored in this LDAP entry. 
	'
	Function GetSize() As Long
		GetSize = Me.numOfAttrs		
	End Function
	
	
	'
	' Retrieves the distinguished name (DN) associated with this LDAP entry. 
	'	
	Function GetDN() As String
		GetDN = Me.DN		
	End Function
	
	
	'
	' Retrieves an array of Strings each of which contains the name of an attribute
	' stored in this LDAP entry.
	'
	Function GetIDs() As Variant
		If Me.numOfAttrs > 0 Then
			Dim i As Long           ' [3.0.2]
			Dim attrIDs() As String
			Redim attrIDs(Me.numOfAttrs)
			
			i = 0
			
			Forall attrID In Me.ldAttributes
				i = i + 1
				attrIDs(i) = Listtag(attrID)
			End Forall
			
			GetIDs = attrIDs
		End If
	End Function
	
	
	'
	' Retrieves the attribute with the given attribute ID from the attributes stored 
	' in this LDAP entry.	
	'
	Function GetAttribute(attrID As String) As LDAPAttribute
		If Iselement(ldAttributes(attrID)) Then 
			Set GetAttribute = ldAttributes(attrID)
		End If		
	End Function
	
	
	'
	' Retrieves all attributes stored in this LDAP entry as a List of LDAPAttribute 
	' objects.
	'
	Function GetAttributes() As Variant
		If Me.numOfAttrs > 0 Then
			GetAttributes = Me.ldAttributes
		End If
		
	End Function	
End Class

' --------------------------------------------------------------------------------

' 
' The LDAPAttribute class represents an LDAP attribute. It stores an array of 
' Strings each of which contains a value of the attribute. 
' 
' (BBB)
'
Class LDAPAttribute
	Private attrID As String
	Private values() As String
	Private numOfVals As Long
	
	'
	' Constructs a new LDAPAttribute object with the specified value.
	'	
	Sub New(aid As String, value As String)
		Me.attrID = aid
		Me.numOfVals = 0
		AddValue(value)		
	End Sub
	
	
	'
	' Adds a new value to this attribute. The parameter 'value' is the new 
	' value to be added to this attribute. This method always returns True.
	'
	Function AddValue(value As String) As Integer
		Me.numOfVals = Me.numOfVals + 1
		Redim Preserve Me.values(1 To Me.numOfVals)
		Me.values(Me.numOfVals) = Trim(ChangeString(Chr(13), value, ""))
		
		AddValue = True		
	End Function
	
	
	'
	' Removes all values from this attribute.
	'
	Sub RemoveAllValues
		Me.numOfVals = 0		
	End Sub
	
	
	'
	' Determines whether the specified value in this attribute. Return True if
	' the value is in this attribute.
	' 
	Function Contains(value As String) As Integer
		Dim i As Long           ' [3.0.2]
		Dim found As Integer
		
		found = False
		
		For i = 1 To Me.numOfVals
			If value = Me.values(i) Then
				found = True
				Exit For
			End If
		Next
		
		Contains = found		
	End Function
	
	
	'
	' Retrieves the ID (i.e., name) of this attribute.
	'
	Function GetID() As String
		GetID = Me.attrID		
	End Function
	
	
	'
	' Retrieves the number of values stored in this attribute.
	'
	Function GetSize() As Long
		GetSize = Me.numOfVals		
	End Function
	
	
	' 
	' Retrieves the first value of this attribute.
	'
	Function GetFirstValue() As String
		If Me.numOfVals > 0 Then
			GetFirstValue = Me.values(1)
		End If		
	End Function
	
	
	' 
	' Retrieves all values of this attribute as an array of Strings.
	'
	Function GetValues() As Variant
		If Me.numOfVals > 0 Then
			GetValues = Me.values
		End If
		
	End Function
	
	'
	' =========================== PRIVATE METHODS =============================
	'
	
	'
	' Replaces all 'needle' instances with 'newNeedle' in 'haystack'.
	'
	Private Function ChangeString(needle As String, haystack As String, newNeedle As String) As String
		Dim retValue As String
		Dim tempX As Long               ' [3.0.2]
		Dim tempY As Long               ' [3.0.2]
		Dim flag As Integer
		Dim lenNeedle As Long           ' [3.0.2]
		
		retValue = ""
		tempX = 1
		lenNeedle = Len(needle)
		flag = True
		
		Do While flag
			tempY= Instr(tempX, haystack, needle, 1)
			If tempY = 0 Then 
				flag = False
			Else
				retValue = retValue & Mid(haystack, tempX, (tempY - tempX)) & newNeedle
				tempX = tempY + lenNeedle
			End If
		Loop
		
		retValue = retValue & Mid(haystack, tempX)
		
		ChangeString = retValue
		
	End Function	
End Class

' --------------------------------------------------------------------------------

'
' The BPEnumerator class processes the results of a BluePages Web Server API or 
' SLAPHAPI query. The caller programs can use its HasMoreLines() and NextLine()
' methods to obtain the lines from the search.
'
Private Class BPEnumerator
	Private bpData     As String	' Data retrieved from BluePages	
	Private newLine    As String	' NewLine character(s) (CRLF or LF)
	Private newLineLen As Long	' Length of NewLine (for pointer adjustment) [3.0.2]
	Private sp         As Long	' Start pointer for next line                [3.0.2]
	Private ep         As Long	' End pointer                                [3.0.2]
	
	'
	' Constructs a new BPEnumerator object with the specified BluePages data. 
     ' It also accepts the name of the query function that returned data.
	'
	Sub New(bpData As String)
		Dim CR As String
		Dim LF As String
		Dim numOfCRs As Long     ' [3.0.2]
		Dim numOfLFs As Long     ' [3.0.2]
		
		CR = Chr(13)
		LF = Chr(10)
		
		' Determine how many CRs are in the BluePages data.
		numOfCRs = CountStr(CR, bpData)
		
		' Determine how many LFs are in the BluePages data.
		numOfLFs = CountStr(LF, bpData)
		
		'
		' This if-then-else block is coded because of a bug encountered in
		' SLAPHAPI results. The lines in the results should be delimited by
		' CRLF or LF. However, it is observed that SLAPHAPI results may 
		' contain both: one as the main delimiter and the other arbitrarily. 
		' For example, most of the lines in the results are delimited by an 
		' LF. However, few of them (e.g., the values of the attributes DIVDEPT
		' and O) are followed by a CRLF. This creates a big problem when
		' parsing the data, since we cannot know what is the genuine NewLine 
		' delimiter. 
		'
		' This condition is not caused by SLAPHAPI; there are other APIs that 
		' retrieves SLAPHAPI results. There have been no indication of the same 
		' condition in those APIs. This may be caused by Notes WebRetriever.
		'
		' The following assumes that delimiter for the SLAPHAPI results will be 
		' an LF. All CRLFs will be converted to a single space. Current observation
		' shows that SLAPHAPI results are delimited by LFs and "may" contain CRLFs 
		' unpexpectedly. If this condition changes, the following code should be 
		' revised/revisited.
	     ' 
	     ' (BBB)
		'
		If numOfCRs = numOfLFs Then
			Me.newLine = CR & LF
		Else
			If numOfCRs > numOfLFs Then
				Me.newLine = CR
				bpData = Trim(Me.ChangeString(LF, bpData, ""))
				bpData = Trim(Me.ChangeString(CR & CR, bpData, CR))
				bpData = Me.CleanCC(bpData, CR)
			Else
				Me.newLine = LF
				bpData = Trim(Me.ChangeString(CR, bpData, ""))
				bpData = Trim(Me.ChangeString(LF & LF, bpData, LF))
				bpData = Me.CleanCC(bpData, LF)
			End If
		End If
		
		Me.newLineLen = Len(Me.newLine)	' Keep the length for handy use
		
		Me.bpData = bpData
		
		Me.ep = 1 - Me.newLineLen		' point to an imaginary newline before the beginning
		' Call Me.HasMoreLines			' needed to set pointers for NextLine call
	End Sub
	
	
	'
	' Retrieves the return code obtained from the BluePages query.
	'
	' Function GetReturnCode() As String
	' 	GetReturnCode = Me.returnCode		
	' End Function
	
	
	'
	' Retrieves the data obtained from the BluePages query.
	'	
	Function GetServerOutput() As String
		GetServerOutput = Me.bpData
	End Function
	
	
	'
	' Determines whether there are more lines to read in the BluePages 
     ' query results. Returns True if there are more lines. It is used 
     ' with NextLine() to traverse the query results. This method must 
     ' be called exactly once before each call to NextLine().
	'
	Function HasMoreLines() As Integer    
		Me.sp = Me.ep + Me.newLineLen				' Start just after NewLine char(s).
		Me.ep = Instr(Me.sp, Me.bpData, Me.newLine)	' Find the next NewLine in the data.
		
		If Me.ep > 0 Then 
			HasMoreLines = True 
		Else 
			HasMoreLines = False
		End If		
	End Function
	
	
	'
	' Retrieves the next line available in the BluePages data (determined
	' by the NewLine (CR, LF, or CRLF).
	'
	Function NextLine() As String	
		NextLine = Trim$(Mid$(Me.bpData, Me.sp, (Me.ep - Me.sp)))		
	End Function
	
	'
	' =========================== PRIVATE METHODS =============================
	'
	
	'
	' Cleans incorrect 'cc's that may be appearing between two tags/attributes
	' in 'data' more than once. This method has been introduced because of the
	' unexpected LF control characters found in SLAPHAPI results. This behavior
	' has been observed with Notes Web Retriever only; other techniques that 
	' allow obtaining content from URLs do not put erroneous control characters.
	' 
	' (BBB)
	'
	Private Function CleanCC(data As String, cc As String) As String
		Dim flag As Integer
		Dim iPos As Long           ' [3.0.2]
		Dim nPos As Long           ' [3.0.2]
		Dim tPos As Long           ' [3.0.2]
		Dim cPtr As Long           ' [3.0.2]
		
		flag = True
		cPtr = 1
		
		While flag
			iPos = Instr(cPtr, data, ":")
			If iPos <> 0 Then 
				nPos = Instr(iPos + 1, data, ":")
				If nPos = 0 Then
					flag = False
					If Mid(data, iPos + 2) = cc Then
						tPos = iPos + 3
						nPos = Instr(tPos, data, cc)
						If nPos <> 0 Then
							If Trim(Mid(data, tPos, nPos - tPos)) <> "" Then
								data = Mid(data, 1, iPos + 1) & Mid(data, tPos)
							End If
						End If
					End If
				Else
					tPos = iPos + 1
					If Me.CountStr(cc, Mid(data, tPos, (nPos - iPos - 1)))  <> 1 Then
						' data = Mid(data, 1, tPos) & Mid(data, tPos + 2)
						data = Mid(data, 1, tPos) & Mid(data, tPos + 1)
					End If
					cPtr = tPos
				End If						
			Else
				flag = False
			End If
		Wend
		
		CleanCC = data
	End Function
	
	'
	' Counts all 'needle' instances in 'haystack'.
	'
	Private Function CountStr(needle As String, haystack As String)	
		Dim hLen As Long                      ' [3.0.2]
		Dim nLen As Long                      ' [3.0.2]
		
		hLen = Len(haystack)
		nLen = Len(needle)
		
		If nLen = 0 Or hLen = 0 Or nLen > hLen Then
			CountStr = 0
		Else
			Dim sPos As Long                 ' [3.0.2]
			
			sPos = Instr(haystack, needle)
			If sPos = 0 Then
				CountStr = 0
			Else
				Dim count As Long           ' [3.0.2]
				
				count = 0
				While sPos <> 0
					count = count + 1
					sPos = Instr(sPos + nLen, haystack, needle)
				Wend
				
				CountStr = count
			End If			
		End If
	End Function
	
	
	'
	' Replaces all 'needle' instances with 'newNeedle' in 'haystack'.
	'
	Private Function ChangeString(needle As String, haystack As String, newNeedle As String) As String
		Dim retValue As String
		Dim tempX As Long               ' [3.0.2]
		Dim tempY As Long               ' [3.0.2]
		Dim flag As Integer 
		Dim lenNeedle As Long           ' [3.0.2]
		
		retValue = ""
		tempX = 1
		lenNeedle = Len(needle)
		flag = True
		
		Do While flag
			tempY= Instr(tempX, haystack, needle, 1)
			If tempY = 0 Then 
				flag = False
			Else
				retValue = retValue & Mid(haystack, tempX, (tempY - tempX)) & newNeedle
				tempX = tempY + lenNeedle
			End If
		Loop
		
		retValue = retValue & Mid(haystack, tempX)
		
		ChangeString = retValue		
	End Function	
End Class

' --------------------------------------------------------------------------------

'
' The BPColumn class is used by the class BPResults to organize the BluePages data
' into columns. It is not intended for direct use by applications.
'
Private Class BPColumn
	Private contents() As String
	Private nextPos As Long
	
	' 
	' Constructs a new BPColumn object.
	'
	Sub New()
		Me.nextPos = 0
	End Sub
	
	
	'
	' Adds a new value to this column. The parameter 'value' is a String that 
	' contains the value (of a BluePages field/attribute).
	'	
	Function Add(value As String) As Long
		Redim Preserve Me.contents(Me.nextPos)
		Me.contents(Me.nextPos) = value
		Me.nextPos = Me.nextPos + 1
		Add = Me.nextPos		
	End Function
	
	
	'
	' Return the content of this column as an array of Strings each of which
	' contains a value for the corresponding BluePages field/attribute.
	'
	Function GetContents() As Variant
		GetContents = Me.contents		
	End Function	
End Class


' --------------------------------------------------------------------------------

Private Class BPStatus
	Private returnCode As String
	Private count As Long
	Private message As String
	
	' 
	' Constructs a new BPStatus object.
	'
	Sub New(statusData As String)
		Me.returnCode = "-1"
		Me.count = -1
		Me.message = "Unable to parse status line"
		
		'
		' Parse status line.
		'
		' Example: # rc=0, count=2, message=Success
		'
		
		statusData = Trim(statusData)
		If statusData <> "" Then
			Dim i As Long                                ' [3.0.2]
			i = Instr(statusData, "# rc=")
			If i = 1 Then
				Dim j As Long                           ' [3.0.2]
				j = Instr(statusData, ",")
				If j <> 0 And j > 6 Then
					Dim rc As String
					rc = Mid(statusData, 6, j - 6)
					statusData = Trim(Mid(statusData, j + 1))
					i = Instr(statusData, "count=")
					If i = 1 Then
						j = Instr(statusData, ",")
						If j <> 0 And j > 7 Then
							Dim count As String
							count = Mid(statusData, 7, j - 7)
							statusData = Trim(Mid(statusData, j + 1))
							i = Instr(statusData, "message=")
							If i = 1 Then
								Me.message = Trim(Mid(statusData, 9))
								Me.count = Clng(count)
								Me.returnCode = rc
							End If 									
						End If							
					End If
				End If				
			End If
		End If
		
	End Sub
	
	' Return the status code.
	Function GetReturnCode() As String
		GetReturnCode = Me.returnCode
	End Function
	
	' Return the count.
	Function GetCount() As Long
		GetCount = Me.count
	End Function
	
	' Return the message.
	Function GetMessage() As String
		GetMessage = Me.message
	End Function
	
End Class