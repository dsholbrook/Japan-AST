'++LotusScript Development Environment:2:5:(Options):0:66
Option Public
Option Declare

Use "Debug"

'++LotusScript Development Environment:2:5:(Forward):0:1

'++LotusScript Development Environment:2:5:(Declarations):0:2
Const SYSTEM_ERROR = 1001

%REM
Class: MergeFieldAttachment
Author: Joseph Francis
Created: 8/19/2002

 Purpose:	Used internally by MergeGenerator
			Holds variables needed for dynamic attachments / text
'=========================================================================
%END REM
Public Class MergeFieldAttachment
	'public fields, not properties to save code.  Can make properties if needed without breaking code
	Public attachmentKeyType As String
	Public attachmentKey As String
	Public attachmentView As String
	Public attachmentFields As Variant
	
	'Set all fields when created using constructor
	Public Sub New( theKeyType As String, theKey As String, theView As String, theFields )
		attachmentKeyType = theKeyType
		attachmentKey = theKey
		attachmentView = theView
		attachmentFields = theFields		
	End Sub
	
	'Finds the related attachments and embeds them into the passed Rich Text Item
	Public Function AddAttachmentsToRTItem( theRTItem As NotesRichTextItem, theTargetDoc As NotesDocument ) As Integer
		'Find attachments related to this item and appends them to rich text item passed
		If theRTItem Is Nothing Then Exit Function
		If theTargetDoc Is Nothing Then Exit Function
		
		Dim myKey As String
		Dim myEvalKey As Variant
		Select Case attachmentKeyType
		Case "Value" : myKey = attachmentKey
		Case "Field" : myKey = theTargetDoc.getItemValue( attachmentKey )(0)
         '-- JF - Updated 8-20 to allow for flexy lookups			
		Case "Formula"
			myEvalKey = Evaluate( attachmentKey, theTargetDoc )
			myKey = myEvalKey(0)
		End Select
		
		Dim myAttachmentsDoc As NotesDocument
		Dim myAttachmentsView As NotesView
		Dim myParentDB As NotesDatabase
		Set myParentDB = theTargetDoc.parentDatabase
		Set myAttachmentsView = myParentDB.getView( attachmentView )
		If myAttachmentsView Is Nothing Then Exit Function
		Set myAttachmentsDoc = myAttachmentsView.getDocumentByKey( myKey )
		If myAttachmentsDoc Is Nothing Then Exit Function
		
		'Get attachments
		If attachmentFields = "" Then 
			'Exit, must supply a field
			Exit Function
		Else
			'Use attachments from rich text item name passed
			Dim myAttachmentsField As NotesRichTextItem
			Set myAttachmentsField = myAttachmentsDoc.getFirstItem( attachmentFields )
			If myAttachmentsField Is Nothing Then Exit Function
			Call theRTItem.appendRTItem( myAttachmentsField )
		End If
		AddAttachmentsToRTItem = True
	End Function
	
End Class

%REM
Class: MergeGenerator
Author: Joseph Francis
Created: 8/7/2002

 Purpose: Generate "merged" text using computed values from 
 a document along with a text template with merge fields (i.e. Dear [{First Name}], ...)
'=========================================================================
%END REM
Public Class MergeGenerator
	'================ PRIVATE ==================
	Private m_session As NotesSession
	Private m_strlstFieldList List As String
	Private m_attachmentList List As MergeFieldAttachment
	
	Private m_strStartDelimiter As String
	Private m_strEndDelimiter As String
	Private m_intStartDelimiterLength As Integer
	Private m_intEndDelimiterLength As Integer
	
	'Template fields
	Private m_strTemplateSubject As String
	Private m_strTemplateBody As String
	
	'E-mail creation related variables
	Private m_intMailCreatedOnServer As Integer
	Private m_varMailFrom As Variant
	Private m_varMailBCC As Variant
	Private m_dbMail As NotesDatabase
	Private m_dbMailOnServer As NotesDatabase
	
	'The locale setting to use when determining which field templates to use
	Private m_strCurrLocale As String
	
	'The rich text item to use for graphic format e-mails
	Public m_rtitemGraphic As NotesRichTextItem
	
	'Basic function to replace a string in another string
	Private Function ReplaceString( theIn As String, theFind As String, theReplace As String ) As String
		Dim myC As Long, myPos As Integer, myOut As String
		
		Dim myStart As Long, myCount As Long
		myStart = 1
		myCount = -1
		
		myOut = theIn
		myPos = Instr(myStart, myOut, theFind)
		If myPos = 0 Then Goto EndFn:
		Do
			myC = myC + 1
			myOut = Left(myOut, myPos - 1) & theReplace & _
			Mid(myOut, myPos + Len(theFind))
			If myCount <> -1 And myC >= myCount Then Exit Do
			myPos = Instr(myStart, myOut, theFind)
		Loop While myPos > 0
EndFn:
		ReplaceString = myOut	
	End Function
	
	'================ PUBLIC ==================
	
	'If true this creates in mail.box on server, use .save to mail
	'If false creates in db, use .send to mail
	Public Property Get isCreatedOnServer As Integer
		isCreatedOnServer = m_intMailCreatedOnServer
	End Property
	
	Public Property Set isCreatedOnServer As Integer
		m_intMailCreatedOnServer = isCreatedOnServer
	End Property
	
	'Subject line for e-mail, can contain merge fields
	Public Property Get templateSubject As String
		templateSubject = m_strTemplateSubject
	End Property
	
	Public Property Set templateSubject As String
		m_strTemplateSubject = templateSubject
	End Property
	
	'Body for e-mail, can contain merge fields
	Public Property Get templateBody As String
		templateBody = m_strTemplateBody
	End Property
	
	Public Property Set templateBody As String
		m_strTemplateBody = templateBody
	End Property
	
	'Body for e-mail, when graphics format selected
	Public Property Get templateGraphicBody As NotesRichTextItem
		Set templateGraphicBody = m_rtitemGraphic
	End Property
	
	Public Property Set templateGraphicBody As NotesRichTextItem
		Set m_rtitemGraphic = templateGraphicBody
	End Property
	
	'Address this e-mail should be "from"
	Public Property Get FromAddress As String
		'Lazily instantiate but cache from name from session if not provided
		If m_varMailFrom = "" Then 
			Dim mySession As New NotesSession
			m_varMailFrom = mySession.username
		End If
		
		FromAddress = m_varMailFrom	
		
	End Property
	
	Public Property Set FromAddress As String
		m_varMailFrom = FromAddress
	End Property
	
	'Address this e-mail should be blind copied to
	Public Property Get BCCAddress As String
		BCCAddress = m_varMailBCC		
	End Property
	
	Public Property Set BCCAddress As String
		m_varMailBCC = BCCAddress
	End Property
	
	'Used to get mail database to create document in
	Public Property Get ServerMailDatabase As NotesDatabase
		
		Const STR_MODULE_NAME = |Get ServerMailDatabase|
		
		If m_dbMailOnServer Is Nothing Then
			
			Call Debug(STR_MODULE_NAME & |: Instantiating ServerMailDatabase.|)
			
			Dim dbMail As NotesDatabase
			Dim strCurrServer As String
			
			strCurrServer = m_dbMail.Server
			
			Call Debug(STR_MODULE_NAME & |: Server [| & strCurrServer & |].|)
			
			'Need to create mail on the server
			Set dbMail = m_session.GetDatabase(strCurrServer, "mail.box")
			
			If Not (dbMail.IsOpen) Then
				Set dbMail = m_session.GetDatabase(strCurrServer, "mail1.box")
				If Not (dbMail.IsOpen) Then
					Set dbMail = m_session.GetDatabase(strCurrServer, "mail2.box")
					If Not (dbMail.IsOpen) Then
						Call Debug(STR_MODULE_NAME & |: Unable to open any mail boxes.|)
					Else
						Call Debug(STR_MODULE_NAME & |: Opened mail2.box.|)						
					End If					
				Else
					Call Debug(STR_MODULE_NAME & |: Opened mail1.box.|)
				End If
			Else
				Call Debug(STR_MODULE_NAME & |: Opened mail.box.|)
			End If
			Set m_dbMailOnServer = dbMail
		Else
			Call Debug(STR_MODULE_NAME & |: ServerMailDatabase already instantiated.|)
		End If
		
		Set ServerMailDatabase = m_dbMailOnServer
		
	End Property
	
	Public Property Set ServerMailDatabase As NotesDatabase
		Set m_dbMailOnServer = ServerMailDatabase
	End Property
	
	Public Property Set currLocale As String
		m_strCurrLocale = currLocale
	End Property
	
	Public Property Get currLocale As String
		currLocale = m_strCurrLocale
	End Property
	
	Public Sub New(dbMail As NotesDatabase)
		
		Set m_session = New NotesSession
		
		'Define the delimiters used to identify the start and end of a merge field
		m_strStartDelimiter= "[{"
		m_strEndDelimiter = "}]"
		m_intStartDelimiterLength = 2
		m_intEndDelimiterLength = 2		
		
		'Default usage is to create in db passed
		m_intMailCreatedOnServer = False
		
		If dbMail Is Nothing Then
			Error SYSTEM_ERROR, |Unable to access mail database.|	
		End If
		
		Set m_dbMail = dbMail
		
	End Sub
	
	'Clear the field list to reload
	Public Sub ClearFieldList
		Erase m_strlstFieldList
		Erase m_attachmentList
	End Sub
	
	'Add a field to the list
	Public Sub AddToFieldList(strMergeFieldName As String, strFormula As String, strLocale As String)
		
		Const STR_MODULE_NAME = |AddToFieldList|
		
		'Trap errors
		On Error Goto lblError
		
		'If the field is already in the list, check to see if it is to be replaced by the locale specific version, and if so replace it.
		If (Iselement(m_strlstFieldList(strMergeFieldName)) = True) Then
			If (strLocale = Me.currLocale) Then	
				Call Debug(STR_MODULE_NAME & |: Field [| & strMergeFieldName & |] is already in the list.  Replacing with locale specific version.  [| & strFormula & |] for locale [| & strLocale & |]|)
				m_strlstFieldList(strMergeFieldName) = strFormula
			Else
				Call Debug(STR_MODULE_NAME & |: Skipping field [| & strMergeFieldName & |] [| & strFormula & |] for locale [| & strLocale & |].  Field is not for the default or current locale.|)	
			End If
		'Otherwise, if the field is for the default locale, add it to the list			
		Else			
			If (strLocale = "") Then		
				Call Debug(STR_MODULE_NAME & |: Adding field [| & strMergeFieldName & |] [| & strFormula & |] for locale [| & strLocale & |] (Default locale).|)					
				m_strlstFieldList(strMergeFieldName) = strFormula
			Else
				If (strLocale = Me.currLocale) Then
					Call Debug(STR_MODULE_NAME & |: Adding field [| & strMergeFieldName & |] [| & strFormula & |] for locale [| & strLocale & |] (Current locale).|)	
					m_strlstFieldList(strMergeFieldName) = strFormula
				Else
					Call Debug(STR_MODULE_NAME & |: Skipping field [| & strMergeFieldName & |] [| & strFormula & |] for locale [| & strLocale & |].  Field is not for the default or current locale.|)	
				End If
			End If
		End If
		
lblExit:
		
		Exit Sub
		
lblError:
		
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Resume lblExit
		
	End Sub
	
	'Add an attachment / dynamic text object
	Public Sub AddToAttachmentList( strMergeFieldName As String, theKeyType As String, theKey As String, theViewName As String, theFieldNames )
		Dim myMergeFieldAttachment As New MergeFieldAttachment( theKeyType, theKey, theViewName, theFieldNames )
		Set m_attachmentList( strMergeFieldName )  = myMergeFieldAttachment
	End Sub
	
	'Load the list of fields and related formula from specified view
	Public Sub LoadFieldListFromView(viewMergeFields As NotesView)
		
		Const STR_MODULE_NAME = |LoadFieldListFromView|
		
		Dim docMergeField As NotesDocument
		Dim strFieldName As String
		Dim strFormula As String
		Dim strFieldType As String
		Dim strLocale As String
		
		'Trap errors
		On Error Goto lblError
		
		Call Debug(STR_MODULE_NAME & |: Started.  Current locale [| & m_strCurrLocale & |].|)
		
		'Clear existing values
		Call ClearFieldList
		
		Call Debug(STR_MODULE_NAME & |: Getting merge fields from current database.|)
		
		Set docMergeField = viewMergeFields.GetFirstDocument
		
		If (docMergeField Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find any merge fields.|)
		End If
		
		While Not docMergeField Is Nothing
			
			strFieldType = Cstr(docMergeField.columnValues(2))
			
			Select Case strFieldType
				
			Case "Formula":
				
				strFieldName = Cstr( docMergeField.columnValues(0))
				strFormula = Cstr( docMergeField.columnValues(1))
				strLocale = Cstr(docMergeField.columnValues(3))
				Call AddToFieldList(strFieldName, strFormula, strLocale)
				
			Case Else
				
				Error SYSTEM_ERROR, |An unknown merge field type [| & strFieldType & |] was supplied to the function.|	
				
			End Select
			
			Set docMergeField = viewMergeFields.GetNextDocument(docMergeField)
			
		Wend
		
lblExit:
		
		Call Debug(STR_MODULE_NAME & |: Start of merge field list.| & Chr$(13) & getFieldList())
		Call Debug(STR_MODULE_NAME & |: End of merge field list.|)
		
		Call Debug(STR_MODULE_NAME & |: Finished.|)
		
		Exit Sub
		
lblError:
		
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Resume lblExit
		
	End Sub		
	
	'Load the list of fields and related formula from specified view
	Public Sub LoadFieldListFromReferenceDb(dbCurr As NotesDatabase, dbReference As NotesDatabase)
		
		Const STR_MODULE_NAME = |LoadFieldListFromReferenceDb|
		
		Dim viewMergeFields As NotesView
		Dim docMergeField As NotesDocument
		Dim strFieldName As String
		Dim strFormula As String
		Dim strFieldType As String
		Dim strLocale As String
		
		'Trap errors
		On Error Goto lblError
		
		Call Debug(STR_MODULE_NAME & |: Started.  Current locale [| & m_strCurrLocale & |].|)
		
		'Clear existing values
		Call ClearFieldList
		
		'Get merge fields from the reference database
		Call Debug(STR_MODULE_NAME & |: Getting merge fields from reference database.|)
		
		Set viewMergeFields = dbReference.GetView(|vLookupMergeFields|)
		
		Set docMergeField = viewMergeFields.GetFirstDocument
		
		If (docMergeField Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find any merge fields.|)
		End If
		
		While Not docMergeField Is Nothing
			
			strFieldType = Cstr(docMergeField.columnValues(2))
			
			Select Case strFieldType
				
			Case "Formula":
				
				strFieldName = Cstr( docMergeField.columnValues(0))
				strFormula = Cstr( docMergeField.columnValues(1))
				strLocale = Cstr(docMergeField.columnValues(3))
				Call AddToFieldList(strFieldName, strFormula, strLocale)
				
			Case Else
				
				Error SYSTEM_ERROR, |An unknown merge field type [| & strFieldType & |] was supplied to the function.|	
				
			End Select
			
			Set docMergeField = viewMergeFields.GetNextDocument(docMergeField)
			
		Wend
		
		'Now get any overriding merge fields from the current database
		Call Debug(STR_MODULE_NAME & |: Getting merge fields from current database.|)
		
		Set viewMergeFields = dbCurr.GetView(|vLookupMergeFields|)
		
		Set docMergeField = viewMergeFields.GetFirstDocument
		
		If (docMergeField Is Nothing) Then
			Call Debug(STR_MODULE_NAME & |: Unable to find any merge fields.|)
		End If
		
		While Not docMergeField Is Nothing
			
			strFieldType = Cstr(docMergeField.columnValues(2))
			
			Select Case strFieldType
				
			Case "Formula":
				
				strFieldName = Cstr( docMergeField.columnValues(0))
				strFormula = Cstr( docMergeField.columnValues(1))
				strLocale = Cstr(docMergeField.columnValues(3))
				Call AddToFieldList(strFieldName, strFormula, strLocale)
				
			Case Else
				
				Error SYSTEM_ERROR, |An unknown merge field type [| & strFieldType & |] was supplied to the function.|	
				
			End Select
			
			Set docMergeField = viewMergeFields.GetNextDocument(docMergeField)
			
		Wend
		
lblExit:
		
		Call Debug(STR_MODULE_NAME & |: Start of merge field list.| & Chr$(13) & getFieldList())
		Call Debug(STR_MODULE_NAME & |: End of merge field list.|)
		
		Call Debug(STR_MODULE_NAME & |: Finished.|)
		
		Exit Sub
		
lblError:
		
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Resume lblExit
		
	End Sub		
	
	'Returns text passed with replaced values from the document passed using field list
	Public Function GetMergedText(strOriginalText As String, doc As NotesDocument ) As String
		
		Dim flgHasErrors As Integer
		Dim strMergedText As String
		
		Const STR_MODULE_NAME = |GetMergedText|
		
		'Trap errors
		On Error Goto lblError		
		
		Call Debug(STR_MODULE_NAME & |: Started.|)
		
		'if not initialized, return blank value
		If Isempty(m_strlstFieldList) Then 
			Error SYSTEM_ERROR, |No merge fields are defined.|	
		End If
		
		strMergedText = strOriginalText
		
		Call Debug(STR_MODULE_NAME & |: Merging the following text:|)
		Call Debug(STR_MODULE_NAME & |: | & strMergedText)		
		
		'Loop through all the fields and merge where needed
		Forall varCurrField In m_strlstFieldList
			
			On Error Goto lblErrorNextField
			
			Dim strMergeField As String
			Dim varResult As Variant
			Dim strResult As String
			
			strMergeField = m_strStartDelimiter & Listtag(varCurrField) & m_strEndDelimiter
			
			'If field value is needed then evaluate value and do replacement
			If Instr(strMergedText, strMergeField) > 0 Then
				
				Call Debug(STR_MODULE_NAME & |: Replacing [| & strMergeField & |]|)
				
				'Evaluate formula against document passed
				varResult = Evaluate(varCurrField, doc)
				
				'If not error / got a value back then loop though created string from list if needed
				If Not Isempty(varResult) Then 
					strResult = ""
					Forall varValue In varResult
						If strResult = "" Then 
							strResult = Cstr(varValue)
						Else
							strResult = strResult & ", " & Cstr(varValue)
						End If
					End Forall
				Else
					'Some error or no value back, so set to blank instead of showing merge field
					strResult = ""					
					Error SYSTEM_ERROR, |Unable to process merge field [| & strMergeField & |].|				
				End If
				
lblNextField:
				
				On Error Goto lblError		
				
				Call Debug(STR_MODULE_NAME & |: Replaced with [| & strResult & |].|)
				
				'Replace merge field using value
				strMergedText = ReplaceString( strMergedText, m_strStartDelimiter & Listtag(varCurrField) & m_strEndDelimiter, strResult )
			End If
			
		End Forall
		
lblExit:
		
		'If any errors were found, pass back a blank string to indicate this
		If (flgHasErrors) Then
			Call Debug(STR_MODULE_NAME & |: Replacement errors occurred.|)			
			strMergedText = ""
		End If
		
		GetMergedText = strMergedText
		
		Call Debug(STR_MODULE_NAME & |: Start of merged text:|)
		Call Debug(STR_MODULE_NAME & |: | & strMergedText)
		Call Debug(STR_MODULE_NAME & |: End of merged text.|)
		
		Call Debug(STR_MODULE_NAME & |: Finished.|)
		
		Exit Function
		
lblError:
		
		flgHasErrors = True		
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Resume lblExit
		
lblErrorNextField:
		
		flgHasErrors = True
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		Resume lblNextField
		
	End Function
	
	'This function is called in the case where user selected as e-mail format "Rich Text (Graphics)". It will copy the body of the email into the body field of the email
	'without looking for any merge text since it is a rich text field.
	Public Function GetRichBodyField()
		
	End Function
	
	'Creates and returns a merged e-mail document
	Public Function getEMailFromDocument( docToMerge As NotesDocument, theSendTo As Variant, theCopyTo As Variant,_
	theBlindCopyTo As Variant, theTemplateFormat As String) As NotesDocument
		
		Const STR_MODULE_NAME = |getEMailFromDocument|
		
		Dim docEmail As NotesDocument
		Dim strSubject As String
		
		'Trap errors
		On Error Goto lblError		
		
		Call Debug(STR_MODULE_NAME & |: Started.|)
		
		'Creates a new mail document document using values from docToMerge in theDB
		'Returned document is not saved first.  Save to send on server or use .send and save or not as needed
		
		'Not properly initialized, exit
		If m_dbMail Is Nothing Then
			Error SYSTEM_ERROR, |Unable to find mail database.|	
		End If
		
		'No doc to merge passed, exit
		If docToMerge Is Nothing Then
			Error SYSTEM_ERROR, |Unable to find document to be merged.|	
		End If
		
		'Note: both DBs stored and server db lazily instantiated to keep doc alive after creation
		'If created on server, use the server stored locally
		If Me.isCreatedOnServer Then
			Set docEmail = New NotesDocument(ServerMailDatabase)
		Else
			Set docEmail = New NotesDocument( m_dbMail )
		End If
		
		'Set basic mail fields
		docEmail.form = "Memo"
		docEmail.MailFormat = "T"
		docEmail.PostedDate = Now
		
		'Set reply to fields
		docEmail.ReplyTo = Me.FromAddress
		docEmail.Principal = Me.FromAddress
		docEmail.From = Me.FromAddress
		docEmail.AltFrom = Me.FromAddress
		docEmail.INetFrom = Me.FromAddress
		
		'Set Recipients and SendTo fields both
		Dim mySendTo As New NotesItem(docEmail,"SendTo",theSendTo,NAMES)
		Dim myCopyTo As New NotesItem(docEmail,"CopyTo",theCopyTo,NAMES)
		Dim myBlindTo As New NotesItem(docEmail,"BlindCopyTo",theBlindCopyTo,NAMES)
		Dim myFullNames As Variant
		Redim myFullNames(0)
		Dim myFullNamesCtr As Long
		
		myFullNamesCtr = 0
		Forall aName In mySendTo.values
			If aName <> "" Then 
				Redim Preserve myFullNames(myFullNamesCtr)
				myFullNames(myFullNamesCtr) = aName
				myFullNamesCtr = myFullNamesCtr + 1
			End If
		End Forall
		Forall aName In myCopyTo.values
			If aName <> "" Then 
				Redim Preserve myFullNames(myFullNamesCtr)
				myFullNames(myFullNamesCtr) = aName
				myFullNamesCtr = myFullNamesCtr + 1
			End If
		End Forall
		Forall aName In myBlindTo.values
			If aName <> "" Then 
				Redim Preserve myFullNames(myFullNamesCtr)
				myFullNames(myFullNamesCtr) = aName
				myFullNamesCtr = myFullNamesCtr + 1
			End If
		End Forall
		
		Dim myRecip As New NotesItem(docEmail,"Recipients",myFullNames,NAMES)     
		
		myRecip.IsSummary = True     
		mySendTo.IsSummary = True
		
		'Get subject text as merged text (no attachments allowed, generally small)
		Call Debug(STR_MODULE_NAME & |: Formatting e-mail subject.|)		
		strSubject = GetMergedText(Me.m_strTemplateSubject, docToMerge)
		If (strSubject = ||) Then
			Error SYSTEM_ERROR, |Unable to format e-mail subject.|	
		Else
			docEmail.Subject = strSubject
		End If
		
		If (theTemplateFormat = "Graphics") Then
			Call Me.m_rtitemGraphic.CopyItemToDocument( docEmail, "Body" )			
		Else
			
			Dim myBodyText As String
			'Get body text as merged text first (attachments tags left in)
			Call Debug(STR_MODULE_NAME & |: Formatting e-mail body.|)				
			myBodyText = GetMergedText(Me.m_strTemplateBody, docToMerge)
			If (myBodyText = ||) Then
				Error SYSTEM_ERROR, |Unable to format e-mail body.|	
			End If
			
			'Create rich text item for e-mail document
			Dim myBody As New NotesRichTextItem( docEmail, "Body" )
			
			'Loop through finding tags that are left after field replacement (should be attachments only)
			Dim myDelimStartPos As Integer
			Dim myDelimLocations List As Long
			Dim myDelimCounter As Long
			
			myDelimStartPos = Instr( myBodyText, m_strStartDelimiter)
			
			If myDelimStartPos > 0 Then 
			'get all tag start positions and store for later use
				While myDelimStartPos > 0 
					myDelimLocations( myDelimCounter ) = myDelimStartPos
					myDelimCounter = myDelimCounter + 1
					myDelimStartPos = Instr( myDelimStartPos + 1, myBodyText, m_strStartDelimiter)
				Wend
				
				Dim myStartPos As Integer
				Dim myEndPos As Integer
				Dim myStartString As String
				Dim myFieldName As String
				myStartPos = 1
				
				'Loop through start positions, replacing tags with attachments
				Forall aDelimStart In myDelimLocations
					myEndPos = Instr( myStartPos, myBodyText, Me.m_strEndDelimiter )
					'Fix 3/19/2003 for starting with a field name				
					If aDelimStart = 1 And myStartPos = 1 Then 
						myStartString = "" 
					Else
						myStartString = Mid( myBodyText, myStartPos, aDelimStart - myStartPos - 1 )
					End If
					
					'Add text before field
					Call myBody.AppendText( myStartString )
					
					'-- Get Field Name
					
					If myEndPos = 0 Then 
						Error SYSTEM_ERROR, |Unable to find the end delimiter for the merge field starting at position [| & Cstr(aDelimStart) & |].|
					End If
					
					myFieldName = Mid( myBodyText, aDelimStart + Me.m_intStartDelimiterLength , myEndPos - aDelimStart - Me.m_intStartDelimiterLength )
					
					If Iselement( m_attachmentList( myFieldName ) ) Then 
						'This is a know attachment field, process it
						Dim myMergeFieldAttachment As MergeFieldAttachment
						'Get Attachment object from list
						Set myMergeFieldAttachment = m_attachmentList( myFieldName )
						Dim myAttachments As Variant
						'Add attachments / text to e-mail body
						Call myMergeFieldAttachment.AddAttachmentsToRTItem( myBody, docToMerge )
					Else
						'We don't know what this merge field is, so flag an error
						Error SYSTEM_ERROR, |An unknown merge field [{| & myFieldName & |}] was found at position [| & Cstr(aDelimStart) & |].|
					End If
					myStartPos = myEndPos + Me.m_intEndDelimiterLength
				End Forall
			Else
				'All just replaced fields, append text
				Call myBody.appendText( myBodyText )
			End If
			
			If myStartPos > 0 Then 
			'Append text after final attachment / field
				myStartString = Mid( myBodyText, myStartPos )
				Call myBody.AppendText( myStartString )
			End If
		End If	'If theTemplateFormat = "Graphics" Then
		'=============================================
		
		Call Debug(STR_MODULE_NAME & |: Start of email text.|)
		Call Debug(STR_MODULE_NAME & |: | & Chr$(13) & myBody.GetUnformattedText())
		Call Debug(STR_MODULE_NAME & |: End of email text.|)		
		
lblExit:
		
		Set getEMailFromDocument = docEmail
		
		Call Debug(STR_MODULE_NAME & |: Finished.|)
		
		Exit Function
		
lblError:
		
		Set docEmail = Nothing
		Call Debug(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		'Don't log failure to open server mailbox as an error as we have a workaround for this case
		If Err() <> 4063 Then
			Call LogError(STR_MODULE_NAME & |: | & Err() & |: | & Error() & | in line | & Erl)
		End If
		Resume lblExit
		
	End Function
	
	Public Function getFieldList() As String
		
		Dim strReturnValue As String
		
		Forall varItem In m_strlstFieldList
			strReturnValue = strReturnValue & m_strStartDelimiter & Listtag(varItem) & m_strEndDelimiter & | | & varItem & Chr$(13)
		End Forall
		
		getFieldList = strReturnValue
		
	End Function
	
End Class