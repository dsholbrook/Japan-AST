<?xml version='1.0' encoding='utf-8'?>
<scriptlibrary name='Utilities' xmlns='http://www.lotus.com/dxl' version='10.0'
 maintenanceversion='1.0' replicaid='862577A00065A565' hide='v3 v4strict'
 designerversion='8.5.3'>
<noteinfo noteid='87a' unid='7FD960319011E6E08525737D00706C02' sequence='32'>
<created><datetime dst='true'>20071023T162756,82-04</datetime></created>
<modified><datetime dst='true'>20180929T235534,78-05</datetime></modified>
<revised><datetime>20160310T111938,52-06</datetime></revised>
<lastaccessed><datetime dst='true'>20180929T235534,78-05</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20180929T235534,78-05</datetime></addedtofile></noteinfo>
<updatedby><name>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></updatedby>
<wassignedby><name>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></wassignedby><code
 event='library'><javaproject class='Utilities.class' codepath='c:\Program Files (x86)\IBM\Notes\Data'><java
 name='Utilities.java'>import java.text.*;
import java.util.*;
import lotus.domino.*;
import java.net.*;

public class Utilities {
	
	// Return the day of the week in letters
	static String whatDay(int intDay) {
		String strDay = null;
     	switch (intDay) {
            			case 1:  strDay = "Sunday";    break;
            			case 2:  strDay = "Monday";    break;
            			case 3:  strDay = "Tuesday";   break;
            			case 4:  strDay = "Wednesday"; break;
            			case 5:  strDay = "Thursday";  break;
            			case 6:  strDay = "Friday";    break;
            			case 7:  strDay = "Saturday";  break;
		  			}    
				if (strDay != null){
					return strDay;
					} else {
					return "Input to function 'whatDay()' must be between 1 and 7";
					}
		  		}
		  		
	// Return the month of the year in letters
	static String whatMonth(int intDay) {
				String strMonth = null;
            		switch (intDay) {
            			case 0:  strMonth = "January";   break;
            			case 1:  strMonth = "February";  break;
            			case 2:  strMonth = "March";     break;
            			case 3:  strMonth = "April";     break;
            			case 4:  strMonth = "May";       break;
          	  		case 5:  strMonth = "June";      break;
           	 		case 6:  strMonth = "July";      break;
          	  		case 7:  strMonth = "August";    break;
          	  		case 8:  strMonth = "September"; break;
          	  		case 9: strMonth  = "October";   break;
          	  		case 10: strMonth = "November";  break;
           	 		case 11: strMonth = "December";  break;
		  			}    
				if (strMonth != null){
					return strMonth;
					} else {
					return "Input to function 'whatMonth()' must a number be between 1 and 12";
					}
		  		}
		  		
	static String replace(String str, String pattern, String replace) throws NotesException{
     	int s = 0;
     	int e = 0;
     	StringBuffer result = new StringBuffer();
    
     	while ((e = str.indexOf(pattern, s)) &gt;= 0) {
     		result.append(str.substring(s, e));
     	     result.append(replace);
     	     s = e + pattern.length();
    		    	}
     	result.append(str.substring(s));
     	return  result.toString();
    	}
    	
	// Format Notes Date Time item to Java Date then through a calendar to output to
	// plain English string format.
	static String formatNotesDate(Vector vNotesDate, Locale locale) throws NotesException{
			String strDate  = "";	 			
			// Date
			DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.SHORT, Locale.UK);			
			if(vNotesDate.size() &gt; 0 ){
				DateTime dt = (DateTime)vNotesDate.elementAt(0);					
   				strDate = dateFormatter.format(dt.toJavaDate());
    			}
		return strDate;
	}

	// Format Notes Date Time item to Java Date then through a calendar to output to
	// plain English string format.
	static String formatNotesTime(Vector vNotesDate, Locale locale) throws NotesException{
			String strDate  = "";	 			
			// Time
			DateFormat dateFormatter = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.UK);			
			if(vNotesDate.size() &gt; 0 ){
				DateTime dt = (DateTime)vNotesDate.elementAt(0);					
   				strDate = dateFormatter.format(dt.toJavaDate());
    			}
		return strDate;
	}

	// Format Notes Date Time item to Java Date then through a calendar to output to
	// plain English string format.
	static String formatTextNotesDate(String strDate){
			String sEventStart  = "";
	 		
			if ( !strDate.equals("") &amp;&amp; strDate != null) {
				// DateTime dt = session.createDateTime(strDate);
				DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,  Locale.UK);
				Date dt = null;
				try {
					dt = df.parse(strDate);
					} catch (ParseException pe){
					pe.printStackTrace();
					}
				Calendar xmas = new GregorianCalendar(Locale.UK);
   				xmas.setTime(dt);
   				int dayOfWeek    = xmas.get(Calendar.DAY_OF_WEEK);
				String sArriveDay   = Utilities.whatDay( dayOfWeek );
				String sArriveMonth = Utilities.whatMonth( dayOfWeek );
				sEventStart  = sArriveDay + ", " + sArriveMonth + " " + xmas.get(Calendar.DAY_OF_MONTH) + ", " + xmas.get(Calendar.YEAR);
						
				}	
		return sEventStart;
	}
	
	// Format Notes Date Time item to Java Date then through a calendar to output to
	// plain English string format.
	static String formatTextNotesDate(String strDate, Locale locale){
			String sEventStart  = "";
	 		
			if ( !strDate.equals("") &amp;&amp; strDate != null) {
				//DateTime dt = session.createDateTime(strDate);
				DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,  Locale.UK);
				Date dt = null;
				try {
					dt = df.parse(strDate);
					} catch (ParseException pe){
					pe.printStackTrace();
					}
				Calendar xmas = new GregorianCalendar(Locale.UK);
   				xmas.setTime(dt);
   				int dayOfWeek    = xmas.get(Calendar.DAY_OF_WEEK);
				String sArriveDay   = Utilities.whatDay( dayOfWeek );
				String sArriveMonth = Utilities.whatMonth( dayOfWeek );
				sEventStart  = sArriveDay + ", " + sArriveMonth + " " + xmas.get(Calendar.DAY_OF_MONTH) + ", " + xmas.get(Calendar.YEAR);
						
				}	
		return sEventStart;
	}

	public static String[] split(String s, String delimiter){
        int delimiterLength;
        // the next statement has the side effect of throwing a null pointer
        // exception if s is null.
        int stringLength = s.length();
        if (delimiter == null || (delimiterLength = delimiter.length()) == 0){
            return new String[] {s};
        }

        int count;
        int start;
        int end;

        // Scan s and count the tokens.
        count = 0;
        start = 0;
        while((end = s.indexOf(delimiter, start)) != -1) {
            count++;
            start = end + delimiterLength;
        }
        count++;

        // allocate an array to return the tokens,
        // we now know how big it should be
        String[] result = new String[count];

        // Scan s again, but this time pick out the tokens
        count = 0;
        start = 0;
        while((end = s.indexOf(delimiter, start)) != -1) {
            result[count] = (s.substring(start, end));
            count++;
            start = end + delimiterLength;
        }
        end = stringLength;
        result[count] = s.substring(start, end);

        return (result);
    }

	// Send the error log of a Java agent to it's owner.
	static void emailError(String strErrorLog, Session s){
		
			try{
				AgentContext agentContext = s.getAgentContext();
				Database db  = agentContext.getCurrentDatabase();
				Document memo = db.createDocument();
				memo.replaceItemValue("Form","Memo");				
      			//memo.replaceItemValue("Body", strErrorLog);      			
        			memo.appendItemValue("Subject", "Error Log domino agent");
        			RichTextItem rti = memo.createRichTextItem("Body");
        			rti.appendText(strErrorLog);
        
        			Vector v = new Vector();        
       			v.addElement("tdupard@yahoo.com");    
        			memo.send(v);
			} catch (NotesException e) {
				
			}
		
	}	
    
		//	Returns the value of the parameter with name passed in "argName"
		//   if it is followed by a "=". Returns "1" if the parameter is there without
		//   a value. Returns "" if the param is not found in "queryString".
	static String getArgumentValue(String queryString, String argName){
		String delimiter = "&amp;";
		String qs = delimiter + queryString + delimiter ;
		int pos = 0;
		int posVal = 0; 
		String strValue =""; 	
	
		pos = qs.indexOf(delimiter + argName + "=");
		if (pos &gt; -1 ){ // The param we are looking for is there folowed by an "=" sign
			// Split all the parameters
			StringTokenizer vST = new StringTokenizer(queryString, "&amp;");     	
     		while (vST.hasMoreTokens()) {
     			String testToken = vST.nextToken();
         			if(testToken.indexOf(argName)&gt;-1){
         				// Split the name/value pair of interest
					StringTokenizer vST2 = new StringTokenizer(testToken, "=");
					while (vST2.hasMoreTokens()) {
						vST2.nextToken();
     					strValue = vST2.nextToken();		
     					}
				}
     		}
			
		} else {
			pos = qs.indexOf( delimiter + argName + delimiter);
			if( pos &gt; -1 ){   // The param we are looking for is there by itself.
				strValue = "1";
			} else {          // The param we are looking for is not there, return empty string.
				strValue = "";
			}
		}
		return strValue ;
	}	
}

</java></javaproject></code>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item>
<item name='$POID'><datetime>20160309T155803,08-06</datetime></item></scriptlibrary>

