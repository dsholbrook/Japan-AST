<?xml version='1.0' encoding='utf-8'?>
<scriptlibrary name='DebugJava' xmlns='http://www.lotus.com/dxl' version='10.0'
 maintenanceversion='1.0' replicaid='862577A00065A565' hide='v3 v4strict'
 designerversion='8.5.3' comment='Ported from the Lotusscript version'>
<noteinfo noteid='7c2' unid='CAC2597D69B601EF86257F7F006460CD' sequence='8'>
<created><datetime dst='true'>20160323T131623,81-05</datetime></created>
<modified><datetime dst='true'>20180929T235534,00-05</datetime></modified>
<revised><datetime dst='true'>20160325T110309,80-05</datetime></revised>
<lastaccessed><datetime dst='true'>20180929T235534,00-05</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20180929T235534,00-05</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Anilkumar Hulikal/OU=Somers/OU=Contr/O=IBM</name><name
>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></updatedby>
<wassignedby><name>CN=David Holbrook/OU=White Plains/OU=Contr/O=IBM</name></wassignedby><code
 event='library'><javaproject class='JavaAgent.class' codepath='c:\Notes\Data'><java
 name='DebugJava.java'>import lotus.domino.*;
import java.text.SimpleDateFormat;
import java.util.Enumeration;

public class DebugJava {

	private boolean g_flgDebugEnabled;
	private boolean g_flgDebugEmailEnabled;  
	private Document g_docLog;
	private Document g_docErrorLog;
	private static final int INT_MAX_LOG_LINES = 500;
	private int intLineCount;

	private Session s;
	private Database dbCurr;
	private RichTextItem rtItemLogText;
	private RichTextStyle rtsLogText;
	private java.util.Date dt = new java.util.Date();

	public DebugJava(String strDocTitle) {
		try {
			//Get session object
			s = NotesFactory.createSession();
			//Point to the current database
			dbCurr = s.getCurrentDatabase();
		} catch (NotesException e) {
			e.printStackTrace();
		}
	}
	public boolean getDebugFlag() {
		return g_flgDebugEnabled;
	}
	public void setDebugFlag(boolean flag) {
		this.g_flgDebugEnabled = flag;
	}
	public boolean getEmailFlag() {
		return g_flgDebugEmailEnabled;
	}
	public void setEmailFlag(boolean flag) {
		this.g_flgDebugEmailEnabled = flag;
	}

	private Document getLogDocument(String strDocTitle) throws NotesException{
		if (getDebugFlag() &amp;&amp; g_docLog == null) {
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
			DateTime timenow = s.createDateTime("Today");
		    timenow.setNow();
			//Create a new Log document
			g_docLog = dbCurr.createDocument();
			//Initialize fields in the document
			g_docLog.appendItemValue("Form", "fLog");
			g_docLog.appendItemValue("DocType","Log");
			g_docLog.appendItemValue("DocTitle", strDocTitle);
			//g_docLog.appendItemValue("RunDate", sdf.format(dt));
			g_docLog.appendItemValue("RunDate", timenow);
			g_docLog.replaceItemValue("$PublicAccess", "1");
			rtItemLogText = (RichTextItem) g_docLog.getFirstItem("LogText");
			//Set the style of the text to be Helv 8
			if (rtItemLogText == null) {
				rtItemLogText = g_docLog.createRichTextItem("LogText");
			}		
			rtsLogText = s.createRichTextStyle();
			rtsLogText.setFont(RichTextStyle.FONT_HELV);
			rtsLogText.setFontSize(8);
			rtItemLogText.appendStyle(rtsLogText);
			rtItemLogText.addNewLine(1);

			//Save the Log
			g_docLog.save(true, true);  
		} 
		return g_docLog;
	}

	private Document getErrorLogDocument(String strDocTitle) throws NotesException {
		if (getDebugFlag() &amp;&amp; g_docErrorLog == null) {
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
			DateTime timenow = s.createDateTime("Today");
		    timenow.setNow();
			//Create a new Log document
			g_docErrorLog = dbCurr.createDocument();
			//Initialize fields in the document
			g_docErrorLog.appendItemValue("Form","nfErrorLog");
			g_docErrorLog.appendItemValue("DocType","Error Log");
			g_docErrorLog.appendItemValue("DocTitle",strDocTitle);
			//g_docErrorLog.appendItemValue("RunDate",sdf.format(dt));
			g_docErrorLog.appendItemValue("RunDate", timenow);
			g_docErrorLog.replaceItemValue("$PublicAccess", "1");
			rtItemLogText = (RichTextItem) g_docErrorLog.getFirstItem("LogText");
			//Set the style of the text to be Helv 8
			if (rtItemLogText == null) {
				rtItemLogText = g_docErrorLog.createRichTextItem("LogText");
			}
			rtsLogText = s.createRichTextStyle();
			rtsLogText.setFont(RichTextStyle.FONT_HELV);
			rtsLogText.setFontSize(8);
			rtItemLogText.appendStyle(rtsLogText);
			rtItemLogText.addNewLine(1);

			//Save the Log
			g_docErrorLog.save(true,true);
		}
		return g_docErrorLog;
	}

	public void logMessage(String strMsg) throws NotesException{
		if (getDebugFlag() == true) {
			//'If there is no Log, create one
			if (g_docLog == null) {
				g_docLog = getLogDocument(strMsg + " -Log");
				intLineCount = 0;
			}

			//If log contains too many lines, create a new log document
			if (intLineCount &gt; INT_MAX_LOG_LINES) {
				g_docLog = getLogDocument(g_docLog.getItemValueString("DocTitle"));
				intLineCount = 0;
			}

			rtItemLogText = (RichTextItem) g_docLog.getFirstItem("LogText");
			//Set the style of the text to be Helv 8
			if (rtItemLogText == null) {
				rtItemLogText = g_docLog.createRichTextItem("LogText");
			}
			if (strMsg != "") {
				SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
				rtItemLogText.appendText(sdf.format(dt));
				rtItemLogText.appendText(" ");
			}
			rtItemLogText.appendText(strMsg);
			rtItemLogText.addNewLine(1);

			g_docLog.save(true,true);

			intLineCount = intLineCount + 1;
		}
	}

	public void logError(String strMsg) throws NotesException{
		if (getDebugFlag() == true) {
			//'If there is no Error Log, create one
			if (g_docErrorLog == null) {
				getErrorLogDocument(strMsg + " -Error Log");
				intLineCount = 0;
			}

			//'If the Error Log contains too many lines, create a new Error Log
			if (intLineCount &gt; INT_MAX_LOG_LINES) {
				getErrorLogDocument(g_docErrorLog.getItemValueString("DocTitle"));
				intLineCount = 0;
			}
			rtItemLogText = (RichTextItem) g_docErrorLog.getFirstItem("LogText");
			//Set the style of the text to be Helv 8
			if (rtItemLogText == null) {
				rtItemLogText = g_docErrorLog.createRichTextItem("LogText");
			}

			if (strMsg != "") {
				SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
				rtItemLogText.appendText(sdf.format(dt));
				rtItemLogText.appendText(" ");
			}

			rtItemLogText.appendText(strMsg);
			rtItemLogText.addNewLine(1);

			g_docErrorLog.save(true,true);

			//'Send Error e-mail to Dev team if enabled in profile
			if (g_flgDebugEmailEnabled) {
				sendErrorEmail(strMsg);
			}

			intLineCount = intLineCount + 1;
		}
	}

	private void sendErrorEmail(String strMsg) throws NotesException{
	//------------------------------------------------------------------------------------------------------
    //Description
    //------------------
    //Send an error e-mail.
    //
    //Return Values
    //-----------------------
    //None
    //------------------------------------------------------------------------------------------------------
		Session s = NotesFactory.createSession();
		Database dbCurr;
		Document docEmail;
		RichTextItem rtItem;
		Item item;
		Document docDbProfile; 
		String strCurrServerName,strCurrUserName,strCurrServerCommonName,strCurrUserCommonName;

		dbCurr = s.getCurrentDatabase();

		docDbProfile = dbCurr.getProfileDocument("fProfile",s.getCommonUserName());

		Name nameServer = s.createName(dbCurr.getServer());
		strCurrServerName = nameServer.getAbbreviated();
		strCurrServerCommonName = nameServer.getCommon();

		if (strCurrServerCommonName.length() &gt;= 2 ) {
			strCurrServerCommonName = strCurrServerCommonName.substring(strCurrServerCommonName.length() - 2);
		}

		Name nameCurrUser = s.createName(s.getCommonUserName());
		strCurrUserName = nameCurrUser.getAbbreviated();
		strCurrUserCommonName = nameCurrUser.getCommon();

		docEmail = dbCurr.createDocument();

		docEmail.appendItemValue("Form" ,"Memo");
		docEmail.appendItemValue("Subject", dbCurr.getTitle() + " - " + strCurrServerCommonName + " - " + dbCurr.getFileName() + " - " + strCurrUserCommonName + " - " + strMsg.substring(20));

		docEmail.appendItemValue("ReplyTo","ahulikal@us.ibm.com");
		docEmail.appendItemValue("Principal","ahulikal@us.ibm.com");
		docEmail.appendItemValue("From","ahulikal@us.ibm.com");
		docEmail.appendItemValue("AltFrom","ahulikal@us.ibm.com");
		docEmail.appendItemValue("INetFrom","ahulikal@us.ibm.com");

		rtItem = docEmail.createRichTextItem("Body");

		rtItem.appendText("MAT error report.");
		rtItem.addNewLine(1);

		rtItem.appendText("From [" + dbCurr.getTitle() + "]");
		rtItem.appendText("Server [" + strCurrServerName + "]");
		rtItem.addNewLine(1);
		rtItem.appendText("Filename [" + dbCurr.getFilePath() + "]" );
		rtItem.addNewLine(1);
		rtItem.appendText("User name [" + strCurrUserName + "]");	
		rtItem.addNewLine(1);
		rtItem.appendText("Error log -&gt; ");
		rtItem.appendText("[" + strMsg + "]");	
		rtItem.addNewLine(1);
		rtItem.appendDocLink(g_docErrorLog, docDbProfile.getItemValueString("dp_SystemName"));

		//'Send the error e-mail
		item = docDbProfile.getFirstItem("dp_ErrorReportingEmailAddress");
		@SuppressWarnings("unchecked")
		java.util.Vector&lt;String&gt; itemValuesVector = item.getValues();
		Enumeration&lt;String&gt; itemValues = itemValuesVector.elements();
		while (itemValues.hasMoreElements()) {
			docEmail.send(false, (String) itemValues.nextElement());
		}
	}
}</java></javaproject></code>
<item name='$POID'><datetime>20150129T132800,61-05</datetime></item>
<item name='$JavaCompilerSource'><text>1.6</text></item>
<item name='$JavaCompilerTarget'><text>1.6</text></item></scriptlibrary>

